
STM32_CANopen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  080099b4  080099b4  0000a9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ea4  08009ea4  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009ea4  08009ea4  0000aea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009eac  08009eac  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eac  08009eac  0000aeac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009eb0  08009eb0  0000aeb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009eb4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c78  2000006c  08009f20  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ce4  08009f20  0000bce4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0d1  00000000  00000000  0000b09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044d7  00000000  00000000  0002916b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  0002d648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001248  00000000  00000000  0002ede8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c7c6  00000000  00000000  00030030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d6c8  00000000  00000000  0005c7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bab4  00000000  00000000  00079ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00185972  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cf0  00000000  00000000  001859b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000006c 	.word	0x2000006c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800999c 	.word	0x0800999c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000070 	.word	0x20000070
 800023c:	0800999c 	.word	0x0800999c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <CAN_SendFrame_Std>:
  * @param  data_len: lunghezza del payload (0-8).
  * @retval HAL status (HAL_OK se tutto va bene, altro in caso di errore)
  */

HAL_StatusTypeDef CAN_SendFrame_Std(uint32_t cob_id, uint8_t *data, uint8_t data_len)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b090      	sub	sp, #64	@ 0x40
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	4613      	mov	r3, r2
 80005dc:	71fb      	strb	r3, [r7, #7]
  CAN_TxHeaderTypeDef txHeader;
  uint8_t payload[8] = {0};  				// Buffer di 8 byte per il payload
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
  uint8_t cob_id_transmitted[2] = {0};   	// Buffer di 2 byte per il COB-ID da trasmettere
 80005e6:	2300      	movs	r3, #0
 80005e8:	833b      	strh	r3, [r7, #24]
  uint32_t txMailbox;

  // Controllo sul puntatore ai dati
  if (data == NULL) {
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d104      	bne.n	80005fa <CAN_SendFrame_Std+0x2a>
    printf("Error: data pointer is NULL\r\n");
 80005f0:	4831      	ldr	r0, [pc, #196]	@ (80006b8 <CAN_SendFrame_Std+0xe8>)
 80005f2:	f007 fee3 	bl	80083bc <puts>
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e059      	b.n	80006ae <CAN_SendFrame_Std+0xde>
  }

  // Se data_len supera 8, troncala a 8 byte
  if (data_len > 8) {
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b08      	cmp	r3, #8
 80005fe:	d906      	bls.n	800060e <CAN_SendFrame_Std+0x3e>
    printf("Warning: data_len %d > 8, truncating to 8 bytes\r\n", data_len);
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	4619      	mov	r1, r3
 8000604:	482d      	ldr	r0, [pc, #180]	@ (80006bc <CAN_SendFrame_Std+0xec>)
 8000606:	f007 fe71 	bl	80082ec <iprintf>
    data_len = 8;
 800060a:	2308      	movs	r3, #8
 800060c:	71fb      	strb	r3, [r7, #7]
//  printf("\r\nIl COB-ID in LE: [0x%02X 0x%02X]\r\n",
//         cob_id_transmitted[0],
//         cob_id_transmitted[1]);

  // Inizializza l'area payload a zero e copia i dati
  memset(&payload[0], 0, 8);
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2208      	movs	r2, #8
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f007 ffc2 	bl	80085a0 <memset>
  memcpy(&payload[0], data, data_len);
 800061c:	79fa      	ldrb	r2, [r7, #7]
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	68b9      	ldr	r1, [r7, #8]
 8000624:	4618      	mov	r0, r3
 8000626:	f008 f836 	bl	8008696 <memcpy>

  // Imposta il COB-ID come CAN identifier (questo verrà visualizzato in esadecimale)
  txHeader.StdId = cob_id;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  txHeader.ExtId = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	62bb      	str	r3, [r7, #40]	@ 0x28
  txHeader.RTR = CAN_RTR_DATA;
 8000632:	2300      	movs	r3, #0
 8000634:	633b      	str	r3, [r7, #48]	@ 0x30
  txHeader.IDE = CAN_ID_STD;
 8000636:	2300      	movs	r3, #0
 8000638:	62fb      	str	r3, [r7, #44]	@ 0x2c
  txHeader.DLC = data_len;  // DLC è il numero di byte del payload
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	637b      	str	r3, [r7, #52]	@ 0x34
  txHeader.TransmitGlobalTime = DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

  // Invio del messaggio tramite l'interfaccia CAN 1
  if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, payload, &txMailbox) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	f107 021c 	add.w	r2, r7, #28
 800064c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000650:	481b      	ldr	r0, [pc, #108]	@ (80006c0 <CAN_SendFrame_Std+0xf0>)
 8000652:	f001 f9e1 	bl	8001a18 <HAL_CAN_AddTxMessage>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d006      	beq.n	800066a <CAN_SendFrame_Std+0x9a>
  {
    // Stampa di debug in caso di errore, eventualmente puoi implementare un retry o loggare in un buffer di errori
    printf("\r\nError: HAL_CAN_AddTxMessage failed (TxMailbox = %lu)\r\n", txMailbox);
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	4619      	mov	r1, r3
 8000660:	4818      	ldr	r0, [pc, #96]	@ (80006c4 <CAN_SendFrame_Std+0xf4>)
 8000662:	f007 fe43 	bl	80082ec <iprintf>
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	e021      	b.n	80006ae <CAN_SendFrame_Std+0xde>
  }

//  printf("\r\nTxMailbox = %lu\r\n", txMailbox);

  // Opzionale: stampa di debug per confermare l'invio
  printf("\r\nCAN TX: ID=0x%03lX DLC=%lu Data=", txHeader.StdId, (unsigned long)txHeader.DLC);
 800066a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800066c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800066e:	4619      	mov	r1, r3
 8000670:	4815      	ldr	r0, [pc, #84]	@ (80006c8 <CAN_SendFrame_Std+0xf8>)
 8000672:	f007 fe3b 	bl	80082ec <iprintf>
  for (uint8_t i = 0; i < txHeader.DLC; i++) {
 8000676:	2300      	movs	r3, #0
 8000678:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800067c:	e00e      	b.n	800069c <CAN_SendFrame_Std+0xcc>
      printf("%02X ", payload[i]);
 800067e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000682:	3340      	adds	r3, #64	@ 0x40
 8000684:	443b      	add	r3, r7
 8000686:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800068a:	4619      	mov	r1, r3
 800068c:	480f      	ldr	r0, [pc, #60]	@ (80006cc <CAN_SendFrame_Std+0xfc>)
 800068e:	f007 fe2d 	bl	80082ec <iprintf>
  for (uint8_t i = 0; i < txHeader.DLC; i++) {
 8000692:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000696:	3301      	adds	r3, #1
 8000698:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800069c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80006a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d3eb      	bcc.n	800067e <CAN_SendFrame_Std+0xae>
  }

  printf("\r\n");
 80006a6:	480a      	ldr	r0, [pc, #40]	@ (80006d0 <CAN_SendFrame_Std+0x100>)
 80006a8:	f007 fe88 	bl	80083bc <puts>

  return HAL_OK;
 80006ac:	2300      	movs	r3, #0

}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3740      	adds	r7, #64	@ 0x40
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	080099b4 	.word	0x080099b4
 80006bc:	080099d4 	.word	0x080099d4
 80006c0:	20000088 	.word	0x20000088
 80006c4:	08009a08 	.word	0x08009a08
 80006c8:	08009a44 	.word	0x08009a44
 80006cc:	08009a68 	.word	0x08009a68
 80006d0:	08009a70 	.word	0x08009a70

080006d4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	@ 0x28
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006da:	4b2e      	ldr	r3, [pc, #184]	@ (8000794 <MX_CAN1_Init+0xc0>)
 80006dc:	4a2e      	ldr	r2, [pc, #184]	@ (8000798 <MX_CAN1_Init+0xc4>)
 80006de:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80006e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000794 <MX_CAN1_Init+0xc0>)
 80006e2:	2209      	movs	r2, #9
 80006e4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000794 <MX_CAN1_Init+0xc0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ec:	4b29      	ldr	r3, [pc, #164]	@ (8000794 <MX_CAN1_Init+0xc0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80006f2:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <MX_CAN1_Init+0xc0>)
 80006f4:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80006f8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006fa:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <MX_CAN1_Init+0xc0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000700:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <MX_CAN1_Init+0xc0>)
 8000702:	2200      	movs	r2, #0
 8000704:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000706:	4b23      	ldr	r3, [pc, #140]	@ (8000794 <MX_CAN1_Init+0xc0>)
 8000708:	2200      	movs	r2, #0
 800070a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800070c:	4b21      	ldr	r3, [pc, #132]	@ (8000794 <MX_CAN1_Init+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <MX_CAN1_Init+0xc0>)
 8000714:	2200      	movs	r2, #0
 8000716:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000718:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <MX_CAN1_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800071e:	4b1d      	ldr	r3, [pc, #116]	@ (8000794 <MX_CAN1_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000724:	481b      	ldr	r0, [pc, #108]	@ (8000794 <MX_CAN1_Init+0xc0>)
 8000726:	f000 ff4b 	bl	80015c0 <HAL_CAN_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000730:	f000 fbce 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canFilterConfig;

  canFilterConfig.FilterBank = 0;                    // Primo filtro disponibile
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800073c:	2301      	movs	r3, #1
 800073e:	61fb      	str	r3, [r7, #28]
  canFilterConfig.FilterIdHigh = 0x0000;            // Nessun filtro su ID
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
  canFilterConfig.FilterIdLow = 0x0000;
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterMaskIdHigh = 0x0000;        // "Maschera aperta"
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterMaskIdLow = 0x0000;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterActivation = ENABLE;
 8000754:	2301      	movs	r3, #1
 8000756:	623b      	str	r3, [r7, #32]
  canFilterConfig.SlaveStartFilterBank = 14;         // Dipende dalla serie, su F7 spesso si usa 14 come separatore
 8000758:	230e      	movs	r3, #14
 800075a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	480c      	ldr	r0, [pc, #48]	@ (8000794 <MX_CAN1_Init+0xc0>)
 8000762:	f001 f829 	bl	80017b8 <HAL_CAN_ConfigFilter>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_CAN1_Init+0x9c>
  {
     // Gestisci errore
     Error_Handler();
 800076c:	f000 fbb0 	bl	8000ed0 <Error_Handler>
  }

  HAL_CAN_ActivateNotification(&hcan1,
 8000770:	f648 7107 	movw	r1, #36615	@ 0x8f07
 8000774:	4807      	ldr	r0, [pc, #28]	@ (8000794 <MX_CAN1_Init+0xc0>)
 8000776:	f001 fb41 	bl	8001dfc <HAL_CAN_ActivateNotification>
      CAN_IT_BUSOFF                |
      CAN_IT_LAST_ERROR_CODE       |
      CAN_IT_ERROR
  );

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800077a:	4806      	ldr	r0, [pc, #24]	@ (8000794 <MX_CAN1_Init+0xc0>)
 800077c:	f001 f908 	bl	8001990 <HAL_CAN_Start>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_CAN1_Init+0xb6>
  {
     // Gestisci errore
     Error_Handler();
 8000786:	f000 fba3 	bl	8000ed0 <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	@ 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000088 	.word	0x20000088
 8000798:	40006400 	.word	0x40006400

0800079c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a24      	ldr	r2, [pc, #144]	@ (800084c <HAL_CAN_MspInit+0xb0>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d141      	bne.n	8000842 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007be:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <HAL_CAN_MspInit+0xb4>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c2:	4a23      	ldr	r2, [pc, #140]	@ (8000850 <HAL_CAN_MspInit+0xb4>)
 80007c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ca:	4b21      	ldr	r3, [pc, #132]	@ (8000850 <HAL_CAN_MspInit+0xb4>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <HAL_CAN_MspInit+0xb4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a1d      	ldr	r2, [pc, #116]	@ (8000850 <HAL_CAN_MspInit+0xb4>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <HAL_CAN_MspInit+0xb4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000800:	2309      	movs	r3, #9
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4812      	ldr	r0, [pc, #72]	@ (8000854 <HAL_CAN_MspInit+0xb8>)
 800080c:	f002 f990 	bl	8002b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081e:	2303      	movs	r3, #3
 8000820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000822:	2309      	movs	r3, #9
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4809      	ldr	r0, [pc, #36]	@ (8000854 <HAL_CAN_MspInit+0xb8>)
 800082e:	f002 f97f 	bl	8002b30 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2105      	movs	r1, #5
 8000836:	2014      	movs	r0, #20
 8000838:	f001 fdee 	bl	8002418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800083c:	2014      	movs	r0, #20
 800083e:	f001 fe07 	bl	8002450 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000842:	bf00      	nop
 8000844:	3728      	adds	r7, #40	@ 0x28
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40006400 	.word	0x40006400
 8000850:	40023800 	.word	0x40023800
 8000854:	40020000 	.word	0x40020000

08000858 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: puntatore all'handle CAN (CAN_HandleTypeDef).
  * @retval None
  */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	@ 0x30
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rxHeader;
  uint8_t rxData[8];

  // Prova a leggere il messaggio dalla FIFO0
  if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	f107 0210 	add.w	r2, r7, #16
 8000868:	2100      	movs	r1, #0
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f001 f9a4 	bl	8001bb8 <HAL_CAN_GetRxMessage>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d121      	bne.n	80008ba <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
  {
    // Stampa di debug: mostra l'ID, il DLC e i dati ricevuti
    printf("\r\nCAN RX: ID=0x%03lX DLC=%ld Data=", rxHeader.StdId, rxHeader.DLC);
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	6a3a      	ldr	r2, [r7, #32]
 800087a:	4619      	mov	r1, r3
 800087c:	4812      	ldr	r0, [pc, #72]	@ (80008c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800087e:	f007 fd35 	bl	80082ec <iprintf>
    for (uint8_t i = 0; i < rxHeader.DLC; i++)
 8000882:	2300      	movs	r3, #0
 8000884:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000888:	e00e      	b.n	80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
    {
      printf("%02X ", rxData[i]);
 800088a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800088e:	3330      	adds	r3, #48	@ 0x30
 8000890:	443b      	add	r3, r7
 8000892:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	@ (80008cc <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800089a:	f007 fd27 	bl	80082ec <iprintf>
    for (uint8_t i = 0; i < rxHeader.DLC; i++)
 800089e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008a2:	3301      	adds	r3, #1
 80008a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80008a8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80008ac:	6a3b      	ldr	r3, [r7, #32]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d3eb      	bcc.n	800088a <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
    }
    printf("\r\n");
 80008b2:	4807      	ldr	r0, [pc, #28]	@ (80008d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80008b4:	f007 fd82 	bl	80083bc <puts>
  else
  {
    // Se la lettura fallisce, stampa un messaggio di errore per il debug
    printf("Error: Failed to retrieve CAN message from FIFO0\r\n");
  }
}
 80008b8:	e002      	b.n	80008c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
    printf("Error: Failed to retrieve CAN message from FIFO0\r\n");
 80008ba:	4806      	ldr	r0, [pc, #24]	@ (80008d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80008bc:	f007 fd7e 	bl	80083bc <puts>
}
 80008c0:	bf00      	nop
 80008c2:	3730      	adds	r7, #48	@ 0x30
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	08009a74 	.word	0x08009a74
 80008cc:	08009a68 	.word	0x08009a68
 80008d0:	08009a70 	.word	0x08009a70
 80008d4:	08009a98 	.word	0x08009a98

080008d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008de:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <MX_DMA_Init+0x48>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000920 <MX_DMA_Init+0x48>)
 80008e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <MX_DMA_Init+0x48>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2105      	movs	r1, #5
 80008fa:	200c      	movs	r0, #12
 80008fc:	f001 fd8c 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000900:	200c      	movs	r0, #12
 8000902:	f001 fda5 	bl	8002450 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2105      	movs	r1, #5
 800090a:	200e      	movs	r0, #14
 800090c:	f001 fd84 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000910:	200e      	movs	r0, #14
 8000912:	f001 fd9d 	bl	8002450 <HAL_NVIC_EnableIRQ>

}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000928:	4a09      	ldr	r2, [pc, #36]	@ (8000950 <MX_FREERTOS_Init+0x2c>)
 800092a:	2100      	movs	r1, #0
 800092c:	4809      	ldr	r0, [pc, #36]	@ (8000954 <MX_FREERTOS_Init+0x30>)
 800092e:	f004 fda7 	bl	8005480 <osThreadNew>
 8000932:	4603      	mov	r3, r0
 8000934:	4a08      	ldr	r2, [pc, #32]	@ (8000958 <MX_FREERTOS_Init+0x34>)
 8000936:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  if (defaultTaskHandle == NULL){
 8000938:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <MX_FREERTOS_Init+0x34>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d103      	bne.n	8000948 <MX_FREERTOS_Init+0x24>
  	printf("Errore nella creazione del task.\r\n");
 8000940:	4806      	ldr	r0, [pc, #24]	@ (800095c <MX_FREERTOS_Init+0x38>)
 8000942:	f007 fd3b 	bl	80083bc <puts>
  	return;
 8000946:	e002      	b.n	800094e <MX_FREERTOS_Init+0x2a>
  }
  else {
  	printf("Default task creato correttamente.\r\n");
 8000948:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_FREERTOS_Init+0x3c>)
 800094a:	f007 fd37 	bl	80083bc <puts>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800094e:	bd80      	pop	{r7, pc}
 8000950:	08009d10 	.word	0x08009d10
 8000954:	08000a55 	.word	0x08000a55
 8000958:	200000b0 	.word	0x200000b0
 800095c:	08009ad8 	.word	0x08009ad8
 8000960:	08009afc 	.word	0x08009afc

08000964 <convertHexStringToBytes>:

/* USER CODE BEGIN Header_StartDefaultTask */

int convertHexStringToBytes(const char *hexStr, uint8_t *outBuf, int maxBytes) {
 8000964:	b480      	push	{r7}
 8000966:	b089      	sub	sp, #36	@ 0x24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
    int i = 0, dataLen = 0, highNibble = -1;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
 8000978:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800097c:	617b      	str	r3, [r7, #20]
    while (hexStr[i] != '\0' && dataLen < maxBytes) {
 800097e:	e058      	b.n	8000a32 <convertHexStringToBytes+0xce>
        int val = -1;
 8000980:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000984:	613b      	str	r3, [r7, #16]
        if (hexStr[i] >= '0' && hexStr[i] <= '9')
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000990:	d90c      	bls.n	80009ac <convertHexStringToBytes+0x48>
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b39      	cmp	r3, #57	@ 0x39
 800099c:	d806      	bhi.n	80009ac <convertHexStringToBytes+0x48>
            val = hexStr[i] - '0';
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	3b30      	subs	r3, #48	@ 0x30
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	e024      	b.n	80009f6 <convertHexStringToBytes+0x92>
        else if (hexStr[i] >= 'A' && hexStr[i] <= 'F')
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	4413      	add	r3, r2
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b40      	cmp	r3, #64	@ 0x40
 80009b6:	d90c      	bls.n	80009d2 <convertHexStringToBytes+0x6e>
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	4413      	add	r3, r2
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b46      	cmp	r3, #70	@ 0x46
 80009c2:	d806      	bhi.n	80009d2 <convertHexStringToBytes+0x6e>
            val = hexStr[i] - 'A' + 10;
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4413      	add	r3, r2
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	3b37      	subs	r3, #55	@ 0x37
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	e011      	b.n	80009f6 <convertHexStringToBytes+0x92>
        else if (hexStr[i] >= 'a' && hexStr[i] <= 'f')
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	68fa      	ldr	r2, [r7, #12]
 80009d6:	4413      	add	r3, r2
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b60      	cmp	r3, #96	@ 0x60
 80009dc:	d90b      	bls.n	80009f6 <convertHexStringToBytes+0x92>
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	4413      	add	r3, r2
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b66      	cmp	r3, #102	@ 0x66
 80009e8:	d805      	bhi.n	80009f6 <convertHexStringToBytes+0x92>
            val = hexStr[i] - 'a' + 10;
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	3b57      	subs	r3, #87	@ 0x57
 80009f4:	613b      	str	r3, [r7, #16]

        if(val >= 0) {
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db17      	blt.n	8000a2c <convertHexStringToBytes+0xc8>
            if(highNibble < 0)
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	da02      	bge.n	8000a08 <convertHexStringToBytes+0xa4>
                highNibble = val;
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	e011      	b.n	8000a2c <convertHexStringToBytes+0xc8>
            else {
                outBuf[dataLen++] = (uint8_t)((highNibble << 4) | val);
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	011b      	lsls	r3, r3, #4
 8000a0c:	b25a      	sxtb	r2, r3
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	b25b      	sxtb	r3, r3
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b259      	sxtb	r1, r3
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	61ba      	str	r2, [r7, #24]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	4413      	add	r3, r2
 8000a22:	b2ca      	uxtb	r2, r1
 8000a24:	701a      	strb	r2, [r3, #0]
                highNibble = -1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a2a:	617b      	str	r3, [r7, #20]
            }
        }
        i++;
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	61fb      	str	r3, [r7, #28]
    while (hexStr[i] != '\0' && dataLen < maxBytes) {
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <convertHexStringToBytes+0xe2>
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	db9c      	blt.n	8000980 <convertHexStringToBytes+0x1c>
    }
    return dataLen;
 8000a46:	69bb      	ldr	r3, [r7, #24]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3724      	adds	r7, #36	@ 0x24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0c6      	sub	sp, #280	@ 0x118
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a5e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000a62:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */

	  char lineID[CONSOLE_RX_BUFFER_SIZE];
	  char lineData[CONSOLE_RX_BUFFER_SIZE];
	  uint32_t cob_id = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	  uint8_t dataBuf[8];
	  int dataLen = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
//	  HAL_Delay(10);

	  for(;;)
	  {
	    // Reset buffer
	    memset(lineID, 0, sizeof(lineID));
 8000a70:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000a74:	2280      	movs	r2, #128	@ 0x80
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f007 fd91 	bl	80085a0 <memset>
	    memset(lineData, 0, sizeof(lineData));
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	2280      	movs	r2, #128	@ 0x80
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f007 fd8a 	bl	80085a0 <memset>
	    dataLen = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	    cob_id = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	    printf("\r\n====================================================\r\n");
 8000a98:	4859      	ldr	r0, [pc, #356]	@ (8000c00 <StartDefaultTask+0x1ac>)
 8000a9a:	f007 fc8f 	bl	80083bc <puts>
	    fflush(stdout);
 8000a9e:	4b59      	ldr	r3, [pc, #356]	@ (8000c04 <StartDefaultTask+0x1b0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f007 fb4b 	bl	8008140 <fflush>
	    printf(">>> Insert COB-ID (hex): ");
 8000aaa:	4857      	ldr	r0, [pc, #348]	@ (8000c08 <StartDefaultTask+0x1b4>)
 8000aac:	f007 fc1e 	bl	80082ec <iprintf>
	    fflush(stdout);
 8000ab0:	4b54      	ldr	r3, [pc, #336]	@ (8000c04 <StartDefaultTask+0x1b0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f007 fb42 	bl	8008140 <fflush>

	    if (scanf("%s", lineID) != 1) {
 8000abc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4852      	ldr	r0, [pc, #328]	@ (8000c0c <StartDefaultTask+0x1b8>)
 8000ac4:	f007 fc82 	bl	80083cc <iscanf>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d003      	beq.n	8000ad6 <StartDefaultTask+0x82>
	        printf("Errore nella lettura del COB-ID\r\n");
 8000ace:	4850      	ldr	r0, [pc, #320]	@ (8000c10 <StartDefaultTask+0x1bc>)
 8000ad0:	f007 fc74 	bl	80083bc <puts>
	        continue; // o gestisci l'errore opportunamente
 8000ad4:	e092      	b.n	8000bfc <StartDefaultTask+0x1a8>
	    }

	    HAL_Delay(10);
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f000 fd4e 	bl	8001578 <HAL_Delay>

	    // Convert ID from hex string
	    cob_id = (uint32_t)strtol(lineID, NULL, 16);
 8000adc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000ae0:	2210      	movs	r2, #16
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f007 fa75 	bl	8007fd4 <strtol>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	    printf("\r>>> Insert data to send (hex): ");
 8000af0:	4848      	ldr	r0, [pc, #288]	@ (8000c14 <StartDefaultTask+0x1c0>)
 8000af2:	f007 fbfb 	bl	80082ec <iprintf>
	    fflush(stdout);
 8000af6:	4b43      	ldr	r3, [pc, #268]	@ (8000c04 <StartDefaultTask+0x1b0>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f007 fb1f 	bl	8008140 <fflush>

	    scanf("%s", lineData);
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4619      	mov	r1, r3
 8000b08:	4840      	ldr	r0, [pc, #256]	@ (8000c0c <StartDefaultTask+0x1b8>)
 8000b0a:	f007 fc5f 	bl	80083cc <iscanf>

	    HAL_Delay(10);
 8000b0e:	200a      	movs	r0, #10
 8000b10:	f000 fd32 	bl	8001578 <HAL_Delay>

	    // Convert data hex string -> bytes
	    dataLen = convertHexStringToBytes(lineData, dataBuf, 8);
 8000b14:	f107 0108 	add.w	r1, r7, #8
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	2208      	movs	r2, #8
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff20 	bl	8000964 <convertHexStringToBytes>
 8000b24:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	    // Returns number of bytes of string

	    printf("\r\nCOB-ID CONTENUTO: %lx", cob_id);
 8000b28:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8000b2c:	483a      	ldr	r0, [pc, #232]	@ (8000c18 <StartDefaultTask+0x1c4>)
 8000b2e:	f007 fbdd 	bl	80082ec <iprintf>
	    printf("\r\nPAYLOAD 0 CONTENUTO: %x", dataBuf[0]);
 8000b32:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b36:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4837      	ldr	r0, [pc, #220]	@ (8000c1c <StartDefaultTask+0x1c8>)
 8000b40:	f007 fbd4 	bl	80082ec <iprintf>
	    printf("\r\nPAYLOAD 1 CONTENUTO: %x", dataBuf[1]);
 8000b44:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b48:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000b4c:	785b      	ldrb	r3, [r3, #1]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4833      	ldr	r0, [pc, #204]	@ (8000c20 <StartDefaultTask+0x1cc>)
 8000b52:	f007 fbcb 	bl	80082ec <iprintf>
	    printf("\r\nPAYLOAD 2 CONTENUTO: %x", dataBuf[2]);
 8000b56:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b5a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000b5e:	789b      	ldrb	r3, [r3, #2]
 8000b60:	4619      	mov	r1, r3
 8000b62:	4830      	ldr	r0, [pc, #192]	@ (8000c24 <StartDefaultTask+0x1d0>)
 8000b64:	f007 fbc2 	bl	80082ec <iprintf>
	    printf("\r\nPAYLOAD 3 CONTENUTO: %x", dataBuf[3]);
 8000b68:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000b70:	78db      	ldrb	r3, [r3, #3]
 8000b72:	4619      	mov	r1, r3
 8000b74:	482c      	ldr	r0, [pc, #176]	@ (8000c28 <StartDefaultTask+0x1d4>)
 8000b76:	f007 fbb9 	bl	80082ec <iprintf>
	    printf("\r\nPAYLOAD 4 CONTENUTO: %x", dataBuf[4]);
 8000b7a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b7e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000b82:	791b      	ldrb	r3, [r3, #4]
 8000b84:	4619      	mov	r1, r3
 8000b86:	4829      	ldr	r0, [pc, #164]	@ (8000c2c <StartDefaultTask+0x1d8>)
 8000b88:	f007 fbb0 	bl	80082ec <iprintf>
	    printf("\r\nPAYLOAD 5 CONTENUTO: %x", dataBuf[5]);
 8000b8c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b90:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000b94:	795b      	ldrb	r3, [r3, #5]
 8000b96:	4619      	mov	r1, r3
 8000b98:	4825      	ldr	r0, [pc, #148]	@ (8000c30 <StartDefaultTask+0x1dc>)
 8000b9a:	f007 fba7 	bl	80082ec <iprintf>
	    printf("\r\nPAYLOAD 6 CONTENUTO: %x", dataBuf[6]);
 8000b9e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ba2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000ba6:	799b      	ldrb	r3, [r3, #6]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4822      	ldr	r0, [pc, #136]	@ (8000c34 <StartDefaultTask+0x1e0>)
 8000bac:	f007 fb9e 	bl	80082ec <iprintf>
	    printf("\r\nPAYLOAD 7 CONTENUTO: %x\r\n", dataBuf[7]);
 8000bb0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bb4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000bb8:	79db      	ldrb	r3, [r3, #7]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	481e      	ldr	r0, [pc, #120]	@ (8000c38 <StartDefaultTask+0x1e4>)
 8000bbe:	f007 fb95 	bl	80082ec <iprintf>

	    // Send CAN frame
	    // INSERIRE CORRETTAMENTE COB-ID
	    // CAN_SendFrame_Std(0x601, dataBuf, dataLen);
	    // CAN_SendFrame_Std(601, dataBuf, dataLen);
	    CAN_SendFrame_Std(cob_id, dataBuf, dataLen);
 8000bc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8000bd2:	f7ff fcfd 	bl	80005d0 <CAN_SendFrame_Std>

	    HAL_Delay(10);
 8000bd6:	200a      	movs	r0, #10
 8000bd8:	f000 fcce 	bl	8001578 <HAL_Delay>

	    printf("\r\nFrame inviato! COB-ID=0x%lX, %d bytes.\r", cob_id, dataLen);
 8000bdc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000be0:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8000be4:	4815      	ldr	r0, [pc, #84]	@ (8000c3c <StartDefaultTask+0x1e8>)
 8000be6:	f007 fb81 	bl	80082ec <iprintf>

	    fflush(stdout);
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <StartDefaultTask+0x1b0>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f007 faa5 	bl	8008140 <fflush>

	    HAL_Delay(10);
 8000bf6:	200a      	movs	r0, #10
 8000bf8:	f000 fcbe 	bl	8001578 <HAL_Delay>
	    memset(lineID, 0, sizeof(lineID));
 8000bfc:	e738      	b.n	8000a70 <StartDefaultTask+0x1c>
 8000bfe:	bf00      	nop
 8000c00:	08009b20 	.word	0x08009b20
 8000c04:	2000001c 	.word	0x2000001c
 8000c08:	08009b58 	.word	0x08009b58
 8000c0c:	08009b74 	.word	0x08009b74
 8000c10:	08009b78 	.word	0x08009b78
 8000c14:	08009b9c 	.word	0x08009b9c
 8000c18:	08009bc0 	.word	0x08009bc0
 8000c1c:	08009bd8 	.word	0x08009bd8
 8000c20:	08009bf4 	.word	0x08009bf4
 8000c24:	08009c10 	.word	0x08009c10
 8000c28:	08009c2c 	.word	0x08009c2c
 8000c2c:	08009c48 	.word	0x08009c48
 8000c30:	08009c64 	.word	0x08009c64
 8000c34:	08009c80 	.word	0x08009c80
 8000c38:	08009c9c 	.word	0x08009c9c
 8000c3c:	08009cb8 	.word	0x08009cb8

08000c40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c56:	4b2d      	ldr	r3, [pc, #180]	@ (8000d0c <MX_GPIO_Init+0xcc>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8000d0c <MX_GPIO_Init+0xcc>)
 8000c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b2a      	ldr	r3, [pc, #168]	@ (8000d0c <MX_GPIO_Init+0xcc>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b27      	ldr	r3, [pc, #156]	@ (8000d0c <MX_GPIO_Init+0xcc>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a26      	ldr	r2, [pc, #152]	@ (8000d0c <MX_GPIO_Init+0xcc>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b24      	ldr	r3, [pc, #144]	@ (8000d0c <MX_GPIO_Init+0xcc>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	4b21      	ldr	r3, [pc, #132]	@ (8000d0c <MX_GPIO_Init+0xcc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a20      	ldr	r2, [pc, #128]	@ (8000d0c <MX_GPIO_Init+0xcc>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b1e      	ldr	r3, [pc, #120]	@ (8000d0c <MX_GPIO_Init+0xcc>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <MX_GPIO_Init+0xcc>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8000d0c <MX_GPIO_Init+0xcc>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <MX_GPIO_Init+0xcc>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2120      	movs	r1, #32
 8000cba:	4815      	ldr	r0, [pc, #84]	@ (8000d10 <MX_GPIO_Init+0xd0>)
 8000cbc:	f002 f8e4 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2180      	movs	r1, #128	@ 0x80
 8000cc4:	4813      	ldr	r0, [pc, #76]	@ (8000d14 <MX_GPIO_Init+0xd4>)
 8000cc6:	f002 f8df 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cca:	2320      	movs	r3, #32
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480b      	ldr	r0, [pc, #44]	@ (8000d10 <MX_GPIO_Init+0xd0>)
 8000ce2:	f001 ff25 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ce6:	2380      	movs	r3, #128	@ 0x80
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <MX_GPIO_Init+0xd4>)
 8000cfe:	f001 ff17 	bl	8002b30 <HAL_GPIO_Init>

}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	@ 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000
 8000d14:	40020400 	.word	0x40020400

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000d1c:	f000 f89a 	bl	8000e54 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d20:	f000 fbfd 	bl	800151e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d24:	f000 f826 	bl	8000d74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d28:	f7ff ff8a 	bl	8000c40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d2c:	f7ff fdd4 	bl	80008d8 <MX_DMA_Init>
  MX_CAN1_Init();
 8000d30:	f7ff fcd0 	bl	80006d4 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8000d34:	f000 fad4 	bl	80012e0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 8000d38:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <main+0x50>)
 8000d3a:	f000 fe29 	bl	8001990 <HAL_CAN_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d3e:	f004 fb35 	bl	80053ac <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d42:	f7ff fdef 	bl	8000924 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d46:	f004 fb65 	bl	8005414 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("ERRORE\r\n");
 8000d4a:	4808      	ldr	r0, [pc, #32]	@ (8000d6c <main+0x54>)
 8000d4c:	f007 fb36 	bl	80083bc <puts>
	  fflush(stdout);
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <main+0x58>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f007 f9f2 	bl	8008140 <fflush>
	  HAL_Delay(300);
 8000d5c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000d60:	f000 fc0a 	bl	8001578 <HAL_Delay>
	  printf("ERRORE\r\n");
 8000d64:	bf00      	nop
 8000d66:	e7f0      	b.n	8000d4a <main+0x32>
 8000d68:	20000088 	.word	0x20000088
 8000d6c:	08009ce4 	.word	0x08009ce4
 8000d70:	2000001c 	.word	0x2000001c

08000d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b094      	sub	sp, #80	@ 0x50
 8000d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	2234      	movs	r2, #52	@ 0x34
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f007 fc0c 	bl	80085a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d88:	f107 0308 	add.w	r3, r7, #8
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d98:	4b2c      	ldr	r3, [pc, #176]	@ (8000e4c <SystemClock_Config+0xd8>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8000e4c <SystemClock_Config+0xd8>)
 8000d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da4:	4b29      	ldr	r3, [pc, #164]	@ (8000e4c <SystemClock_Config+0xd8>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db0:	4b27      	ldr	r3, [pc, #156]	@ (8000e50 <SystemClock_Config+0xdc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a26      	ldr	r2, [pc, #152]	@ (8000e50 <SystemClock_Config+0xdc>)
 8000db6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b24      	ldr	r3, [pc, #144]	@ (8000e50 <SystemClock_Config+0xdc>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dd0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dda:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000de0:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000de4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 f8b0 	bl	8002f5c <HAL_RCC_OscConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e02:	f000 f865 	bl	8000ed0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e06:	f002 f859 	bl	8002ebc <HAL_PWREx_EnableOverDrive>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000e10:	f000 f85e 	bl	8000ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	230f      	movs	r3, #15
 8000e16:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e20:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	2107      	movs	r1, #7
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 fb40 	bl	80034b8 <HAL_RCC_ClockConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000e3e:	f000 f847 	bl	8000ed0 <Error_Handler>
  }
}
 8000e42:	bf00      	nop
 8000e44:	3750      	adds	r7, #80	@ 0x50
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40007000 	.word	0x40007000

08000e54 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e66:	f001 fb01 	bl	800246c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e76:	231f      	movs	r3, #31
 8000e78:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e7a:	2387      	movs	r3, #135	@ 0x87
 8000e7c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e82:	2300      	movs	r3, #0
 8000e84:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e86:	2301      	movs	r3, #1
 8000e88:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e96:	463b      	mov	r3, r7
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f001 fb1f 	bl	80024dc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e9e:	2004      	movs	r0, #4
 8000ea0:	f001 fafc 	bl	800249c <HAL_MPU_Enable>

}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ebe:	f000 fb3b 	bl	8001538 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40010000 	.word	0x40010000

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <Error_Handler+0x8>

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	4a10      	ldr	r2, [pc, #64]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eee:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f06:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <HAL_MspInit+0x4c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	210f      	movs	r1, #15
 8000f16:	f06f 0001 	mvn.w	r0, #1
 8000f1a:	f001 fa7d 	bl	8002418 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800

08000f2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	@ 0x30
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ffc <HAL_InitTick+0xd0>)
 8000f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f40:	4a2e      	ldr	r2, [pc, #184]	@ (8000ffc <HAL_InitTick+0xd0>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f48:	4b2c      	ldr	r3, [pc, #176]	@ (8000ffc <HAL_InitTick+0xd0>)
 8000f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f54:	f107 020c 	add.w	r2, r7, #12
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 fcd0 	bl	8003904 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000f64:	f002 fcba 	bl	80038dc <HAL_RCC_GetPCLK2Freq>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f70:	4a23      	ldr	r2, [pc, #140]	@ (8001000 <HAL_InitTick+0xd4>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	0c9b      	lsrs	r3, r3, #18
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f7c:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <HAL_InitTick+0xd8>)
 8000f7e:	4a22      	ldr	r2, [pc, #136]	@ (8001008 <HAL_InitTick+0xdc>)
 8000f80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f82:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <HAL_InitTick+0xd8>)
 8000f84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001004 <HAL_InitTick+0xd8>)
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	@ (8001004 <HAL_InitTick+0xd8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <HAL_InitTick+0xd8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <HAL_InitTick+0xd8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000fa2:	4818      	ldr	r0, [pc, #96]	@ (8001004 <HAL_InitTick+0xd8>)
 8000fa4:	f003 f908 	bl	80041b8 <HAL_TIM_Base_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000fae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d11b      	bne.n	8000fee <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000fb6:	4813      	ldr	r0, [pc, #76]	@ (8001004 <HAL_InitTick+0xd8>)
 8000fb8:	f003 f960 	bl	800427c <HAL_TIM_Base_Start_IT>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d111      	bne.n	8000fee <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fca:	2019      	movs	r0, #25
 8000fcc:	f001 fa40 	bl	8002450 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b0f      	cmp	r3, #15
 8000fd4:	d808      	bhi.n	8000fe8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	2019      	movs	r0, #25
 8000fdc:	f001 fa1c 	bl	8002418 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <HAL_InitTick+0xe0>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e002      	b.n	8000fee <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3730      	adds	r7, #48	@ 0x30
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	431bde83 	.word	0x431bde83
 8001004:	200000b4 	.word	0x200000b4
 8001008:	40010000 	.word	0x40010000
 800100c:	20000004 	.word	0x20000004

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <NMI_Handler+0x4>

08001018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <MemManage_Handler+0x4>

08001028 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <BusFault_Handler+0x4>

08001030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <UsageFault_Handler+0x4>

08001038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800104c:	4802      	ldr	r0, [pc, #8]	@ (8001058 <DMA1_Stream1_IRQHandler+0x10>)
 800104e:	f001 fb33 	bl	80026b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000018c 	.word	0x2000018c

0800105c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001060:	4802      	ldr	r0, [pc, #8]	@ (800106c <DMA1_Stream3_IRQHandler+0x10>)
 8001062:	f001 fb29 	bl	80026b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200001ec 	.word	0x200001ec

08001070 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <CAN1_RX0_IRQHandler+0x10>)
 8001076:	f000 fee7 	bl	8001e48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000088 	.word	0x20000088

08001084 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001088:	4802      	ldr	r0, [pc, #8]	@ (8001094 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800108a:	f003 f96f 	bl	800436c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200000b4 	.word	0x200000b4

08001098 <_write>:
  return len;
}
#endif

int _write(int file, char *ptr, int len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]

  if (file == STDOUT_FILENO || file == STDERR_FILENO)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d002      	beq.n	80010b0 <_write+0x18>
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d114      	bne.n	80010da <_write+0x42>
  {
    if(HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK) {
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	480d      	ldr	r0, [pc, #52]	@ (80010f0 <_write+0x58>)
 80010bc:	f003 fb9e 	bl	80047fc <HAL_UART_Transmit>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d007      	beq.n	80010d6 <_write+0x3e>
        errno = EIO;  // Oppure un altro codice d'errore appropriato
 80010c6:	f007 fab9 	bl	800863c <__errno>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2205      	movs	r2, #5
 80010ce:	601a      	str	r2, [r3, #0]
        return -1;
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010d4:	e008      	b.n	80010e8 <_write+0x50>
    }

    return len;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	e006      	b.n	80010e8 <_write+0x50>
  }

  errno = EBADF;
 80010da:	f007 faaf 	bl	800863c <__errno>
 80010de:	4603      	mov	r3, r0
 80010e0:	2209      	movs	r2, #9
 80010e2:	601a      	str	r2, [r3, #0]
  return -1;
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000104 	.word	0x20000104

080010f4 <_read>:

/**
  * @brief  Reindirizza la lettura (scanf) dalla UART.
  */
int _read(int file, char *ptr, int len)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
    if (file == STDIN_FILENO)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d160      	bne.n	80011c8 <_read+0xd4>
    {
        int bytesRead = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]

        // Leggiamo carattere per carattere, facciamo eco e gestiamo il backspace
        for (int i = 0; i < len; i++)
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	e055      	b.n	80011bc <_read+0xc8>
        {
            uint8_t c;
            // Lettura bloccante di un carattere
            if (HAL_UART_Receive(&huart3, &c, 1, HAL_MAX_DELAY) != HAL_OK)
 8001110:	f107 0117 	add.w	r1, r7, #23
 8001114:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001118:	2201      	movs	r2, #1
 800111a:	4831      	ldr	r0, [pc, #196]	@ (80011e0 <_read+0xec>)
 800111c:	f003 fbf7 	bl	800490e <HAL_UART_Receive>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d007      	beq.n	8001136 <_read+0x42>
            {
                errno = EIO;
 8001126:	f007 fa89 	bl	800863c <__errno>
 800112a:	4603      	mov	r3, r0
 800112c:	2205      	movs	r2, #5
 800112e:	601a      	str	r2, [r3, #0]
                return -1;
 8001130:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001134:	e04f      	b.n	80011d6 <_read+0xe2>
            }

            // Gestione del ritorno a capo
            if (c == '\r' || c == '\n')
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	2b0d      	cmp	r3, #13
 800113a:	d002      	beq.n	8001142 <_read+0x4e>
 800113c:	7dfb      	ldrb	r3, [r7, #23]
 800113e:	2b0a      	cmp	r3, #10
 8001140:	d112      	bne.n	8001168 <_read+0x74>
            {
                // A volte minicom invia solo '\r', oppure '\n': li unifichiamo
                // e interrompiamo la lettura per restituire la riga
                uint8_t newline = '\n';
 8001142:	230a      	movs	r3, #10
 8001144:	75bb      	strb	r3, [r7, #22]
                HAL_UART_Transmit(&huart3, &newline, 1, HAL_MAX_DELAY);
 8001146:	f107 0116 	add.w	r1, r7, #22
 800114a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800114e:	2201      	movs	r2, #1
 8001150:	4823      	ldr	r0, [pc, #140]	@ (80011e0 <_read+0xec>)
 8001152:	f003 fb53 	bl	80047fc <HAL_UART_Transmit>
                ptr[bytesRead++] = '\n';
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	61fa      	str	r2, [r7, #28]
 800115c:	461a      	mov	r2, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	4413      	add	r3, r2
 8001162:	220a      	movs	r2, #10
 8001164:	701a      	strb	r2, [r3, #0]
                break;
 8001166:	e02d      	b.n	80011c4 <_read+0xd0>
            }
            // Gestione del backspace (ASCII 8 oppure 127)
            else if (c == '\b' || c == 127)
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	2b08      	cmp	r3, #8
 800116c:	d002      	beq.n	8001174 <_read+0x80>
 800116e:	7dfb      	ldrb	r3, [r7, #23]
 8001170:	2b7f      	cmp	r3, #127	@ 0x7f
 8001172:	d110      	bne.n	8001196 <_read+0xa2>
            {
                if (bytesRead > 0)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	2b00      	cmp	r3, #0
 8001178:	dd1d      	ble.n	80011b6 <_read+0xc2>
                {
                    // Cancella carattere precedente dal buffer
                    bytesRead--;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b01      	subs	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]

                    // Cancella il carattere visualizzato (backspace + spazio + backspace)
                    uint8_t bsSequence[] = "\b \b";
 8001180:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <_read+0xf0>)
 8001182:	613b      	str	r3, [r7, #16]
                    HAL_UART_Transmit(&huart3, bsSequence, sizeof(bsSequence) - 1, HAL_MAX_DELAY);
 8001184:	f107 0110 	add.w	r1, r7, #16
 8001188:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800118c:	2203      	movs	r2, #3
 800118e:	4814      	ldr	r0, [pc, #80]	@ (80011e0 <_read+0xec>)
 8001190:	f003 fb34 	bl	80047fc <HAL_UART_Transmit>
                if (bytesRead > 0)
 8001194:	e00f      	b.n	80011b6 <_read+0xc2>
                }
            }
            else
            {
                // Esegui l’eco del carattere
                HAL_UART_Transmit(&huart3, &c, 1, HAL_MAX_DELAY);
 8001196:	f107 0117 	add.w	r1, r7, #23
 800119a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800119e:	2201      	movs	r2, #1
 80011a0:	480f      	ldr	r0, [pc, #60]	@ (80011e0 <_read+0xec>)
 80011a2:	f003 fb2b 	bl	80047fc <HAL_UART_Transmit>
                // Memorizza il carattere nel buffer
                ptr[bytesRead++] = c;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	61fa      	str	r2, [r7, #28]
 80011ac:	461a      	mov	r2, r3
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	4413      	add	r3, r2
 80011b2:	7dfa      	ldrb	r2, [r7, #23]
 80011b4:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < len; i++)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	3301      	adds	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dba5      	blt.n	8001110 <_read+0x1c>
            }
        }

        return bytesRead;
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	e006      	b.n	80011d6 <_read+0xe2>
    }
    else
    {
        errno = EBADF;
 80011c8:	f007 fa38 	bl	800863c <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2209      	movs	r2, #9
 80011d0:	601a      	str	r2, [r3, #0]
        return -1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000104 	.word	0x20000104
 80011e4:	00082008 	.word	0x00082008

080011e8 <_close>:

int _close(int file)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001210:	605a      	str	r2, [r3, #4]
  return 0;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <_isatty>:

int _isatty(int file)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001228:	2301      	movs	r3, #1
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001236:	b480      	push	{r7}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001258:	4a14      	ldr	r2, [pc, #80]	@ (80012ac <_sbrk+0x5c>)
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <_sbrk+0x60>)
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001264:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800126c:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <_sbrk+0x64>)
 800126e:	4a12      	ldr	r2, [pc, #72]	@ (80012b8 <_sbrk+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	429a      	cmp	r2, r3
 800127e:	d207      	bcs.n	8001290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001280:	f007 f9dc 	bl	800863c <__errno>
 8001284:	4603      	mov	r3, r0
 8001286:	220c      	movs	r2, #12
 8001288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800128e:	e009      	b.n	80012a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001296:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <_sbrk+0x64>)
 80012a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a2:	68fb      	ldr	r3, [r7, #12]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20080000 	.word	0x20080000
 80012b0:	00000400 	.word	0x00000400
 80012b4:	20000100 	.word	0x20000100
 80012b8:	20004ce8 	.word	0x20004ce8

080012bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <SystemInit+0x20>)
 80012c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012c6:	4a05      	ldr	r2, [pc, #20]	@ (80012dc <SystemInit+0x20>)
 80012c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012e4:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <MX_USART3_UART_Init+0x58>)
 80012e6:	4a15      	ldr	r2, [pc, #84]	@ (800133c <MX_USART3_UART_Init+0x5c>)
 80012e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012ea:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <MX_USART3_UART_Init+0x58>)
 80012ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_USART3_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_USART3_UART_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_USART3_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <MX_USART3_UART_Init+0x58>)
 8001306:	220c      	movs	r2, #12
 8001308:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <MX_USART3_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001310:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_USART3_UART_Init+0x58>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <MX_USART3_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_USART3_UART_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	@ (8001338 <MX_USART3_UART_Init+0x58>)
 8001324:	f003 fa1c 	bl	8004760 <HAL_UART_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800132e:	f7ff fdcf 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000104 	.word	0x20000104
 800133c:	40004800 	.word	0x40004800

08001340 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0ae      	sub	sp, #184	@ 0xb8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2290      	movs	r2, #144	@ 0x90
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f007 f91d 	bl	80085a0 <memset>
  if(uartHandle->Instance==USART3)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a51      	ldr	r2, [pc, #324]	@ (80014b0 <HAL_UART_MspInit+0x170>)
 800136c:	4293      	cmp	r3, r2
 800136e:	f040 809b 	bne.w	80014a8 <HAL_UART_MspInit+0x168>
  /* USER CODE BEGIN USART3_MspInit 0 */
  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001372:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001376:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001378:	2300      	movs	r3, #0
 800137a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4618      	mov	r0, r3
 8001382:	f002 faf1 	bl	8003968 <HAL_RCCEx_PeriphCLKConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800138c:	f7ff fda0 	bl	8000ed0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001390:	4b48      	ldr	r3, [pc, #288]	@ (80014b4 <HAL_UART_MspInit+0x174>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	4a47      	ldr	r2, [pc, #284]	@ (80014b4 <HAL_UART_MspInit+0x174>)
 8001396:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800139a:	6413      	str	r3, [r2, #64]	@ 0x40
 800139c:	4b45      	ldr	r3, [pc, #276]	@ (80014b4 <HAL_UART_MspInit+0x174>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a8:	4b42      	ldr	r3, [pc, #264]	@ (80014b4 <HAL_UART_MspInit+0x174>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ac:	4a41      	ldr	r2, [pc, #260]	@ (80014b4 <HAL_UART_MspInit+0x174>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b4:	4b3f      	ldr	r3, [pc, #252]	@ (80014b4 <HAL_UART_MspInit+0x174>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013da:	2307      	movs	r3, #7
 80013dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013e4:	4619      	mov	r1, r3
 80013e6:	4834      	ldr	r0, [pc, #208]	@ (80014b8 <HAL_UART_MspInit+0x178>)
 80013e8:	f001 fba2 	bl	8002b30 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80013ec:	4b33      	ldr	r3, [pc, #204]	@ (80014bc <HAL_UART_MspInit+0x17c>)
 80013ee:	4a34      	ldr	r2, [pc, #208]	@ (80014c0 <HAL_UART_MspInit+0x180>)
 80013f0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80013f2:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <HAL_UART_MspInit+0x17c>)
 80013f4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80013f8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fa:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <HAL_UART_MspInit+0x17c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001400:	4b2e      	ldr	r3, [pc, #184]	@ (80014bc <HAL_UART_MspInit+0x17c>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001406:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <HAL_UART_MspInit+0x17c>)
 8001408:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800140c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800140e:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <HAL_UART_MspInit+0x17c>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001414:	4b29      	ldr	r3, [pc, #164]	@ (80014bc <HAL_UART_MspInit+0x17c>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800141a:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <HAL_UART_MspInit+0x17c>)
 800141c:	2200      	movs	r2, #0
 800141e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001420:	4b26      	ldr	r3, [pc, #152]	@ (80014bc <HAL_UART_MspInit+0x17c>)
 8001422:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001426:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001428:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <HAL_UART_MspInit+0x17c>)
 800142a:	2200      	movs	r2, #0
 800142c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800142e:	4823      	ldr	r0, [pc, #140]	@ (80014bc <HAL_UART_MspInit+0x17c>)
 8001430:	f001 f894 	bl	800255c <HAL_DMA_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 800143a:	f7ff fd49 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a1e      	ldr	r2, [pc, #120]	@ (80014bc <HAL_UART_MspInit+0x17c>)
 8001442:	675a      	str	r2, [r3, #116]	@ 0x74
 8001444:	4a1d      	ldr	r2, [pc, #116]	@ (80014bc <HAL_UART_MspInit+0x17c>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800144a:	4b1e      	ldr	r3, [pc, #120]	@ (80014c4 <HAL_UART_MspInit+0x184>)
 800144c:	4a1e      	ldr	r2, [pc, #120]	@ (80014c8 <HAL_UART_MspInit+0x188>)
 800144e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001450:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <HAL_UART_MspInit+0x184>)
 8001452:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001456:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001458:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <HAL_UART_MspInit+0x184>)
 800145a:	2240      	movs	r2, #64	@ 0x40
 800145c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800145e:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <HAL_UART_MspInit+0x184>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001464:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <HAL_UART_MspInit+0x184>)
 8001466:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800146a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_UART_MspInit+0x184>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001472:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <HAL_UART_MspInit+0x184>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_UART_MspInit+0x184>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_UART_MspInit+0x184>)
 8001480:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001484:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001486:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <HAL_UART_MspInit+0x184>)
 8001488:	2200      	movs	r2, #0
 800148a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800148c:	480d      	ldr	r0, [pc, #52]	@ (80014c4 <HAL_UART_MspInit+0x184>)
 800148e:	f001 f865 	bl	800255c <HAL_DMA_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_UART_MspInit+0x15c>
    {
      Error_Handler();
 8001498:	f7ff fd1a 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a09      	ldr	r2, [pc, #36]	@ (80014c4 <HAL_UART_MspInit+0x184>)
 80014a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80014a2:	4a08      	ldr	r2, [pc, #32]	@ (80014c4 <HAL_UART_MspInit+0x184>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */
  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014a8:	bf00      	nop
 80014aa:	37b8      	adds	r7, #184	@ 0xb8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40004800 	.word	0x40004800
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	2000018c 	.word	0x2000018c
 80014c0:	40026028 	.word	0x40026028
 80014c4:	200001ec 	.word	0x200001ec
 80014c8:	40026058 	.word	0x40026058

080014cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001504 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014d0:	f7ff fef4 	bl	80012bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d4:	480c      	ldr	r0, [pc, #48]	@ (8001508 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014d6:	490d      	ldr	r1, [pc, #52]	@ (800150c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001510 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001518 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014fa:	f007 f8a5 	bl	8008648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f7ff fc0b 	bl	8000d18 <main>
  bx  lr    
 8001502:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001504:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001510:	08009eb4 	.word	0x08009eb4
  ldr r2, =_sbss
 8001514:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001518:	20004ce4 	.word	0x20004ce4

0800151c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC_IRQHandler>

0800151e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001522:	2003      	movs	r0, #3
 8001524:	f000 ff6d 	bl	8002402 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001528:	200f      	movs	r0, #15
 800152a:	f7ff fcff 	bl	8000f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800152e:	f7ff fcd5 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_IncTick+0x20>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_IncTick+0x24>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4413      	add	r3, r2
 8001548:	4a04      	ldr	r2, [pc, #16]	@ (800155c <HAL_IncTick+0x24>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000008 	.word	0x20000008
 800155c:	2000024c 	.word	0x2000024c

08001560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b03      	ldr	r3, [pc, #12]	@ (8001574 <HAL_GetTick+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	2000024c 	.word	0x2000024c

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff ffee 	bl	8001560 <HAL_GetTick>
 8001584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001592:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <HAL_Delay+0x44>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159e:	bf00      	nop
 80015a0:	f7ff ffde 	bl	8001560 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008

080015c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0ed      	b.n	80017ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff f8dc 	bl	800079c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015f4:	f7ff ffb4 	bl	8001560 <HAL_GetTick>
 80015f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015fa:	e012      	b.n	8001622 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015fc:	f7ff ffb0 	bl	8001560 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b0a      	cmp	r3, #10
 8001608:	d90b      	bls.n	8001622 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2205      	movs	r2, #5
 800161a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0c5      	b.n	80017ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0e5      	beq.n	80015fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0202 	bic.w	r2, r2, #2
 800163e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001640:	f7ff ff8e 	bl	8001560 <HAL_GetTick>
 8001644:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001646:	e012      	b.n	800166e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001648:	f7ff ff8a 	bl	8001560 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b0a      	cmp	r3, #10
 8001654:	d90b      	bls.n	800166e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2205      	movs	r2, #5
 8001666:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e09f      	b.n	80017ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1e5      	bne.n	8001648 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7e1b      	ldrb	r3, [r3, #24]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d108      	bne.n	8001696 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	e007      	b.n	80016a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7e5b      	ldrb	r3, [r3, #25]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d108      	bne.n	80016c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	e007      	b.n	80016d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7e9b      	ldrb	r3, [r3, #26]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d108      	bne.n	80016ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0220 	orr.w	r2, r2, #32
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	e007      	b.n	80016fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0220 	bic.w	r2, r2, #32
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7edb      	ldrb	r3, [r3, #27]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d108      	bne.n	8001714 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0210 	bic.w	r2, r2, #16
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e007      	b.n	8001724 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0210 	orr.w	r2, r2, #16
 8001722:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7f1b      	ldrb	r3, [r3, #28]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d108      	bne.n	800173e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0208 	orr.w	r2, r2, #8
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e007      	b.n	800174e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0208 	bic.w	r2, r2, #8
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7f5b      	ldrb	r3, [r3, #29]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d108      	bne.n	8001768 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 0204 	orr.w	r2, r2, #4
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	e007      	b.n	8001778 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0204 	bic.w	r2, r2, #4
 8001776:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	ea42 0103 	orr.w	r1, r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	1e5a      	subs	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017d0:	7cfb      	ldrb	r3, [r7, #19]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d003      	beq.n	80017de <HAL_CAN_ConfigFilter+0x26>
 80017d6:	7cfb      	ldrb	r3, [r7, #19]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	f040 80c7 	bne.w	800196c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a69      	ldr	r2, [pc, #420]	@ (8001988 <HAL_CAN_ConfigFilter+0x1d0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d001      	beq.n	80017ec <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80017e8:	4b68      	ldr	r3, [pc, #416]	@ (800198c <HAL_CAN_ConfigFilter+0x1d4>)
 80017ea:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017f2:	f043 0201 	orr.w	r2, r3, #1
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	4a63      	ldr	r2, [pc, #396]	@ (800198c <HAL_CAN_ConfigFilter+0x1d4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d111      	bne.n	8001828 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800180a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	431a      	orrs	r2, r3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	2201      	movs	r2, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d123      	bne.n	800189a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	43db      	mvns	r3, r3
 800185c:	401a      	ands	r2, r3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001874:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3248      	adds	r2, #72	@ 0x48
 800187a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800188e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001890:	6979      	ldr	r1, [r7, #20]
 8001892:	3348      	adds	r3, #72	@ 0x48
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d122      	bne.n	80018e8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3248      	adds	r2, #72	@ 0x48
 80018c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018de:	6979      	ldr	r1, [r7, #20]
 80018e0:	3348      	adds	r3, #72	@ 0x48
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d109      	bne.n	8001904 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001902:	e007      	b.n	8001914 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	431a      	orrs	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d109      	bne.n	8001930 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800192e:	e007      	b.n	8001940 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	431a      	orrs	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d107      	bne.n	8001958 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	431a      	orrs	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800195e:	f023 0201 	bic.w	r2, r3, #1
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	e006      	b.n	800197a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
  }
}
 800197a:	4618      	mov	r0, r3
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40003400 	.word	0x40003400
 800198c:	40006400 	.word	0x40006400

08001990 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d12e      	bne.n	8001a02 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019bc:	f7ff fdd0 	bl	8001560 <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019c2:	e012      	b.n	80019ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019c4:	f7ff fdcc 	bl	8001560 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b0a      	cmp	r3, #10
 80019d0:	d90b      	bls.n	80019ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2205      	movs	r2, #5
 80019e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e012      	b.n	8001a10 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1e5      	bne.n	80019c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e006      	b.n	8001a10 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a06:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
  }
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	@ 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a2c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a36:	7ffb      	ldrb	r3, [r7, #31]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d003      	beq.n	8001a44 <HAL_CAN_AddTxMessage+0x2c>
 8001a3c:	7ffb      	ldrb	r3, [r7, #31]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	f040 80ad 	bne.w	8001b9e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10a      	bne.n	8001a64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d105      	bne.n	8001a64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8095 	beq.w	8001b8e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	0e1b      	lsrs	r3, r3, #24
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a6e:	2201      	movs	r2, #1
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10d      	bne.n	8001a9c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a8a:	68f9      	ldr	r1, [r7, #12]
 8001a8c:	6809      	ldr	r1, [r1, #0]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3318      	adds	r3, #24
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	440b      	add	r3, r1
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	e00f      	b.n	8001abc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aa6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ab0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3318      	adds	r3, #24
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	440b      	add	r3, r1
 8001aba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6819      	ldr	r1, [r3, #0]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3318      	adds	r3, #24
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	440b      	add	r3, r1
 8001acc:	3304      	adds	r3, #4
 8001ace:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	7d1b      	ldrb	r3, [r3, #20]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d111      	bne.n	8001afc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3318      	adds	r3, #24
 8001ae0:	011b      	lsls	r3, r3, #4
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	6811      	ldr	r1, [r2, #0]
 8001aec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	3318      	adds	r3, #24
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	440b      	add	r3, r1
 8001af8:	3304      	adds	r3, #4
 8001afa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3307      	adds	r3, #7
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	061a      	lsls	r2, r3, #24
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3306      	adds	r3, #6
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	041b      	lsls	r3, r3, #16
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3305      	adds	r3, #5
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	4313      	orrs	r3, r2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	3204      	adds	r2, #4
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	4610      	mov	r0, r2
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	6811      	ldr	r1, [r2, #0]
 8001b24:	ea43 0200 	orr.w	r2, r3, r0
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	440b      	add	r3, r1
 8001b2e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001b32:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3303      	adds	r3, #3
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	061a      	lsls	r2, r3, #24
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3302      	adds	r3, #2
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	041b      	lsls	r3, r3, #16
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	7812      	ldrb	r2, [r2, #0]
 8001b54:	4610      	mov	r0, r2
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	6811      	ldr	r1, [r2, #0]
 8001b5a:	ea43 0200 	orr.w	r2, r3, r0
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	440b      	add	r3, r1
 8001b64:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001b68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3318      	adds	r3, #24
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	4413      	add	r3, r2
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	6811      	ldr	r1, [r2, #0]
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	3318      	adds	r3, #24
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	440b      	add	r3, r1
 8001b88:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e00e      	b.n	8001bac <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e006      	b.n	8001bac <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
  }
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3724      	adds	r7, #36	@ 0x24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bcc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d003      	beq.n	8001bdc <HAL_CAN_GetRxMessage+0x24>
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	f040 8103 	bne.w	8001de2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10e      	bne.n	8001c00 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d116      	bne.n	8001c1e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0f7      	b.n	8001df0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d107      	bne.n	8001c1e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0e8      	b.n	8001df0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	331b      	adds	r3, #27
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	4413      	add	r3, r2
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0204 	and.w	r2, r3, #4
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10c      	bne.n	8001c56 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	331b      	adds	r3, #27
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	4413      	add	r3, r2
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	0d5b      	lsrs	r3, r3, #21
 8001c4c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	e00b      	b.n	8001c6e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	331b      	adds	r3, #27
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	4413      	add	r3, r2
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	08db      	lsrs	r3, r3, #3
 8001c66:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	331b      	adds	r3, #27
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	4413      	add	r3, r2
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0202 	and.w	r2, r3, #2
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	331b      	adds	r3, #27
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	4413      	add	r3, r2
 8001c90:	3304      	adds	r3, #4
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2208      	movs	r2, #8
 8001ca0:	611a      	str	r2, [r3, #16]
 8001ca2:	e00b      	b.n	8001cbc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	331b      	adds	r3, #27
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 020f 	and.w	r2, r3, #15
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	331b      	adds	r3, #27
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3304      	adds	r3, #4
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	331b      	adds	r3, #27
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	4413      	add	r3, r2
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0c1b      	lsrs	r3, r3, #16
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	0a1a      	lsrs	r2, r3, #8
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0c1a      	lsrs	r2, r3, #16
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	3302      	adds	r3, #2
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	0e1a      	lsrs	r2, r3, #24
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	3303      	adds	r3, #3
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	3304      	adds	r3, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0a1a      	lsrs	r2, r3, #8
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	3305      	adds	r3, #5
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	0c1a      	lsrs	r2, r3, #16
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	3306      	adds	r3, #6
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0e1a      	lsrs	r2, r3, #24
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	3307      	adds	r3, #7
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d108      	bne.n	8001dce <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0220 	orr.w	r2, r2, #32
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	e007      	b.n	8001dde <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0220 	orr.w	r2, r2, #32
 8001ddc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e006      	b.n	8001df0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
  }
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e0c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d002      	beq.n	8001e1a <HAL_CAN_ActivateNotification+0x1e>
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d109      	bne.n	8001e2e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6959      	ldr	r1, [r3, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e006      	b.n	8001e3c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e32:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
  }
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	@ 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d07c      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d023      	beq.n	8001ee0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f983 	bl	80021b6 <HAL_CAN_TxMailbox0CompleteCallback>
 8001eb0:	e016      	b.n	8001ee0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d004      	beq.n	8001ec6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec4:	e00c      	b.n	8001ee0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed8:	e002      	b.n	8001ee0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f989 	bl	80021f2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d024      	beq.n	8001f34 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ef2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f963 	bl	80021ca <HAL_CAN_TxMailbox1CompleteCallback>
 8001f04:	e016      	b.n	8001f34 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d004      	beq.n	8001f1a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f18:	e00c      	b.n	8001f34 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d004      	beq.n	8001f2e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f2c:	e002      	b.n	8001f34 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f969 	bl	8002206 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d024      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f943 	bl	80021de <HAL_CAN_TxMailbox2CompleteCallback>
 8001f58:	e016      	b.n	8001f88 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d004      	beq.n	8001f6e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f6c:	e00c      	b.n	8001f88 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d004      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f80:	e002      	b.n	8001f88 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f949 	bl	800221a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00c      	beq.n	8001fac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2210      	movs	r2, #16
 8001faa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00b      	beq.n	8001fce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f930 	bl	800222e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d009      	beq.n	8001fec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe fc36 	bl	8000858 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00c      	beq.n	8002010 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2210      	movs	r2, #16
 800200e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2208      	movs	r2, #8
 800202a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f912 	bl	8002256 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b00      	cmp	r3, #0
 800203a:	d009      	beq.n	8002050 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8f9 	bl	8002242 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	d006      	beq.n	8002072 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2210      	movs	r2, #16
 800206a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f8fc 	bl	800226a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00b      	beq.n	8002094 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d006      	beq.n	8002094 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2208      	movs	r2, #8
 800208c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8f5 	bl	800227e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d07b      	beq.n	8002196 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d072      	beq.n	800218e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d008      	beq.n	80020c4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002102:	2b00      	cmp	r3, #0
 8002104:	d043      	beq.n	800218e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800210c:	2b00      	cmp	r3, #0
 800210e:	d03e      	beq.n	800218e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002116:	2b60      	cmp	r3, #96	@ 0x60
 8002118:	d02b      	beq.n	8002172 <HAL_CAN_IRQHandler+0x32a>
 800211a:	2b60      	cmp	r3, #96	@ 0x60
 800211c:	d82e      	bhi.n	800217c <HAL_CAN_IRQHandler+0x334>
 800211e:	2b50      	cmp	r3, #80	@ 0x50
 8002120:	d022      	beq.n	8002168 <HAL_CAN_IRQHandler+0x320>
 8002122:	2b50      	cmp	r3, #80	@ 0x50
 8002124:	d82a      	bhi.n	800217c <HAL_CAN_IRQHandler+0x334>
 8002126:	2b40      	cmp	r3, #64	@ 0x40
 8002128:	d019      	beq.n	800215e <HAL_CAN_IRQHandler+0x316>
 800212a:	2b40      	cmp	r3, #64	@ 0x40
 800212c:	d826      	bhi.n	800217c <HAL_CAN_IRQHandler+0x334>
 800212e:	2b30      	cmp	r3, #48	@ 0x30
 8002130:	d010      	beq.n	8002154 <HAL_CAN_IRQHandler+0x30c>
 8002132:	2b30      	cmp	r3, #48	@ 0x30
 8002134:	d822      	bhi.n	800217c <HAL_CAN_IRQHandler+0x334>
 8002136:	2b10      	cmp	r3, #16
 8002138:	d002      	beq.n	8002140 <HAL_CAN_IRQHandler+0x2f8>
 800213a:	2b20      	cmp	r3, #32
 800213c:	d005      	beq.n	800214a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800213e:	e01d      	b.n	800217c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002142:	f043 0308 	orr.w	r3, r3, #8
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002148:	e019      	b.n	800217e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	f043 0310 	orr.w	r3, r3, #16
 8002150:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002152:	e014      	b.n	800217e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	f043 0320 	orr.w	r3, r3, #32
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800215c:	e00f      	b.n	800217e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002164:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002166:	e00a      	b.n	800217e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002170:	e005      	b.n	800217e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800217a:	e000      	b.n	800217e <HAL_CAN_IRQHandler+0x336>
            break;
 800217c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699a      	ldr	r2, [r3, #24]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800218c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2204      	movs	r2, #4
 8002194:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f872 	bl	8002292 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021ae:	bf00      	nop
 80021b0:	3728      	adds	r7, #40	@ 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b8:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <__NVIC_SetPriorityGrouping+0x40>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022c4:	4013      	ands	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022d0:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d6:	4a04      	ldr	r2, [pc, #16]	@ (80022e8 <__NVIC_SetPriorityGrouping+0x40>)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	60d3      	str	r3, [r2, #12]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00
 80022ec:	05fa0000 	.word	0x05fa0000

080022f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f4:	4b04      	ldr	r3, [pc, #16]	@ (8002308 <__NVIC_GetPriorityGrouping+0x18>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0307 	and.w	r3, r3, #7
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db0b      	blt.n	8002336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4907      	ldr	r1, [pc, #28]	@ (8002344 <__NVIC_EnableIRQ+0x38>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2001      	movs	r0, #1
 800232e:	fa00 f202 	lsl.w	r2, r0, r2
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000e100 	.word	0xe000e100

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db0a      	blt.n	8002372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	490c      	ldr	r1, [pc, #48]	@ (8002394 <__NVIC_SetPriority+0x4c>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002370:	e00a      	b.n	8002388 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4908      	ldr	r1, [pc, #32]	@ (8002398 <__NVIC_SetPriority+0x50>)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b04      	subs	r3, #4
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	440b      	add	r3, r1
 8002386:	761a      	strb	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	@ 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f1c3 0307 	rsb	r3, r3, #7
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf28      	it	cs
 80023ba:	2304      	movcs	r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d902      	bls.n	80023cc <NVIC_EncodePriority+0x30>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3b03      	subs	r3, #3
 80023ca:	e000      	b.n	80023ce <NVIC_EncodePriority+0x32>
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	4313      	orrs	r3, r2
         );
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	@ 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ff4c 	bl	80022a8 <__NVIC_SetPriorityGrouping>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242a:	f7ff ff61 	bl	80022f0 <__NVIC_GetPriorityGrouping>
 800242e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	6978      	ldr	r0, [r7, #20]
 8002436:	f7ff ffb1 	bl	800239c <NVIC_EncodePriority>
 800243a:	4602      	mov	r2, r0
 800243c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff80 	bl	8002348 <__NVIC_SetPriority>
}
 8002448:	bf00      	nop
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff54 	bl	800230c <__NVIC_EnableIRQ>
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002470:	f3bf 8f5f 	dmb	sy
}
 8002474:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002476:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <HAL_MPU_Disable+0x28>)
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	4a06      	ldr	r2, [pc, #24]	@ (8002494 <HAL_MPU_Disable+0x28>)
 800247c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002480:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002482:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <HAL_MPU_Disable+0x2c>)
 8002484:	2200      	movs	r2, #0
 8002486:	605a      	str	r2, [r3, #4]
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00
 8002498:	e000ed90 	.word	0xe000ed90

0800249c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80024a4:	4a0b      	ldr	r2, [pc, #44]	@ (80024d4 <HAL_MPU_Enable+0x38>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80024ae:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <HAL_MPU_Enable+0x3c>)
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b2:	4a09      	ldr	r2, [pc, #36]	@ (80024d8 <HAL_MPU_Enable+0x3c>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80024ba:	f3bf 8f4f 	dsb	sy
}
 80024be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024c0:	f3bf 8f6f 	isb	sy
}
 80024c4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000ed90 	.word	0xe000ed90
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	785a      	ldrb	r2, [r3, #1]
 80024e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002558 <HAL_MPU_ConfigRegion+0x7c>)
 80024ea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80024ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002558 <HAL_MPU_ConfigRegion+0x7c>)
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	4a19      	ldr	r2, [pc, #100]	@ (8002558 <HAL_MPU_ConfigRegion+0x7c>)
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80024f8:	4a17      	ldr	r2, [pc, #92]	@ (8002558 <HAL_MPU_ConfigRegion+0x7c>)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	7b1b      	ldrb	r3, [r3, #12]
 8002504:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7adb      	ldrb	r3, [r3, #11]
 800250a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800250c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	7a9b      	ldrb	r3, [r3, #10]
 8002512:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002514:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7b5b      	ldrb	r3, [r3, #13]
 800251a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800251c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	7b9b      	ldrb	r3, [r3, #14]
 8002522:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002524:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7bdb      	ldrb	r3, [r3, #15]
 800252a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800252c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	7a5b      	ldrb	r3, [r3, #9]
 8002532:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002534:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7a1b      	ldrb	r3, [r3, #8]
 800253a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800253c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	7812      	ldrb	r2, [r2, #0]
 8002542:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002544:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002546:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002548:	6113      	str	r3, [r2, #16]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed90 	.word	0xe000ed90

0800255c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002568:	f7fe fffa 	bl	8001560 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e099      	b.n	80026ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002598:	e00f      	b.n	80025ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800259a:	f7fe ffe1 	bl	8001560 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d908      	bls.n	80025ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2203      	movs	r2, #3
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e078      	b.n	80026ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1e8      	bne.n	800259a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	4b38      	ldr	r3, [pc, #224]	@ (80026b4 <HAL_DMA_Init+0x158>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	2b04      	cmp	r3, #4
 8002612:	d107      	bne.n	8002624 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261c:	4313      	orrs	r3, r2
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f023 0307 	bic.w	r3, r3, #7
 800263a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	2b04      	cmp	r3, #4
 800264c:	d117      	bne.n	800267e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00e      	beq.n	800267e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f9e9 	bl	8002a38 <DMA_CheckFifoParam>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2240      	movs	r2, #64	@ 0x40
 8002670:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800267a:	2301      	movs	r3, #1
 800267c:	e016      	b.n	80026ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f9a0 	bl	80029cc <DMA_CalcBaseAndBitshift>
 800268c:	4603      	mov	r3, r0
 800268e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	223f      	movs	r2, #63	@ 0x3f
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	e010803f 	.word	0xe010803f

080026b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80026c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002900 <HAL_DMA_IRQHandler+0x248>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a8e      	ldr	r2, [pc, #568]	@ (8002904 <HAL_DMA_IRQHandler+0x24c>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0a9b      	lsrs	r3, r3, #10
 80026d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e2:	2208      	movs	r2, #8
 80026e4:	409a      	lsls	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01a      	beq.n	8002724 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d013      	beq.n	8002724 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0204 	bic.w	r2, r2, #4
 800270a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002710:	2208      	movs	r2, #8
 8002712:	409a      	lsls	r2, r3
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271c:	f043 0201 	orr.w	r2, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002728:	2201      	movs	r2, #1
 800272a:	409a      	lsls	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d012      	beq.n	800275a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00b      	beq.n	800275a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002746:	2201      	movs	r2, #1
 8002748:	409a      	lsls	r2, r3
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002752:	f043 0202 	orr.w	r2, r3, #2
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275e:	2204      	movs	r2, #4
 8002760:	409a      	lsls	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d012      	beq.n	8002790 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00b      	beq.n	8002790 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277c:	2204      	movs	r2, #4
 800277e:	409a      	lsls	r2, r3
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002788:	f043 0204 	orr.w	r2, r3, #4
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002794:	2210      	movs	r2, #16
 8002796:	409a      	lsls	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d043      	beq.n	8002828 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d03c      	beq.n	8002828 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	2210      	movs	r2, #16
 80027b4:	409a      	lsls	r2, r3
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d018      	beq.n	80027fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d108      	bne.n	80027e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d024      	beq.n	8002828 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
 80027e6:	e01f      	b.n	8002828 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d01b      	beq.n	8002828 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4798      	blx	r3
 80027f8:	e016      	b.n	8002828 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d107      	bne.n	8002818 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0208 	bic.w	r2, r2, #8
 8002816:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282c:	2220      	movs	r2, #32
 800282e:	409a      	lsls	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 808f 	beq.w	8002958 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8087 	beq.w	8002958 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284e:	2220      	movs	r2, #32
 8002850:	409a      	lsls	r2, r3
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b05      	cmp	r3, #5
 8002860:	d136      	bne.n	80028d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0216 	bic.w	r2, r2, #22
 8002870:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695a      	ldr	r2, [r3, #20]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002880:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d103      	bne.n	8002892 <HAL_DMA_IRQHandler+0x1da>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0208 	bic.w	r2, r2, #8
 80028a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a6:	223f      	movs	r2, #63	@ 0x3f
 80028a8:	409a      	lsls	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d07e      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
        }
        return;
 80028ce:	e079      	b.n	80029c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d01d      	beq.n	800291a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10d      	bne.n	8002908 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d031      	beq.n	8002958 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
 80028fc:	e02c      	b.n	8002958 <HAL_DMA_IRQHandler+0x2a0>
 80028fe:	bf00      	nop
 8002900:	20000000 	.word	0x20000000
 8002904:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d023      	beq.n	8002958 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
 8002918:	e01e      	b.n	8002958 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10f      	bne.n	8002948 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0210 	bic.w	r2, r2, #16
 8002936:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295c:	2b00      	cmp	r3, #0
 800295e:	d032      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d022      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2205      	movs	r2, #5
 8002970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0201 	bic.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	3301      	adds	r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	429a      	cmp	r2, r3
 800298e:	d307      	bcc.n	80029a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f2      	bne.n	8002984 <HAL_DMA_IRQHandler+0x2cc>
 800299e:	e000      	b.n	80029a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
 80029c2:	e000      	b.n	80029c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029c4:	bf00      	nop
    }
  }
}
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	3b10      	subs	r3, #16
 80029dc:	4a13      	ldr	r2, [pc, #76]	@ (8002a2c <DMA_CalcBaseAndBitshift+0x60>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029e6:	4a12      	ldr	r2, [pc, #72]	@ (8002a30 <DMA_CalcBaseAndBitshift+0x64>)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d908      	bls.n	8002a0c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	4b0c      	ldr	r3, [pc, #48]	@ (8002a34 <DMA_CalcBaseAndBitshift+0x68>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	1d1a      	adds	r2, r3, #4
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a0a:	e006      	b.n	8002a1a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b08      	ldr	r3, [pc, #32]	@ (8002a34 <DMA_CalcBaseAndBitshift+0x68>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	aaaaaaab 	.word	0xaaaaaaab
 8002a30:	08009d4c 	.word	0x08009d4c
 8002a34:	fffffc00 	.word	0xfffffc00

08002a38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d11f      	bne.n	8002a92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d856      	bhi.n	8002b06 <DMA_CheckFifoParam+0xce>
 8002a58:	a201      	add	r2, pc, #4	@ (adr r2, 8002a60 <DMA_CheckFifoParam+0x28>)
 8002a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5e:	bf00      	nop
 8002a60:	08002a71 	.word	0x08002a71
 8002a64:	08002a83 	.word	0x08002a83
 8002a68:	08002a71 	.word	0x08002a71
 8002a6c:	08002b07 	.word	0x08002b07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d046      	beq.n	8002b0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a80:	e043      	b.n	8002b0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a86:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a8a:	d140      	bne.n	8002b0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a90:	e03d      	b.n	8002b0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a9a:	d121      	bne.n	8002ae0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d837      	bhi.n	8002b12 <DMA_CheckFifoParam+0xda>
 8002aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa8 <DMA_CheckFifoParam+0x70>)
 8002aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa8:	08002ab9 	.word	0x08002ab9
 8002aac:	08002abf 	.word	0x08002abf
 8002ab0:	08002ab9 	.word	0x08002ab9
 8002ab4:	08002ad1 	.word	0x08002ad1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      break;
 8002abc:	e030      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d025      	beq.n	8002b16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ace:	e022      	b.n	8002b16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ad8:	d11f      	bne.n	8002b1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ade:	e01c      	b.n	8002b1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d903      	bls.n	8002aee <DMA_CheckFifoParam+0xb6>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d003      	beq.n	8002af4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002aec:	e018      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
      break;
 8002af2:	e015      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00e      	beq.n	8002b1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      break;
 8002b04:	e00b      	b.n	8002b1e <DMA_CheckFifoParam+0xe6>
      break;
 8002b06:	bf00      	nop
 8002b08:	e00a      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e008      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e006      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b12:	bf00      	nop
 8002b14:	e004      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b16:	bf00      	nop
 8002b18:	e002      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b1a:	bf00      	nop
 8002b1c:	e000      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b1e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop

08002b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	@ 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	e175      	b.n	8002e3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b50:	2201      	movs	r2, #1
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	f040 8164 	bne.w	8002e36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d005      	beq.n	8002b86 <HAL_GPIO_Init+0x56>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d130      	bne.n	8002be8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	2203      	movs	r2, #3
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 0201 	and.w	r2, r3, #1
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d017      	beq.n	8002c24 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d123      	bne.n	8002c78 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	08da      	lsrs	r2, r3, #3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3208      	adds	r2, #8
 8002c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	220f      	movs	r2, #15
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	08da      	lsrs	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3208      	adds	r2, #8
 8002c72:	69b9      	ldr	r1, [r7, #24]
 8002c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	2203      	movs	r2, #3
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0203 	and.w	r2, r3, #3
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80be 	beq.w	8002e36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cba:	4b66      	ldr	r3, [pc, #408]	@ (8002e54 <HAL_GPIO_Init+0x324>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbe:	4a65      	ldr	r2, [pc, #404]	@ (8002e54 <HAL_GPIO_Init+0x324>)
 8002cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cc6:	4b63      	ldr	r3, [pc, #396]	@ (8002e54 <HAL_GPIO_Init+0x324>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cd2:	4a61      	ldr	r2, [pc, #388]	@ (8002e58 <HAL_GPIO_Init+0x328>)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	089b      	lsrs	r3, r3, #2
 8002cd8:	3302      	adds	r3, #2
 8002cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	220f      	movs	r2, #15
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a58      	ldr	r2, [pc, #352]	@ (8002e5c <HAL_GPIO_Init+0x32c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d037      	beq.n	8002d6e <HAL_GPIO_Init+0x23e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a57      	ldr	r2, [pc, #348]	@ (8002e60 <HAL_GPIO_Init+0x330>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d031      	beq.n	8002d6a <HAL_GPIO_Init+0x23a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a56      	ldr	r2, [pc, #344]	@ (8002e64 <HAL_GPIO_Init+0x334>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d02b      	beq.n	8002d66 <HAL_GPIO_Init+0x236>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a55      	ldr	r2, [pc, #340]	@ (8002e68 <HAL_GPIO_Init+0x338>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d025      	beq.n	8002d62 <HAL_GPIO_Init+0x232>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a54      	ldr	r2, [pc, #336]	@ (8002e6c <HAL_GPIO_Init+0x33c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01f      	beq.n	8002d5e <HAL_GPIO_Init+0x22e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a53      	ldr	r2, [pc, #332]	@ (8002e70 <HAL_GPIO_Init+0x340>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d019      	beq.n	8002d5a <HAL_GPIO_Init+0x22a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a52      	ldr	r2, [pc, #328]	@ (8002e74 <HAL_GPIO_Init+0x344>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_GPIO_Init+0x226>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a51      	ldr	r2, [pc, #324]	@ (8002e78 <HAL_GPIO_Init+0x348>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00d      	beq.n	8002d52 <HAL_GPIO_Init+0x222>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a50      	ldr	r2, [pc, #320]	@ (8002e7c <HAL_GPIO_Init+0x34c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <HAL_GPIO_Init+0x21e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a4f      	ldr	r2, [pc, #316]	@ (8002e80 <HAL_GPIO_Init+0x350>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d101      	bne.n	8002d4a <HAL_GPIO_Init+0x21a>
 8002d46:	2309      	movs	r3, #9
 8002d48:	e012      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d4a:	230a      	movs	r3, #10
 8002d4c:	e010      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d4e:	2308      	movs	r3, #8
 8002d50:	e00e      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d52:	2307      	movs	r3, #7
 8002d54:	e00c      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d56:	2306      	movs	r3, #6
 8002d58:	e00a      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d5a:	2305      	movs	r3, #5
 8002d5c:	e008      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d5e:	2304      	movs	r3, #4
 8002d60:	e006      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d62:	2303      	movs	r3, #3
 8002d64:	e004      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e002      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	f002 0203 	and.w	r2, r2, #3
 8002d76:	0092      	lsls	r2, r2, #2
 8002d78:	4093      	lsls	r3, r2
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d80:	4935      	ldr	r1, [pc, #212]	@ (8002e58 <HAL_GPIO_Init+0x328>)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	089b      	lsrs	r3, r3, #2
 8002d86:	3302      	adds	r3, #2
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e84 <HAL_GPIO_Init+0x354>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002db2:	4a34      	ldr	r2, [pc, #208]	@ (8002e84 <HAL_GPIO_Init+0x354>)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db8:	4b32      	ldr	r3, [pc, #200]	@ (8002e84 <HAL_GPIO_Init+0x354>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ddc:	4a29      	ldr	r2, [pc, #164]	@ (8002e84 <HAL_GPIO_Init+0x354>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002de2:	4b28      	ldr	r3, [pc, #160]	@ (8002e84 <HAL_GPIO_Init+0x354>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e06:	4a1f      	ldr	r2, [pc, #124]	@ (8002e84 <HAL_GPIO_Init+0x354>)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e84 <HAL_GPIO_Init+0x354>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e30:	4a14      	ldr	r2, [pc, #80]	@ (8002e84 <HAL_GPIO_Init+0x354>)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b0f      	cmp	r3, #15
 8002e40:	f67f ae86 	bls.w	8002b50 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	3724      	adds	r7, #36	@ 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40013800 	.word	0x40013800
 8002e5c:	40020000 	.word	0x40020000
 8002e60:	40020400 	.word	0x40020400
 8002e64:	40020800 	.word	0x40020800
 8002e68:	40020c00 	.word	0x40020c00
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40021400 	.word	0x40021400
 8002e74:	40021800 	.word	0x40021800
 8002e78:	40021c00 	.word	0x40021c00
 8002e7c:	40022000 	.word	0x40022000
 8002e80:	40022400 	.word	0x40022400
 8002e84:	40013c00 	.word	0x40013c00

08002e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]
 8002e94:	4613      	mov	r3, r2
 8002e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e98:	787b      	ldrb	r3, [r7, #1]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e9e:	887a      	ldrh	r2, [r7, #2]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ea4:	e003      	b.n	8002eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	041a      	lsls	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	619a      	str	r2, [r3, #24]
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ec6:	4b23      	ldr	r3, [pc, #140]	@ (8002f54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	4a22      	ldr	r2, [pc, #136]	@ (8002f54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ed2:	4b20      	ldr	r3, [pc, #128]	@ (8002f54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ede:	4b1e      	ldr	r3, [pc, #120]	@ (8002f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eea:	f7fe fb39 	bl	8001560 <HAL_GetTick>
 8002eee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ef0:	e009      	b.n	8002f06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ef2:	f7fe fb35 	bl	8001560 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f00:	d901      	bls.n	8002f06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e022      	b.n	8002f4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f06:	4b14      	ldr	r3, [pc, #80]	@ (8002f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f12:	d1ee      	bne.n	8002ef2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f14:	4b10      	ldr	r3, [pc, #64]	@ (8002f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0f      	ldr	r2, [pc, #60]	@ (8002f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f20:	f7fe fb1e 	bl	8001560 <HAL_GetTick>
 8002f24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f26:	e009      	b.n	8002f3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f28:	f7fe fb1a 	bl	8001560 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f36:	d901      	bls.n	8002f3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e007      	b.n	8002f4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f3c:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f48:	d1ee      	bne.n	8002f28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40023800 	.word	0x40023800
 8002f58:	40007000 	.word	0x40007000

08002f5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f64:	2300      	movs	r3, #0
 8002f66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e29b      	b.n	80034aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 8087 	beq.w	800308e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f80:	4b96      	ldr	r3, [pc, #600]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d00c      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f8c:	4b93      	ldr	r3, [pc, #588]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d112      	bne.n	8002fbe <HAL_RCC_OscConfig+0x62>
 8002f98:	4b90      	ldr	r3, [pc, #576]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fa4:	d10b      	bne.n	8002fbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa6:	4b8d      	ldr	r3, [pc, #564]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d06c      	beq.n	800308c <HAL_RCC_OscConfig+0x130>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d168      	bne.n	800308c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e275      	b.n	80034aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x7a>
 8002fc8:	4b84      	ldr	r3, [pc, #528]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a83      	ldr	r2, [pc, #524]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8002fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	e02e      	b.n	8003034 <HAL_RCC_OscConfig+0xd8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x9c>
 8002fde:	4b7f      	ldr	r3, [pc, #508]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8002fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	4b7c      	ldr	r3, [pc, #496]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a7b      	ldr	r2, [pc, #492]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8002ff0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e01d      	b.n	8003034 <HAL_RCC_OscConfig+0xd8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0xc0>
 8003002:	4b76      	ldr	r3, [pc, #472]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a75      	ldr	r2, [pc, #468]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8003008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b73      	ldr	r3, [pc, #460]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a72      	ldr	r2, [pc, #456]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e00b      	b.n	8003034 <HAL_RCC_OscConfig+0xd8>
 800301c:	4b6f      	ldr	r3, [pc, #444]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6e      	ldr	r2, [pc, #440]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8003022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	4b6c      	ldr	r3, [pc, #432]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a6b      	ldr	r2, [pc, #428]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 800302e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d013      	beq.n	8003064 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fa90 	bl	8001560 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003044:	f7fe fa8c 	bl	8001560 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	@ 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e229      	b.n	80034aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	4b61      	ldr	r3, [pc, #388]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0xe8>
 8003062:	e014      	b.n	800308e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe fa7c 	bl	8001560 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800306c:	f7fe fa78 	bl	8001560 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	@ 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e215      	b.n	80034aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307e:	4b57      	ldr	r3, [pc, #348]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x110>
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d069      	beq.n	800316e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800309a:	4b50      	ldr	r3, [pc, #320]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030a6:	4b4d      	ldr	r3, [pc, #308]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d11c      	bne.n	80030ec <HAL_RCC_OscConfig+0x190>
 80030b2:	4b4a      	ldr	r3, [pc, #296]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d116      	bne.n	80030ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030be:	4b47      	ldr	r3, [pc, #284]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <HAL_RCC_OscConfig+0x17a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e1e9      	b.n	80034aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d6:	4b41      	ldr	r3, [pc, #260]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	493d      	ldr	r1, [pc, #244]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ea:	e040      	b.n	800316e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d023      	beq.n	800313c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f4:	4b39      	ldr	r3, [pc, #228]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a38      	ldr	r2, [pc, #224]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003100:	f7fe fa2e 	bl	8001560 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003108:	f7fe fa2a 	bl	8001560 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e1c7      	b.n	80034aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311a:	4b30      	ldr	r3, [pc, #192]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003126:	4b2d      	ldr	r3, [pc, #180]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4929      	ldr	r1, [pc, #164]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]
 800313a:	e018      	b.n	800316e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313c:	4b27      	ldr	r3, [pc, #156]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a26      	ldr	r2, [pc, #152]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7fe fa0a 	bl	8001560 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003150:	f7fe fa06 	bl	8001560 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e1a3      	b.n	80034aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003162:	4b1e      	ldr	r3, [pc, #120]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d038      	beq.n	80031ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d019      	beq.n	80031b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003182:	4b16      	ldr	r3, [pc, #88]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8003184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003186:	4a15      	ldr	r2, [pc, #84]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318e:	f7fe f9e7 	bl	8001560 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003196:	f7fe f9e3 	bl	8001560 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e180      	b.n	80034aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a8:	4b0c      	ldr	r3, [pc, #48]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 80031aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x23a>
 80031b4:	e01a      	b.n	80031ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b6:	4b09      	ldr	r3, [pc, #36]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 80031b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ba:	4a08      	ldr	r2, [pc, #32]	@ (80031dc <HAL_RCC_OscConfig+0x280>)
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fe f9cd 	bl	8001560 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c8:	e00a      	b.n	80031e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ca:	f7fe f9c9 	bl	8001560 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d903      	bls.n	80031e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e166      	b.n	80034aa <HAL_RCC_OscConfig+0x54e>
 80031dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e0:	4b92      	ldr	r3, [pc, #584]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80031e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1ee      	bne.n	80031ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80a4 	beq.w	8003342 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fa:	4b8c      	ldr	r3, [pc, #560]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10d      	bne.n	8003222 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	4b89      	ldr	r3, [pc, #548]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	4a88      	ldr	r2, [pc, #544]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003210:	6413      	str	r3, [r2, #64]	@ 0x40
 8003212:	4b86      	ldr	r3, [pc, #536]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321e:	2301      	movs	r3, #1
 8003220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003222:	4b83      	ldr	r3, [pc, #524]	@ (8003430 <HAL_RCC_OscConfig+0x4d4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322a:	2b00      	cmp	r3, #0
 800322c:	d118      	bne.n	8003260 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800322e:	4b80      	ldr	r3, [pc, #512]	@ (8003430 <HAL_RCC_OscConfig+0x4d4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a7f      	ldr	r2, [pc, #508]	@ (8003430 <HAL_RCC_OscConfig+0x4d4>)
 8003234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323a:	f7fe f991 	bl	8001560 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003242:	f7fe f98d 	bl	8001560 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b64      	cmp	r3, #100	@ 0x64
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e12a      	b.n	80034aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003254:	4b76      	ldr	r3, [pc, #472]	@ (8003430 <HAL_RCC_OscConfig+0x4d4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d106      	bne.n	8003276 <HAL_RCC_OscConfig+0x31a>
 8003268:	4b70      	ldr	r3, [pc, #448]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326c:	4a6f      	ldr	r2, [pc, #444]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6713      	str	r3, [r2, #112]	@ 0x70
 8003274:	e02d      	b.n	80032d2 <HAL_RCC_OscConfig+0x376>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0x33c>
 800327e:	4b6b      	ldr	r3, [pc, #428]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003282:	4a6a      	ldr	r2, [pc, #424]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	6713      	str	r3, [r2, #112]	@ 0x70
 800328a:	4b68      	ldr	r3, [pc, #416]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328e:	4a67      	ldr	r2, [pc, #412]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 8003290:	f023 0304 	bic.w	r3, r3, #4
 8003294:	6713      	str	r3, [r2, #112]	@ 0x70
 8003296:	e01c      	b.n	80032d2 <HAL_RCC_OscConfig+0x376>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b05      	cmp	r3, #5
 800329e:	d10c      	bne.n	80032ba <HAL_RCC_OscConfig+0x35e>
 80032a0:	4b62      	ldr	r3, [pc, #392]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a4:	4a61      	ldr	r2, [pc, #388]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80032a6:	f043 0304 	orr.w	r3, r3, #4
 80032aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ac:	4b5f      	ldr	r3, [pc, #380]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b0:	4a5e      	ldr	r2, [pc, #376]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032b8:	e00b      	b.n	80032d2 <HAL_RCC_OscConfig+0x376>
 80032ba:	4b5c      	ldr	r3, [pc, #368]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032be:	4a5b      	ldr	r2, [pc, #364]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032c6:	4b59      	ldr	r3, [pc, #356]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ca:	4a58      	ldr	r2, [pc, #352]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80032cc:	f023 0304 	bic.w	r3, r3, #4
 80032d0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d015      	beq.n	8003306 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032da:	f7fe f941 	bl	8001560 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fe f93d 	bl	8001560 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e0d8      	b.n	80034aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f8:	4b4c      	ldr	r3, [pc, #304]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0ee      	beq.n	80032e2 <HAL_RCC_OscConfig+0x386>
 8003304:	e014      	b.n	8003330 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003306:	f7fe f92b 	bl	8001560 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330c:	e00a      	b.n	8003324 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330e:	f7fe f927 	bl	8001560 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e0c2      	b.n	80034aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003324:	4b41      	ldr	r3, [pc, #260]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ee      	bne.n	800330e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003330:	7dfb      	ldrb	r3, [r7, #23]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d105      	bne.n	8003342 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003336:	4b3d      	ldr	r3, [pc, #244]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	4a3c      	ldr	r2, [pc, #240]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 800333c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003340:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 80ae 	beq.w	80034a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800334c:	4b37      	ldr	r3, [pc, #220]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 030c 	and.w	r3, r3, #12
 8003354:	2b08      	cmp	r3, #8
 8003356:	d06d      	beq.n	8003434 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d14b      	bne.n	80033f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003360:	4b32      	ldr	r3, [pc, #200]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a31      	ldr	r2, [pc, #196]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 8003366:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800336a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fe f8f8 	bl	8001560 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003374:	f7fe f8f4 	bl	8001560 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e091      	b.n	80034aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	4b29      	ldr	r3, [pc, #164]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	019b      	lsls	r3, r3, #6
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	3b01      	subs	r3, #1
 80033ac:	041b      	lsls	r3, r3, #16
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	061b      	lsls	r3, r3, #24
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033bc:	071b      	lsls	r3, r3, #28
 80033be:	491b      	ldr	r1, [pc, #108]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c4:	4b19      	ldr	r3, [pc, #100]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a18      	ldr	r2, [pc, #96]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80033ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe f8c6 	bl	8001560 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fe f8c2 	bl	8001560 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e05f      	b.n	80034aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ea:	4b10      	ldr	r3, [pc, #64]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x47c>
 80033f6:	e057      	b.n	80034a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f8:	4b0c      	ldr	r3, [pc, #48]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a0b      	ldr	r2, [pc, #44]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 80033fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe f8ac 	bl	8001560 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340c:	f7fe f8a8 	bl	8001560 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e045      	b.n	80034aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	4b03      	ldr	r3, [pc, #12]	@ (800342c <HAL_RCC_OscConfig+0x4d0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x4b0>
 800342a:	e03d      	b.n	80034a8 <HAL_RCC_OscConfig+0x54c>
 800342c:	40023800 	.word	0x40023800
 8003430:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003434:	4b1f      	ldr	r3, [pc, #124]	@ (80034b4 <HAL_RCC_OscConfig+0x558>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d030      	beq.n	80034a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d129      	bne.n	80034a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345a:	429a      	cmp	r2, r3
 800345c:	d122      	bne.n	80034a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003464:	4013      	ands	r3, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800346a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800346c:	4293      	cmp	r3, r2
 800346e:	d119      	bne.n	80034a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347a:	085b      	lsrs	r3, r3, #1
 800347c:	3b01      	subs	r3, #1
 800347e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d10f      	bne.n	80034a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800

080034b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0d0      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d0:	4b6a      	ldr	r3, [pc, #424]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d910      	bls.n	8003500 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b67      	ldr	r3, [pc, #412]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 020f 	bic.w	r2, r3, #15
 80034e6:	4965      	ldr	r1, [pc, #404]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b63      	ldr	r3, [pc, #396]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0b8      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d020      	beq.n	800354e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003518:	4b59      	ldr	r3, [pc, #356]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a58      	ldr	r2, [pc, #352]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800351e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003522:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003530:	4b53      	ldr	r3, [pc, #332]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a52      	ldr	r2, [pc, #328]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 8003536:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800353a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353c:	4b50      	ldr	r3, [pc, #320]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	494d      	ldr	r1, [pc, #308]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d040      	beq.n	80035dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	4b47      	ldr	r3, [pc, #284]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d115      	bne.n	800359a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e07f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d107      	bne.n	800358a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357a:	4b41      	ldr	r3, [pc, #260]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e073      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358a:	4b3d      	ldr	r3, [pc, #244]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e06b      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800359a:	4b39      	ldr	r3, [pc, #228]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f023 0203 	bic.w	r2, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4936      	ldr	r1, [pc, #216]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ac:	f7fd ffd8 	bl	8001560 <HAL_GetTick>
 80035b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	e00a      	b.n	80035ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b4:	f7fd ffd4 	bl	8001560 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e053      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 020c 	and.w	r2, r3, #12
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	429a      	cmp	r2, r3
 80035da:	d1eb      	bne.n	80035b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035dc:	4b27      	ldr	r3, [pc, #156]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d210      	bcs.n	800360c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b24      	ldr	r3, [pc, #144]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 020f 	bic.w	r2, r3, #15
 80035f2:	4922      	ldr	r1, [pc, #136]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b20      	ldr	r3, [pc, #128]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e032      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003618:	4b19      	ldr	r3, [pc, #100]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4916      	ldr	r1, [pc, #88]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003636:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	490e      	ldr	r1, [pc, #56]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800364a:	f000 f821 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 800364e:	4602      	mov	r2, r0
 8003650:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	490a      	ldr	r1, [pc, #40]	@ (8003684 <HAL_RCC_ClockConfig+0x1cc>)
 800365c:	5ccb      	ldrb	r3, [r1, r3]
 800365e:	fa22 f303 	lsr.w	r3, r2, r3
 8003662:	4a09      	ldr	r2, [pc, #36]	@ (8003688 <HAL_RCC_ClockConfig+0x1d0>)
 8003664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003666:	4b09      	ldr	r3, [pc, #36]	@ (800368c <HAL_RCC_ClockConfig+0x1d4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd fc5e 	bl	8000f2c <HAL_InitTick>

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40023c00 	.word	0x40023c00
 8003680:	40023800 	.word	0x40023800
 8003684:	08009d34 	.word	0x08009d34
 8003688:	20000000 	.word	0x20000000
 800368c:	20000004 	.word	0x20000004

08003690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003694:	b094      	sub	sp, #80	@ 0x50
 8003696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	647b      	str	r3, [r7, #68]	@ 0x44
 800369c:	2300      	movs	r3, #0
 800369e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036a0:	2300      	movs	r3, #0
 80036a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a8:	4b79      	ldr	r3, [pc, #484]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 030c 	and.w	r3, r3, #12
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d00d      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x40>
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	f200 80e1 	bhi.w	800387c <HAL_RCC_GetSysClockFreq+0x1ec>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x34>
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d003      	beq.n	80036ca <HAL_RCC_GetSysClockFreq+0x3a>
 80036c2:	e0db      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036c4:	4b73      	ldr	r3, [pc, #460]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x204>)
 80036c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036c8:	e0db      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ca:	4b73      	ldr	r3, [pc, #460]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x208>)
 80036cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036ce:	e0d8      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036da:	4b6d      	ldr	r3, [pc, #436]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d063      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	099b      	lsrs	r3, r3, #6
 80036ec:	2200      	movs	r2, #0
 80036ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80036f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036fa:	2300      	movs	r3, #0
 80036fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80036fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003702:	4622      	mov	r2, r4
 8003704:	462b      	mov	r3, r5
 8003706:	f04f 0000 	mov.w	r0, #0
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	0159      	lsls	r1, r3, #5
 8003710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003714:	0150      	lsls	r0, r2, #5
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4621      	mov	r1, r4
 800371c:	1a51      	subs	r1, r2, r1
 800371e:	6139      	str	r1, [r7, #16]
 8003720:	4629      	mov	r1, r5
 8003722:	eb63 0301 	sbc.w	r3, r3, r1
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003734:	4659      	mov	r1, fp
 8003736:	018b      	lsls	r3, r1, #6
 8003738:	4651      	mov	r1, sl
 800373a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800373e:	4651      	mov	r1, sl
 8003740:	018a      	lsls	r2, r1, #6
 8003742:	4651      	mov	r1, sl
 8003744:	ebb2 0801 	subs.w	r8, r2, r1
 8003748:	4659      	mov	r1, fp
 800374a:	eb63 0901 	sbc.w	r9, r3, r1
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800375a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800375e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003762:	4690      	mov	r8, r2
 8003764:	4699      	mov	r9, r3
 8003766:	4623      	mov	r3, r4
 8003768:	eb18 0303 	adds.w	r3, r8, r3
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	462b      	mov	r3, r5
 8003770:	eb49 0303 	adc.w	r3, r9, r3
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003782:	4629      	mov	r1, r5
 8003784:	024b      	lsls	r3, r1, #9
 8003786:	4621      	mov	r1, r4
 8003788:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800378c:	4621      	mov	r1, r4
 800378e:	024a      	lsls	r2, r1, #9
 8003790:	4610      	mov	r0, r2
 8003792:	4619      	mov	r1, r3
 8003794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003796:	2200      	movs	r2, #0
 8003798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800379a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800379c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037a0:	f7fc fd9e 	bl	80002e0 <__aeabi_uldivmod>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4613      	mov	r3, r2
 80037aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037ac:	e058      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ae:	4b38      	ldr	r3, [pc, #224]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	2200      	movs	r2, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	4611      	mov	r1, r2
 80037ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037be:	623b      	str	r3, [r7, #32]
 80037c0:	2300      	movs	r3, #0
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037c8:	4642      	mov	r2, r8
 80037ca:	464b      	mov	r3, r9
 80037cc:	f04f 0000 	mov.w	r0, #0
 80037d0:	f04f 0100 	mov.w	r1, #0
 80037d4:	0159      	lsls	r1, r3, #5
 80037d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037da:	0150      	lsls	r0, r2, #5
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4641      	mov	r1, r8
 80037e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80037e6:	4649      	mov	r1, r9
 80037e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003800:	ebb2 040a 	subs.w	r4, r2, sl
 8003804:	eb63 050b 	sbc.w	r5, r3, fp
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	00eb      	lsls	r3, r5, #3
 8003812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003816:	00e2      	lsls	r2, r4, #3
 8003818:	4614      	mov	r4, r2
 800381a:	461d      	mov	r5, r3
 800381c:	4643      	mov	r3, r8
 800381e:	18e3      	adds	r3, r4, r3
 8003820:	603b      	str	r3, [r7, #0]
 8003822:	464b      	mov	r3, r9
 8003824:	eb45 0303 	adc.w	r3, r5, r3
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003836:	4629      	mov	r1, r5
 8003838:	028b      	lsls	r3, r1, #10
 800383a:	4621      	mov	r1, r4
 800383c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003840:	4621      	mov	r1, r4
 8003842:	028a      	lsls	r2, r1, #10
 8003844:	4610      	mov	r0, r2
 8003846:	4619      	mov	r1, r3
 8003848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800384a:	2200      	movs	r2, #0
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	61fa      	str	r2, [r7, #28]
 8003850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003854:	f7fc fd44 	bl	80002e0 <__aeabi_uldivmod>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4613      	mov	r3, r2
 800385e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003860:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	3301      	adds	r3, #1
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003870:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800387a:	e002      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800387c:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x204>)
 800387e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003884:	4618      	mov	r0, r3
 8003886:	3750      	adds	r7, #80	@ 0x50
 8003888:	46bd      	mov	sp, r7
 800388a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800
 8003894:	00f42400 	.word	0x00f42400
 8003898:	007a1200 	.word	0x007a1200

0800389c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a0:	4b03      	ldr	r3, [pc, #12]	@ (80038b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20000000 	.word	0x20000000

080038b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038b8:	f7ff fff0 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0a9b      	lsrs	r3, r3, #10
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4903      	ldr	r1, [pc, #12]	@ (80038d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40023800 	.word	0x40023800
 80038d8:	08009d44 	.word	0x08009d44

080038dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038e0:	f7ff ffdc 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	0b5b      	lsrs	r3, r3, #13
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	4903      	ldr	r1, [pc, #12]	@ (8003900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038f2:	5ccb      	ldrb	r3, [r1, r3]
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40023800 	.word	0x40023800
 8003900:	08009d44 	.word	0x08009d44

08003904 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	220f      	movs	r2, #15
 8003912:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003914:	4b12      	ldr	r3, [pc, #72]	@ (8003960 <HAL_RCC_GetClockConfig+0x5c>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 0203 	and.w	r2, r3, #3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003920:	4b0f      	ldr	r3, [pc, #60]	@ (8003960 <HAL_RCC_GetClockConfig+0x5c>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800392c:	4b0c      	ldr	r3, [pc, #48]	@ (8003960 <HAL_RCC_GetClockConfig+0x5c>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003938:	4b09      	ldr	r3, [pc, #36]	@ (8003960 <HAL_RCC_GetClockConfig+0x5c>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	08db      	lsrs	r3, r3, #3
 800393e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003946:	4b07      	ldr	r3, [pc, #28]	@ (8003964 <HAL_RCC_GetClockConfig+0x60>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 020f 	and.w	r2, r3, #15
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	601a      	str	r2, [r3, #0]
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800
 8003964:	40023c00 	.word	0x40023c00

08003968 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d012      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003990:	4b69      	ldr	r3, [pc, #420]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	4a68      	ldr	r2, [pc, #416]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003996:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800399a:	6093      	str	r3, [r2, #8]
 800399c:	4b66      	ldr	r3, [pc, #408]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a4:	4964      	ldr	r1, [pc, #400]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80039b2:	2301      	movs	r3, #1
 80039b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d017      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d0:	4959      	ldr	r1, [pc, #356]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039e0:	d101      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80039e2:	2301      	movs	r3, #1
 80039e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80039ee:	2301      	movs	r3, #1
 80039f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d017      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a04:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	494a      	ldr	r1, [pc, #296]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 808b 	beq.w	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a50:	4a39      	ldr	r2, [pc, #228]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a56:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a58:	4b37      	ldr	r3, [pc, #220]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a64:	4b35      	ldr	r3, [pc, #212]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a34      	ldr	r2, [pc, #208]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a70:	f7fd fd76 	bl	8001560 <HAL_GetTick>
 8003a74:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a78:	f7fd fd72 	bl	8001560 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	@ 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e38f      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a96:	4b28      	ldr	r3, [pc, #160]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a9e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d035      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d02e      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ab4:	4b20      	ldr	r3, [pc, #128]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003abc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003abe:	4b1e      	ldr	r3, [pc, #120]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aca:	4b1b      	ldr	r3, [pc, #108]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ace:	4a1a      	ldr	r2, [pc, #104]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ad6:	4a18      	ldr	r2, [pc, #96]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003adc:	4b16      	ldr	r3, [pc, #88]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d114      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fd3a 	bl	8001560 <HAL_GetTick>
 8003aec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aee:	e00a      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af0:	f7fd fd36 	bl	8001560 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e351      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b06:	4b0c      	ldr	r3, [pc, #48]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0ee      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b1e:	d111      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b20:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b2c:	4b04      	ldr	r3, [pc, #16]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b2e:	400b      	ands	r3, r1
 8003b30:	4901      	ldr	r1, [pc, #4]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
 8003b36:	e00b      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	40007000 	.word	0x40007000
 8003b40:	0ffffcff 	.word	0x0ffffcff
 8003b44:	4bac      	ldr	r3, [pc, #688]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4aab      	ldr	r2, [pc, #684]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003b4e:	6093      	str	r3, [r2, #8]
 8003b50:	4ba9      	ldr	r3, [pc, #676]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5c:	49a6      	ldr	r1, [pc, #664]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d010      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b6e:	4ba2      	ldr	r3, [pc, #648]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b74:	4aa0      	ldr	r2, [pc, #640]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003b7e:	4b9e      	ldr	r3, [pc, #632]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b80:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b88:	499b      	ldr	r1, [pc, #620]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b9c:	4b96      	ldr	r3, [pc, #600]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003baa:	4993      	ldr	r1, [pc, #588]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bbe:	4b8e      	ldr	r3, [pc, #568]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bcc:	498a      	ldr	r1, [pc, #552]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003be0:	4b85      	ldr	r3, [pc, #532]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bee:	4982      	ldr	r1, [pc, #520]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c02:	4b7d      	ldr	r3, [pc, #500]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c08:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c10:	4979      	ldr	r1, [pc, #484]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c24:	4b74      	ldr	r3, [pc, #464]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2a:	f023 0203 	bic.w	r2, r3, #3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c32:	4971      	ldr	r1, [pc, #452]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c46:	4b6c      	ldr	r3, [pc, #432]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4c:	f023 020c 	bic.w	r2, r3, #12
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c54:	4968      	ldr	r1, [pc, #416]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c68:	4b63      	ldr	r3, [pc, #396]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c76:	4960      	ldr	r1, [pc, #384]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c8a:	4b5b      	ldr	r3, [pc, #364]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c90:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c98:	4957      	ldr	r1, [pc, #348]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cac:	4b52      	ldr	r3, [pc, #328]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cba:	494f      	ldr	r1, [pc, #316]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003cce:	4b4a      	ldr	r3, [pc, #296]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cdc:	4946      	ldr	r1, [pc, #280]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003cf0:	4b41      	ldr	r3, [pc, #260]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfe:	493e      	ldr	r1, [pc, #248]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d12:	4b39      	ldr	r3, [pc, #228]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d20:	4935      	ldr	r1, [pc, #212]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d34:	4b30      	ldr	r3, [pc, #192]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d42:	492d      	ldr	r1, [pc, #180]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d011      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d56:	4b28      	ldr	r3, [pc, #160]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d64:	4924      	ldr	r1, [pc, #144]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d74:	d101      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d76:	2301      	movs	r3, #1
 8003d78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d86:	2301      	movs	r3, #1
 8003d88:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d96:	4b18      	ldr	r3, [pc, #96]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da4:	4914      	ldr	r1, [pc, #80]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00b      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003db8:	4b0f      	ldr	r3, [pc, #60]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dc8:	490b      	ldr	r1, [pc, #44]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00f      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ddc:	4b06      	ldr	r3, [pc, #24]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dec:	4902      	ldr	r1, [pc, #8]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003df4:	e002      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00b      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e08:	4b8a      	ldr	r3, [pc, #552]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e0e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e18:	4986      	ldr	r1, [pc, #536]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00b      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e2c:	4b81      	ldr	r3, [pc, #516]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e32:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e3c:	497d      	ldr	r1, [pc, #500]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d006      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80d6 	beq.w	8004004 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e58:	4b76      	ldr	r3, [pc, #472]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a75      	ldr	r2, [pc, #468]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e64:	f7fd fb7c 	bl	8001560 <HAL_GetTick>
 8003e68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e6c:	f7fd fb78 	bl	8001560 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b64      	cmp	r3, #100	@ 0x64
 8003e78:	d901      	bls.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e195      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e7e:	4b6d      	ldr	r3, [pc, #436]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f0      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d021      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d11d      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e9e:	4b65      	ldr	r3, [pc, #404]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ea4:	0c1b      	lsrs	r3, r3, #16
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003eac:	4b61      	ldr	r3, [pc, #388]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eb2:	0e1b      	lsrs	r3, r3, #24
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	019a      	lsls	r2, r3, #6
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	071b      	lsls	r3, r3, #28
 8003ed2:	4958      	ldr	r1, [pc, #352]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d004      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d02e      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f04:	d129      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f06:	4b4b      	ldr	r3, [pc, #300]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f14:	4b47      	ldr	r3, [pc, #284]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f1a:	0f1b      	lsrs	r3, r3, #28
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	019a      	lsls	r2, r3, #6
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	041b      	lsls	r3, r3, #16
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	061b      	lsls	r3, r3, #24
 8003f34:	431a      	orrs	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	071b      	lsls	r3, r3, #28
 8003f3a:	493e      	ldr	r1, [pc, #248]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f42:	4b3c      	ldr	r3, [pc, #240]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f48:	f023 021f 	bic.w	r2, r3, #31
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	3b01      	subs	r3, #1
 8003f52:	4938      	ldr	r1, [pc, #224]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d01d      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f66:	4b33      	ldr	r3, [pc, #204]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f6c:	0e1b      	lsrs	r3, r3, #24
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f74:	4b2f      	ldr	r3, [pc, #188]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f7a:	0f1b      	lsrs	r3, r3, #28
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	019a      	lsls	r2, r3, #6
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	061b      	lsls	r3, r3, #24
 8003f94:	431a      	orrs	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	071b      	lsls	r3, r3, #28
 8003f9a:	4926      	ldr	r1, [pc, #152]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d011      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	019a      	lsls	r2, r3, #6
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	041b      	lsls	r3, r3, #16
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	061b      	lsls	r3, r3, #24
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	071b      	lsls	r3, r3, #28
 8003fca:	491a      	ldr	r1, [pc, #104]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fd2:	4b18      	ldr	r3, [pc, #96]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a17      	ldr	r2, [pc, #92]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fde:	f7fd fabf 	bl	8001560 <HAL_GetTick>
 8003fe2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fe6:	f7fd fabb 	bl	8001560 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b64      	cmp	r3, #100	@ 0x64
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e0d8      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b01      	cmp	r3, #1
 8004008:	f040 80ce 	bne.w	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800400c:	4b09      	ldr	r3, [pc, #36]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a08      	ldr	r2, [pc, #32]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004018:	f7fd faa2 	bl	8001560 <HAL_GetTick>
 800401c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800401e:	e00b      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004020:	f7fd fa9e 	bl	8001560 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b64      	cmp	r3, #100	@ 0x64
 800402c:	d904      	bls.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e0bb      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004032:	bf00      	nop
 8004034:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004038:	4b5e      	ldr	r3, [pc, #376]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004044:	d0ec      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004062:	2b00      	cmp	r3, #0
 8004064:	d02e      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d12a      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800406e:	4b51      	ldr	r3, [pc, #324]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004074:	0c1b      	lsrs	r3, r3, #16
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800407c:	4b4d      	ldr	r3, [pc, #308]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004082:	0f1b      	lsrs	r3, r3, #28
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	019a      	lsls	r2, r3, #6
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	061b      	lsls	r3, r3, #24
 800409c:	431a      	orrs	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	071b      	lsls	r3, r3, #28
 80040a2:	4944      	ldr	r1, [pc, #272]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040aa:	4b42      	ldr	r3, [pc, #264]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040b0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b8:	3b01      	subs	r3, #1
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	493d      	ldr	r1, [pc, #244]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d022      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040d8:	d11d      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040da:	4b36      	ldr	r3, [pc, #216]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e0:	0e1b      	lsrs	r3, r3, #24
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040e8:	4b32      	ldr	r3, [pc, #200]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ee:	0f1b      	lsrs	r3, r3, #28
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	019a      	lsls	r2, r3, #6
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	041b      	lsls	r3, r3, #16
 8004102:	431a      	orrs	r2, r3
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	061b      	lsls	r3, r3, #24
 8004108:	431a      	orrs	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	071b      	lsls	r3, r3, #28
 800410e:	4929      	ldr	r1, [pc, #164]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d028      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004122:	4b24      	ldr	r3, [pc, #144]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004128:	0e1b      	lsrs	r3, r3, #24
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004130:	4b20      	ldr	r3, [pc, #128]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004136:	0c1b      	lsrs	r3, r3, #16
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	019a      	lsls	r2, r3, #6
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	041b      	lsls	r3, r3, #16
 8004148:	431a      	orrs	r2, r3
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	061b      	lsls	r3, r3, #24
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	071b      	lsls	r3, r3, #28
 8004156:	4917      	ldr	r1, [pc, #92]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800415e:	4b15      	ldr	r3, [pc, #84]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004164:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416c:	4911      	ldr	r1, [pc, #68]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004174:	4b0f      	ldr	r3, [pc, #60]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a0e      	ldr	r2, [pc, #56]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800417a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800417e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004180:	f7fd f9ee 	bl	8001560 <HAL_GetTick>
 8004184:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004186:	e008      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004188:	f7fd f9ea 	bl	8001560 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	@ 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e007      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800419a:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041a6:	d1ef      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3720      	adds	r7, #32
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40023800 	.word	0x40023800

080041b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e049      	b.n	800425e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f841 	bl	8004266 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	4619      	mov	r1, r3
 80041f6:	4610      	mov	r0, r2
 80041f8:	f000 f9e8 	bl	80045cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	d001      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e054      	b.n	800433e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a26      	ldr	r2, [pc, #152]	@ (800434c <HAL_TIM_Base_Start_IT+0xd0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d022      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x80>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042be:	d01d      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x80>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a22      	ldr	r2, [pc, #136]	@ (8004350 <HAL_TIM_Base_Start_IT+0xd4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d018      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x80>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a21      	ldr	r2, [pc, #132]	@ (8004354 <HAL_TIM_Base_Start_IT+0xd8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d013      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x80>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004358 <HAL_TIM_Base_Start_IT+0xdc>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00e      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x80>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1e      	ldr	r2, [pc, #120]	@ (800435c <HAL_TIM_Base_Start_IT+0xe0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d009      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x80>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004360 <HAL_TIM_Base_Start_IT+0xe4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d004      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x80>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004364 <HAL_TIM_Base_Start_IT+0xe8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d115      	bne.n	8004328 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	4b19      	ldr	r3, [pc, #100]	@ (8004368 <HAL_TIM_Base_Start_IT+0xec>)
 8004304:	4013      	ands	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b06      	cmp	r3, #6
 800430c:	d015      	beq.n	800433a <HAL_TIM_Base_Start_IT+0xbe>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004314:	d011      	beq.n	800433a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0201 	orr.w	r2, r2, #1
 8004324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004326:	e008      	b.n	800433a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	e000      	b.n	800433c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40010000 	.word	0x40010000
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800
 8004358:	40000c00 	.word	0x40000c00
 800435c:	40010400 	.word	0x40010400
 8004360:	40014000 	.word	0x40014000
 8004364:	40001800 	.word	0x40001800
 8004368:	00010007 	.word	0x00010007

0800436c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d020      	beq.n	80043d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01b      	beq.n	80043d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0202 	mvn.w	r2, #2
 80043a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f8e9 	bl	800458e <HAL_TIM_IC_CaptureCallback>
 80043bc:	e005      	b.n	80043ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f8db 	bl	800457a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f8ec 	bl	80045a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d020      	beq.n	800441c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01b      	beq.n	800441c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0204 	mvn.w	r2, #4
 80043ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f8c3 	bl	800458e <HAL_TIM_IC_CaptureCallback>
 8004408:	e005      	b.n	8004416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f8b5 	bl	800457a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f8c6 	bl	80045a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d020      	beq.n	8004468 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01b      	beq.n	8004468 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0208 	mvn.w	r2, #8
 8004438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2204      	movs	r2, #4
 800443e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f89d 	bl	800458e <HAL_TIM_IC_CaptureCallback>
 8004454:	e005      	b.n	8004462 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f88f 	bl	800457a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f8a0 	bl	80045a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b00      	cmp	r3, #0
 8004470:	d020      	beq.n	80044b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01b      	beq.n	80044b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0210 	mvn.w	r2, #16
 8004484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2208      	movs	r2, #8
 800448a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f877 	bl	800458e <HAL_TIM_IC_CaptureCallback>
 80044a0:	e005      	b.n	80044ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f869 	bl	800457a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f87a 	bl	80045a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00c      	beq.n	80044d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d007      	beq.n	80044d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0201 	mvn.w	r2, #1
 80044d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fc fcea 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00c      	beq.n	8004506 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80044fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f919 	bl	8004738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00c      	beq.n	800452a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f911 	bl	800474c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00c      	beq.n	800454e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f834 	bl	80045b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00c      	beq.n	8004572 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f06f 0220 	mvn.w	r2, #32
 800456a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f8d9 	bl	8004724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
	...

080045cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a46      	ldr	r2, [pc, #280]	@ (80046f8 <TIM_Base_SetConfig+0x12c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d013      	beq.n	800460c <TIM_Base_SetConfig+0x40>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ea:	d00f      	beq.n	800460c <TIM_Base_SetConfig+0x40>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a43      	ldr	r2, [pc, #268]	@ (80046fc <TIM_Base_SetConfig+0x130>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00b      	beq.n	800460c <TIM_Base_SetConfig+0x40>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a42      	ldr	r2, [pc, #264]	@ (8004700 <TIM_Base_SetConfig+0x134>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d007      	beq.n	800460c <TIM_Base_SetConfig+0x40>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a41      	ldr	r2, [pc, #260]	@ (8004704 <TIM_Base_SetConfig+0x138>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <TIM_Base_SetConfig+0x40>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a40      	ldr	r2, [pc, #256]	@ (8004708 <TIM_Base_SetConfig+0x13c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d108      	bne.n	800461e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a35      	ldr	r2, [pc, #212]	@ (80046f8 <TIM_Base_SetConfig+0x12c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d02b      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800462c:	d027      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a32      	ldr	r2, [pc, #200]	@ (80046fc <TIM_Base_SetConfig+0x130>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d023      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a31      	ldr	r2, [pc, #196]	@ (8004700 <TIM_Base_SetConfig+0x134>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d01f      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a30      	ldr	r2, [pc, #192]	@ (8004704 <TIM_Base_SetConfig+0x138>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d01b      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a2f      	ldr	r2, [pc, #188]	@ (8004708 <TIM_Base_SetConfig+0x13c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d017      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a2e      	ldr	r2, [pc, #184]	@ (800470c <TIM_Base_SetConfig+0x140>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a2d      	ldr	r2, [pc, #180]	@ (8004710 <TIM_Base_SetConfig+0x144>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00f      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a2c      	ldr	r2, [pc, #176]	@ (8004714 <TIM_Base_SetConfig+0x148>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00b      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a2b      	ldr	r2, [pc, #172]	@ (8004718 <TIM_Base_SetConfig+0x14c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d007      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a2a      	ldr	r2, [pc, #168]	@ (800471c <TIM_Base_SetConfig+0x150>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d003      	beq.n	800467e <TIM_Base_SetConfig+0xb2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a29      	ldr	r2, [pc, #164]	@ (8004720 <TIM_Base_SetConfig+0x154>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d108      	bne.n	8004690 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a10      	ldr	r2, [pc, #64]	@ (80046f8 <TIM_Base_SetConfig+0x12c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_Base_SetConfig+0xf8>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a12      	ldr	r2, [pc, #72]	@ (8004708 <TIM_Base_SetConfig+0x13c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d103      	bne.n	80046cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d105      	bne.n	80046ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	f023 0201 	bic.w	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	611a      	str	r2, [r3, #16]
  }
}
 80046ea:	bf00      	nop
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40010000 	.word	0x40010000
 80046fc:	40000400 	.word	0x40000400
 8004700:	40000800 	.word	0x40000800
 8004704:	40000c00 	.word	0x40000c00
 8004708:	40010400 	.word	0x40010400
 800470c:	40014000 	.word	0x40014000
 8004710:	40014400 	.word	0x40014400
 8004714:	40014800 	.word	0x40014800
 8004718:	40001800 	.word	0x40001800
 800471c:	40001c00 	.word	0x40001c00
 8004720:	40002000 	.word	0x40002000

08004724 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e040      	b.n	80047f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fc fddc 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2224      	movs	r2, #36	@ 0x24
 800478c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0201 	bic.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fbde 	bl	8004f68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f977 	bl	8004aa0 <UART_SetConfig>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e01b      	b.n	80047f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fc5d 	bl	80050ac <UART_CheckIdleState>
 80047f2:	4603      	mov	r3, r0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08a      	sub	sp, #40	@ 0x28
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004810:	2b20      	cmp	r3, #32
 8004812:	d177      	bne.n	8004904 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <HAL_UART_Transmit+0x24>
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e070      	b.n	8004906 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2221      	movs	r2, #33	@ 0x21
 8004830:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004832:	f7fc fe95 	bl	8001560 <HAL_GetTick>
 8004836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	88fa      	ldrh	r2, [r7, #6]
 800483c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	88fa      	ldrh	r2, [r7, #6]
 8004844:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004850:	d108      	bne.n	8004864 <HAL_UART_Transmit+0x68>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d104      	bne.n	8004864 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	e003      	b.n	800486c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004868:	2300      	movs	r3, #0
 800486a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800486c:	e02f      	b.n	80048ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2200      	movs	r2, #0
 8004876:	2180      	movs	r1, #128	@ 0x80
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fcbf 	bl	80051fc <UART_WaitOnFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d004      	beq.n	800488e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2220      	movs	r2, #32
 8004888:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e03b      	b.n	8004906 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10b      	bne.n	80048ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	3302      	adds	r3, #2
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	e007      	b.n	80048bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	781a      	ldrb	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	3301      	adds	r3, #1
 80048ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1c9      	bne.n	800486e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2200      	movs	r2, #0
 80048e2:	2140      	movs	r1, #64	@ 0x40
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fc89 	bl	80051fc <UART_WaitOnFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2220      	movs	r2, #32
 80048f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e005      	b.n	8004906 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	e000      	b.n	8004906 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004904:	2302      	movs	r3, #2
  }
}
 8004906:	4618      	mov	r0, r3
 8004908:	3720      	adds	r7, #32
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b08a      	sub	sp, #40	@ 0x28
 8004912:	af02      	add	r7, sp, #8
 8004914:	60f8      	str	r0, [r7, #12]
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	603b      	str	r3, [r7, #0]
 800491a:	4613      	mov	r3, r2
 800491c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004924:	2b20      	cmp	r3, #32
 8004926:	f040 80b5 	bne.w	8004a94 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_UART_Receive+0x28>
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e0ad      	b.n	8004a96 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2222      	movs	r2, #34	@ 0x22
 8004946:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004950:	f7fc fe06 	bl	8001560 <HAL_GetTick>
 8004954:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	88fa      	ldrh	r2, [r7, #6]
 800495a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	88fa      	ldrh	r2, [r7, #6]
 8004962:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800496e:	d10e      	bne.n	800498e <HAL_UART_Receive+0x80>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d105      	bne.n	8004984 <HAL_UART_Receive+0x76>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800497e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004982:	e02d      	b.n	80049e0 <HAL_UART_Receive+0xd2>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	22ff      	movs	r2, #255	@ 0xff
 8004988:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800498c:	e028      	b.n	80049e0 <HAL_UART_Receive+0xd2>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10d      	bne.n	80049b2 <HAL_UART_Receive+0xa4>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d104      	bne.n	80049a8 <HAL_UART_Receive+0x9a>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	22ff      	movs	r2, #255	@ 0xff
 80049a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80049a6:	e01b      	b.n	80049e0 <HAL_UART_Receive+0xd2>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	227f      	movs	r2, #127	@ 0x7f
 80049ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80049b0:	e016      	b.n	80049e0 <HAL_UART_Receive+0xd2>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049ba:	d10d      	bne.n	80049d8 <HAL_UART_Receive+0xca>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d104      	bne.n	80049ce <HAL_UART_Receive+0xc0>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	227f      	movs	r2, #127	@ 0x7f
 80049c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80049cc:	e008      	b.n	80049e0 <HAL_UART_Receive+0xd2>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	223f      	movs	r2, #63	@ 0x3f
 80049d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80049d6:	e003      	b.n	80049e0 <HAL_UART_Receive+0xd2>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80049e6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049f0:	d108      	bne.n	8004a04 <HAL_UART_Receive+0xf6>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d104      	bne.n	8004a04 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	e003      	b.n	8004a0c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004a0c:	e036      	b.n	8004a7c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2200      	movs	r2, #0
 8004a16:	2120      	movs	r1, #32
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 fbef 	bl	80051fc <UART_WaitOnFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e032      	b.n	8004a96 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10c      	bne.n	8004a50 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	8a7b      	ldrh	r3, [r7, #18]
 8004a40:	4013      	ands	r3, r2
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	3302      	adds	r3, #2
 8004a4c:	61bb      	str	r3, [r7, #24]
 8004a4e:	e00c      	b.n	8004a6a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	8a7b      	ldrh	r3, [r7, #18]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	3301      	adds	r3, #1
 8004a68:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1c2      	bne.n	8004a0e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	e000      	b.n	8004a96 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004a94:	2302      	movs	r3, #2
  }
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4ba6      	ldr	r3, [pc, #664]	@ (8004d64 <UART_SetConfig+0x2c4>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	6979      	ldr	r1, [r7, #20]
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a94      	ldr	r2, [pc, #592]	@ (8004d68 <UART_SetConfig+0x2c8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d120      	bne.n	8004b5e <UART_SetConfig+0xbe>
 8004b1c:	4b93      	ldr	r3, [pc, #588]	@ (8004d6c <UART_SetConfig+0x2cc>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d816      	bhi.n	8004b58 <UART_SetConfig+0xb8>
 8004b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b30 <UART_SetConfig+0x90>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004b41 	.word	0x08004b41
 8004b34:	08004b4d 	.word	0x08004b4d
 8004b38:	08004b47 	.word	0x08004b47
 8004b3c:	08004b53 	.word	0x08004b53
 8004b40:	2301      	movs	r3, #1
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e150      	b.n	8004de8 <UART_SetConfig+0x348>
 8004b46:	2302      	movs	r3, #2
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e14d      	b.n	8004de8 <UART_SetConfig+0x348>
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e14a      	b.n	8004de8 <UART_SetConfig+0x348>
 8004b52:	2308      	movs	r3, #8
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e147      	b.n	8004de8 <UART_SetConfig+0x348>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e144      	b.n	8004de8 <UART_SetConfig+0x348>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a83      	ldr	r2, [pc, #524]	@ (8004d70 <UART_SetConfig+0x2d0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d132      	bne.n	8004bce <UART_SetConfig+0x12e>
 8004b68:	4b80      	ldr	r3, [pc, #512]	@ (8004d6c <UART_SetConfig+0x2cc>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6e:	f003 030c 	and.w	r3, r3, #12
 8004b72:	2b0c      	cmp	r3, #12
 8004b74:	d828      	bhi.n	8004bc8 <UART_SetConfig+0x128>
 8004b76:	a201      	add	r2, pc, #4	@ (adr r2, 8004b7c <UART_SetConfig+0xdc>)
 8004b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7c:	08004bb1 	.word	0x08004bb1
 8004b80:	08004bc9 	.word	0x08004bc9
 8004b84:	08004bc9 	.word	0x08004bc9
 8004b88:	08004bc9 	.word	0x08004bc9
 8004b8c:	08004bbd 	.word	0x08004bbd
 8004b90:	08004bc9 	.word	0x08004bc9
 8004b94:	08004bc9 	.word	0x08004bc9
 8004b98:	08004bc9 	.word	0x08004bc9
 8004b9c:	08004bb7 	.word	0x08004bb7
 8004ba0:	08004bc9 	.word	0x08004bc9
 8004ba4:	08004bc9 	.word	0x08004bc9
 8004ba8:	08004bc9 	.word	0x08004bc9
 8004bac:	08004bc3 	.word	0x08004bc3
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e118      	b.n	8004de8 <UART_SetConfig+0x348>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	77fb      	strb	r3, [r7, #31]
 8004bba:	e115      	b.n	8004de8 <UART_SetConfig+0x348>
 8004bbc:	2304      	movs	r3, #4
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	e112      	b.n	8004de8 <UART_SetConfig+0x348>
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	77fb      	strb	r3, [r7, #31]
 8004bc6:	e10f      	b.n	8004de8 <UART_SetConfig+0x348>
 8004bc8:	2310      	movs	r3, #16
 8004bca:	77fb      	strb	r3, [r7, #31]
 8004bcc:	e10c      	b.n	8004de8 <UART_SetConfig+0x348>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a68      	ldr	r2, [pc, #416]	@ (8004d74 <UART_SetConfig+0x2d4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d120      	bne.n	8004c1a <UART_SetConfig+0x17a>
 8004bd8:	4b64      	ldr	r3, [pc, #400]	@ (8004d6c <UART_SetConfig+0x2cc>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bde:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004be2:	2b30      	cmp	r3, #48	@ 0x30
 8004be4:	d013      	beq.n	8004c0e <UART_SetConfig+0x16e>
 8004be6:	2b30      	cmp	r3, #48	@ 0x30
 8004be8:	d814      	bhi.n	8004c14 <UART_SetConfig+0x174>
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d009      	beq.n	8004c02 <UART_SetConfig+0x162>
 8004bee:	2b20      	cmp	r3, #32
 8004bf0:	d810      	bhi.n	8004c14 <UART_SetConfig+0x174>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <UART_SetConfig+0x15c>
 8004bf6:	2b10      	cmp	r3, #16
 8004bf8:	d006      	beq.n	8004c08 <UART_SetConfig+0x168>
 8004bfa:	e00b      	b.n	8004c14 <UART_SetConfig+0x174>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e0f2      	b.n	8004de8 <UART_SetConfig+0x348>
 8004c02:	2302      	movs	r3, #2
 8004c04:	77fb      	strb	r3, [r7, #31]
 8004c06:	e0ef      	b.n	8004de8 <UART_SetConfig+0x348>
 8004c08:	2304      	movs	r3, #4
 8004c0a:	77fb      	strb	r3, [r7, #31]
 8004c0c:	e0ec      	b.n	8004de8 <UART_SetConfig+0x348>
 8004c0e:	2308      	movs	r3, #8
 8004c10:	77fb      	strb	r3, [r7, #31]
 8004c12:	e0e9      	b.n	8004de8 <UART_SetConfig+0x348>
 8004c14:	2310      	movs	r3, #16
 8004c16:	77fb      	strb	r3, [r7, #31]
 8004c18:	e0e6      	b.n	8004de8 <UART_SetConfig+0x348>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a56      	ldr	r2, [pc, #344]	@ (8004d78 <UART_SetConfig+0x2d8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d120      	bne.n	8004c66 <UART_SetConfig+0x1c6>
 8004c24:	4b51      	ldr	r3, [pc, #324]	@ (8004d6c <UART_SetConfig+0x2cc>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c30:	d013      	beq.n	8004c5a <UART_SetConfig+0x1ba>
 8004c32:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c34:	d814      	bhi.n	8004c60 <UART_SetConfig+0x1c0>
 8004c36:	2b80      	cmp	r3, #128	@ 0x80
 8004c38:	d009      	beq.n	8004c4e <UART_SetConfig+0x1ae>
 8004c3a:	2b80      	cmp	r3, #128	@ 0x80
 8004c3c:	d810      	bhi.n	8004c60 <UART_SetConfig+0x1c0>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <UART_SetConfig+0x1a8>
 8004c42:	2b40      	cmp	r3, #64	@ 0x40
 8004c44:	d006      	beq.n	8004c54 <UART_SetConfig+0x1b4>
 8004c46:	e00b      	b.n	8004c60 <UART_SetConfig+0x1c0>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e0cc      	b.n	8004de8 <UART_SetConfig+0x348>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	77fb      	strb	r3, [r7, #31]
 8004c52:	e0c9      	b.n	8004de8 <UART_SetConfig+0x348>
 8004c54:	2304      	movs	r3, #4
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e0c6      	b.n	8004de8 <UART_SetConfig+0x348>
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	77fb      	strb	r3, [r7, #31]
 8004c5e:	e0c3      	b.n	8004de8 <UART_SetConfig+0x348>
 8004c60:	2310      	movs	r3, #16
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e0c0      	b.n	8004de8 <UART_SetConfig+0x348>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a44      	ldr	r2, [pc, #272]	@ (8004d7c <UART_SetConfig+0x2dc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d125      	bne.n	8004cbc <UART_SetConfig+0x21c>
 8004c70:	4b3e      	ldr	r3, [pc, #248]	@ (8004d6c <UART_SetConfig+0x2cc>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c7e:	d017      	beq.n	8004cb0 <UART_SetConfig+0x210>
 8004c80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c84:	d817      	bhi.n	8004cb6 <UART_SetConfig+0x216>
 8004c86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c8a:	d00b      	beq.n	8004ca4 <UART_SetConfig+0x204>
 8004c8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c90:	d811      	bhi.n	8004cb6 <UART_SetConfig+0x216>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <UART_SetConfig+0x1fe>
 8004c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c9a:	d006      	beq.n	8004caa <UART_SetConfig+0x20a>
 8004c9c:	e00b      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	77fb      	strb	r3, [r7, #31]
 8004ca2:	e0a1      	b.n	8004de8 <UART_SetConfig+0x348>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	77fb      	strb	r3, [r7, #31]
 8004ca8:	e09e      	b.n	8004de8 <UART_SetConfig+0x348>
 8004caa:	2304      	movs	r3, #4
 8004cac:	77fb      	strb	r3, [r7, #31]
 8004cae:	e09b      	b.n	8004de8 <UART_SetConfig+0x348>
 8004cb0:	2308      	movs	r3, #8
 8004cb2:	77fb      	strb	r3, [r7, #31]
 8004cb4:	e098      	b.n	8004de8 <UART_SetConfig+0x348>
 8004cb6:	2310      	movs	r3, #16
 8004cb8:	77fb      	strb	r3, [r7, #31]
 8004cba:	e095      	b.n	8004de8 <UART_SetConfig+0x348>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a2f      	ldr	r2, [pc, #188]	@ (8004d80 <UART_SetConfig+0x2e0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d125      	bne.n	8004d12 <UART_SetConfig+0x272>
 8004cc6:	4b29      	ldr	r3, [pc, #164]	@ (8004d6c <UART_SetConfig+0x2cc>)
 8004cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ccc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004cd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cd4:	d017      	beq.n	8004d06 <UART_SetConfig+0x266>
 8004cd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cda:	d817      	bhi.n	8004d0c <UART_SetConfig+0x26c>
 8004cdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ce0:	d00b      	beq.n	8004cfa <UART_SetConfig+0x25a>
 8004ce2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ce6:	d811      	bhi.n	8004d0c <UART_SetConfig+0x26c>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <UART_SetConfig+0x254>
 8004cec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cf0:	d006      	beq.n	8004d00 <UART_SetConfig+0x260>
 8004cf2:	e00b      	b.n	8004d0c <UART_SetConfig+0x26c>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	77fb      	strb	r3, [r7, #31]
 8004cf8:	e076      	b.n	8004de8 <UART_SetConfig+0x348>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	77fb      	strb	r3, [r7, #31]
 8004cfe:	e073      	b.n	8004de8 <UART_SetConfig+0x348>
 8004d00:	2304      	movs	r3, #4
 8004d02:	77fb      	strb	r3, [r7, #31]
 8004d04:	e070      	b.n	8004de8 <UART_SetConfig+0x348>
 8004d06:	2308      	movs	r3, #8
 8004d08:	77fb      	strb	r3, [r7, #31]
 8004d0a:	e06d      	b.n	8004de8 <UART_SetConfig+0x348>
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e06a      	b.n	8004de8 <UART_SetConfig+0x348>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a1b      	ldr	r2, [pc, #108]	@ (8004d84 <UART_SetConfig+0x2e4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d138      	bne.n	8004d8e <UART_SetConfig+0x2ee>
 8004d1c:	4b13      	ldr	r3, [pc, #76]	@ (8004d6c <UART_SetConfig+0x2cc>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d22:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004d26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d2a:	d017      	beq.n	8004d5c <UART_SetConfig+0x2bc>
 8004d2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d30:	d82a      	bhi.n	8004d88 <UART_SetConfig+0x2e8>
 8004d32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d36:	d00b      	beq.n	8004d50 <UART_SetConfig+0x2b0>
 8004d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d3c:	d824      	bhi.n	8004d88 <UART_SetConfig+0x2e8>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <UART_SetConfig+0x2aa>
 8004d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d46:	d006      	beq.n	8004d56 <UART_SetConfig+0x2b6>
 8004d48:	e01e      	b.n	8004d88 <UART_SetConfig+0x2e8>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	e04b      	b.n	8004de8 <UART_SetConfig+0x348>
 8004d50:	2302      	movs	r3, #2
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e048      	b.n	8004de8 <UART_SetConfig+0x348>
 8004d56:	2304      	movs	r3, #4
 8004d58:	77fb      	strb	r3, [r7, #31]
 8004d5a:	e045      	b.n	8004de8 <UART_SetConfig+0x348>
 8004d5c:	2308      	movs	r3, #8
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e042      	b.n	8004de8 <UART_SetConfig+0x348>
 8004d62:	bf00      	nop
 8004d64:	efff69f3 	.word	0xefff69f3
 8004d68:	40011000 	.word	0x40011000
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	40004400 	.word	0x40004400
 8004d74:	40004800 	.word	0x40004800
 8004d78:	40004c00 	.word	0x40004c00
 8004d7c:	40005000 	.word	0x40005000
 8004d80:	40011400 	.word	0x40011400
 8004d84:	40007800 	.word	0x40007800
 8004d88:	2310      	movs	r3, #16
 8004d8a:	77fb      	strb	r3, [r7, #31]
 8004d8c:	e02c      	b.n	8004de8 <UART_SetConfig+0x348>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a72      	ldr	r2, [pc, #456]	@ (8004f5c <UART_SetConfig+0x4bc>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d125      	bne.n	8004de4 <UART_SetConfig+0x344>
 8004d98:	4b71      	ldr	r3, [pc, #452]	@ (8004f60 <UART_SetConfig+0x4c0>)
 8004d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d9e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004da2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004da6:	d017      	beq.n	8004dd8 <UART_SetConfig+0x338>
 8004da8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004dac:	d817      	bhi.n	8004dde <UART_SetConfig+0x33e>
 8004dae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004db2:	d00b      	beq.n	8004dcc <UART_SetConfig+0x32c>
 8004db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004db8:	d811      	bhi.n	8004dde <UART_SetConfig+0x33e>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <UART_SetConfig+0x326>
 8004dbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dc2:	d006      	beq.n	8004dd2 <UART_SetConfig+0x332>
 8004dc4:	e00b      	b.n	8004dde <UART_SetConfig+0x33e>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	77fb      	strb	r3, [r7, #31]
 8004dca:	e00d      	b.n	8004de8 <UART_SetConfig+0x348>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	77fb      	strb	r3, [r7, #31]
 8004dd0:	e00a      	b.n	8004de8 <UART_SetConfig+0x348>
 8004dd2:	2304      	movs	r3, #4
 8004dd4:	77fb      	strb	r3, [r7, #31]
 8004dd6:	e007      	b.n	8004de8 <UART_SetConfig+0x348>
 8004dd8:	2308      	movs	r3, #8
 8004dda:	77fb      	strb	r3, [r7, #31]
 8004ddc:	e004      	b.n	8004de8 <UART_SetConfig+0x348>
 8004dde:	2310      	movs	r3, #16
 8004de0:	77fb      	strb	r3, [r7, #31]
 8004de2:	e001      	b.n	8004de8 <UART_SetConfig+0x348>
 8004de4:	2310      	movs	r3, #16
 8004de6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004df0:	d15b      	bne.n	8004eaa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004df2:	7ffb      	ldrb	r3, [r7, #31]
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d828      	bhi.n	8004e4a <UART_SetConfig+0x3aa>
 8004df8:	a201      	add	r2, pc, #4	@ (adr r2, 8004e00 <UART_SetConfig+0x360>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e2d 	.word	0x08004e2d
 8004e08:	08004e35 	.word	0x08004e35
 8004e0c:	08004e4b 	.word	0x08004e4b
 8004e10:	08004e3b 	.word	0x08004e3b
 8004e14:	08004e4b 	.word	0x08004e4b
 8004e18:	08004e4b 	.word	0x08004e4b
 8004e1c:	08004e4b 	.word	0x08004e4b
 8004e20:	08004e43 	.word	0x08004e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7fe fd46 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8004e28:	61b8      	str	r0, [r7, #24]
        break;
 8004e2a:	e013      	b.n	8004e54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e2c:	f7fe fd56 	bl	80038dc <HAL_RCC_GetPCLK2Freq>
 8004e30:	61b8      	str	r0, [r7, #24]
        break;
 8004e32:	e00f      	b.n	8004e54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e34:	4b4b      	ldr	r3, [pc, #300]	@ (8004f64 <UART_SetConfig+0x4c4>)
 8004e36:	61bb      	str	r3, [r7, #24]
        break;
 8004e38:	e00c      	b.n	8004e54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3a:	f7fe fc29 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8004e3e:	61b8      	str	r0, [r7, #24]
        break;
 8004e40:	e008      	b.n	8004e54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e46:	61bb      	str	r3, [r7, #24]
        break;
 8004e48:	e004      	b.n	8004e54 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	77bb      	strb	r3, [r7, #30]
        break;
 8004e52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d074      	beq.n	8004f44 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	005a      	lsls	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	441a      	add	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b0f      	cmp	r3, #15
 8004e74:	d916      	bls.n	8004ea4 <UART_SetConfig+0x404>
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e7c:	d212      	bcs.n	8004ea4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	f023 030f 	bic.w	r3, r3, #15
 8004e86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	085b      	lsrs	r3, r3, #1
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	89fb      	ldrh	r3, [r7, #14]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	89fa      	ldrh	r2, [r7, #14]
 8004ea0:	60da      	str	r2, [r3, #12]
 8004ea2:	e04f      	b.n	8004f44 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	77bb      	strb	r3, [r7, #30]
 8004ea8:	e04c      	b.n	8004f44 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eaa:	7ffb      	ldrb	r3, [r7, #31]
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d828      	bhi.n	8004f02 <UART_SetConfig+0x462>
 8004eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb8 <UART_SetConfig+0x418>)
 8004eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004edd 	.word	0x08004edd
 8004ebc:	08004ee5 	.word	0x08004ee5
 8004ec0:	08004eed 	.word	0x08004eed
 8004ec4:	08004f03 	.word	0x08004f03
 8004ec8:	08004ef3 	.word	0x08004ef3
 8004ecc:	08004f03 	.word	0x08004f03
 8004ed0:	08004f03 	.word	0x08004f03
 8004ed4:	08004f03 	.word	0x08004f03
 8004ed8:	08004efb 	.word	0x08004efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004edc:	f7fe fcea 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8004ee0:	61b8      	str	r0, [r7, #24]
        break;
 8004ee2:	e013      	b.n	8004f0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ee4:	f7fe fcfa 	bl	80038dc <HAL_RCC_GetPCLK2Freq>
 8004ee8:	61b8      	str	r0, [r7, #24]
        break;
 8004eea:	e00f      	b.n	8004f0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eec:	4b1d      	ldr	r3, [pc, #116]	@ (8004f64 <UART_SetConfig+0x4c4>)
 8004eee:	61bb      	str	r3, [r7, #24]
        break;
 8004ef0:	e00c      	b.n	8004f0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ef2:	f7fe fbcd 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8004ef6:	61b8      	str	r0, [r7, #24]
        break;
 8004ef8:	e008      	b.n	8004f0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004efe:	61bb      	str	r3, [r7, #24]
        break;
 8004f00:	e004      	b.n	8004f0c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	77bb      	strb	r3, [r7, #30]
        break;
 8004f0a:	bf00      	nop
    }

    if (pclk != 0U)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d018      	beq.n	8004f44 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	085a      	lsrs	r2, r3, #1
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	441a      	add	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b0f      	cmp	r3, #15
 8004f2a:	d909      	bls.n	8004f40 <UART_SetConfig+0x4a0>
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f32:	d205      	bcs.n	8004f40 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	60da      	str	r2, [r3, #12]
 8004f3e:	e001      	b.n	8004f44 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f50:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3720      	adds	r7, #32
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40007c00 	.word	0x40007c00
 8004f60:	40023800 	.word	0x40023800
 8004f64:	00f42400 	.word	0x00f42400

08004f68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01a      	beq.n	800507e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005062:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005066:	d10a      	bne.n	800507e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	605a      	str	r2, [r3, #4]
  }
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b098      	sub	sp, #96	@ 0x60
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050bc:	f7fc fa50 	bl	8001560 <HAL_GetTick>
 80050c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d12e      	bne.n	800512e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d8:	2200      	movs	r2, #0
 80050da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f88c 	bl	80051fc <UART_WaitOnFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d021      	beq.n	800512e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005108:	647b      	str	r3, [r7, #68]	@ 0x44
 800510a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800510e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e6      	bne.n	80050ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e062      	b.n	80051f4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b04      	cmp	r3, #4
 800513a:	d149      	bne.n	80051d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800513c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005144:	2200      	movs	r2, #0
 8005146:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f856 	bl	80051fc <UART_WaitOnFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d03c      	beq.n	80051d0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	623b      	str	r3, [r7, #32]
   return(result);
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800516a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005174:	633b      	str	r3, [r7, #48]	@ 0x30
 8005176:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800517a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e6      	bne.n	8005156 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3308      	adds	r3, #8
 800518e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	e853 3f00 	ldrex	r3, [r3]
 8005196:	60fb      	str	r3, [r7, #12]
   return(result);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0301 	bic.w	r3, r3, #1
 800519e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3308      	adds	r3, #8
 80051a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051a8:	61fa      	str	r2, [r7, #28]
 80051aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ac:	69b9      	ldr	r1, [r7, #24]
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	e841 2300 	strex	r3, r2, [r1]
 80051b4:	617b      	str	r3, [r7, #20]
   return(result);
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e5      	bne.n	8005188 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e011      	b.n	80051f4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2220      	movs	r2, #32
 80051da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3758      	adds	r7, #88	@ 0x58
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	4613      	mov	r3, r2
 800520a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520c:	e04f      	b.n	80052ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005214:	d04b      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005216:	f7fc f9a3 	bl	8001560 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	429a      	cmp	r2, r3
 8005224:	d302      	bcc.n	800522c <UART_WaitOnFlagUntilTimeout+0x30>
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e04e      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b00      	cmp	r3, #0
 800523c:	d037      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b80      	cmp	r3, #128	@ 0x80
 8005242:	d034      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b40      	cmp	r3, #64	@ 0x40
 8005248:	d031      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b08      	cmp	r3, #8
 8005256:	d110      	bne.n	800527a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2208      	movs	r2, #8
 800525e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f838 	bl	80052d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2208      	movs	r2, #8
 800526a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e029      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005288:	d111      	bne.n	80052ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005292:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f81e 	bl	80052d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e00f      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4013      	ands	r3, r2
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	bf0c      	ite	eq
 80052be:	2301      	moveq	r3, #1
 80052c0:	2300      	movne	r3, #0
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	79fb      	ldrb	r3, [r7, #7]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d0a0      	beq.n	800520e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b095      	sub	sp, #84	@ 0x54
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80052fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005302:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800530a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e6      	bne.n	80052de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3308      	adds	r3, #8
 8005316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f023 0301 	bic.w	r3, r3, #1
 8005326:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3308      	adds	r3, #8
 800532e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005330:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005332:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e5      	bne.n	8005310 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005348:	2b01      	cmp	r3, #1
 800534a:	d118      	bne.n	800537e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	60bb      	str	r3, [r7, #8]
   return(result);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f023 0310 	bic.w	r3, r3, #16
 8005360:	647b      	str	r3, [r7, #68]	@ 0x44
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800536a:	61bb      	str	r3, [r7, #24]
 800536c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6979      	ldr	r1, [r7, #20]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	613b      	str	r3, [r7, #16]
   return(result);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e6      	bne.n	800534c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005392:	bf00      	nop
 8005394:	3754      	adds	r7, #84	@ 0x54
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800539e:	b480      	push	{r7}
 80053a0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80053a2:	bf00      	nop
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053b2:	f3ef 8305 	mrs	r3, IPSR
 80053b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80053b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10f      	bne.n	80053de <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053be:	f3ef 8310 	mrs	r3, PRIMASK
 80053c2:	607b      	str	r3, [r7, #4]
  return(result);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d105      	bne.n	80053d6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053ca:	f3ef 8311 	mrs	r3, BASEPRI
 80053ce:	603b      	str	r3, [r7, #0]
  return(result);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d007      	beq.n	80053e6 <osKernelInitialize+0x3a>
 80053d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005410 <osKernelInitialize+0x64>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d103      	bne.n	80053e6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80053de:	f06f 0305 	mvn.w	r3, #5
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	e00c      	b.n	8005400 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005410 <osKernelInitialize+0x64>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d105      	bne.n	80053fa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80053ee:	4b08      	ldr	r3, [pc, #32]	@ (8005410 <osKernelInitialize+0x64>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	e002      	b.n	8005400 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80053fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005400:	68fb      	ldr	r3, [r7, #12]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	20000250 	.word	0x20000250

08005414 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800541a:	f3ef 8305 	mrs	r3, IPSR
 800541e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005420:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10f      	bne.n	8005446 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005426:	f3ef 8310 	mrs	r3, PRIMASK
 800542a:	607b      	str	r3, [r7, #4]
  return(result);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d105      	bne.n	800543e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005432:	f3ef 8311 	mrs	r3, BASEPRI
 8005436:	603b      	str	r3, [r7, #0]
  return(result);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d007      	beq.n	800544e <osKernelStart+0x3a>
 800543e:	4b0f      	ldr	r3, [pc, #60]	@ (800547c <osKernelStart+0x68>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d103      	bne.n	800544e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005446:	f06f 0305 	mvn.w	r3, #5
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	e010      	b.n	8005470 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800544e:	4b0b      	ldr	r3, [pc, #44]	@ (800547c <osKernelStart+0x68>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d109      	bne.n	800546a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005456:	f7ff ffa2 	bl	800539e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800545a:	4b08      	ldr	r3, [pc, #32]	@ (800547c <osKernelStart+0x68>)
 800545c:	2202      	movs	r2, #2
 800545e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005460:	f001 f864 	bl	800652c <vTaskStartScheduler>
      stat = osOK;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	e002      	b.n	8005470 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800546a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800546e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005470:	68fb      	ldr	r3, [r7, #12]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20000250 	.word	0x20000250

08005480 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b090      	sub	sp, #64	@ 0x40
 8005484:	af04      	add	r7, sp, #16
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800548c:	2300      	movs	r3, #0
 800548e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005490:	f3ef 8305 	mrs	r3, IPSR
 8005494:	61fb      	str	r3, [r7, #28]
  return(result);
 8005496:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005498:	2b00      	cmp	r3, #0
 800549a:	f040 808f 	bne.w	80055bc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800549e:	f3ef 8310 	mrs	r3, PRIMASK
 80054a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d105      	bne.n	80054b6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054aa:	f3ef 8311 	mrs	r3, BASEPRI
 80054ae:	617b      	str	r3, [r7, #20]
  return(result);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <osThreadNew+0x3e>
 80054b6:	4b44      	ldr	r3, [pc, #272]	@ (80055c8 <osThreadNew+0x148>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d07e      	beq.n	80055bc <osThreadNew+0x13c>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d07b      	beq.n	80055bc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80054c4:	2380      	movs	r3, #128	@ 0x80
 80054c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80054c8:	2318      	movs	r3, #24
 80054ca:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80054d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054d4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d045      	beq.n	8005568 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <osThreadNew+0x6a>
        name = attr->name;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80054f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d008      	beq.n	8005510 <osThreadNew+0x90>
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	2b38      	cmp	r3, #56	@ 0x38
 8005502:	d805      	bhi.n	8005510 <osThreadNew+0x90>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <osThreadNew+0x94>
        return (NULL);
 8005510:	2300      	movs	r3, #0
 8005512:	e054      	b.n	80055be <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	089b      	lsrs	r3, r3, #2
 8005522:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00e      	beq.n	800554a <osThreadNew+0xca>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	2b5b      	cmp	r3, #91	@ 0x5b
 8005532:	d90a      	bls.n	800554a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005538:	2b00      	cmp	r3, #0
 800553a:	d006      	beq.n	800554a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <osThreadNew+0xca>
        mem = 1;
 8005544:	2301      	movs	r3, #1
 8005546:	623b      	str	r3, [r7, #32]
 8005548:	e010      	b.n	800556c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10c      	bne.n	800556c <osThreadNew+0xec>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d108      	bne.n	800556c <osThreadNew+0xec>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d104      	bne.n	800556c <osThreadNew+0xec>
          mem = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	623b      	str	r3, [r7, #32]
 8005566:	e001      	b.n	800556c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005568:	2300      	movs	r3, #0
 800556a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d110      	bne.n	8005594 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800557a:	9202      	str	r2, [sp, #8]
 800557c:	9301      	str	r3, [sp, #4]
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005586:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 fe21 	bl	80061d0 <xTaskCreateStatic>
 800558e:	4603      	mov	r3, r0
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	e013      	b.n	80055bc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d110      	bne.n	80055bc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800559a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559c:	b29a      	uxth	r2, r3
 800559e:	f107 0310 	add.w	r3, r7, #16
 80055a2:	9301      	str	r3, [sp, #4]
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 fe75 	bl	800629c <xTaskCreate>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d001      	beq.n	80055bc <osThreadNew+0x13c>
          hTask = NULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055bc:	693b      	ldr	r3, [r7, #16]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3730      	adds	r7, #48	@ 0x30
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000250 	.word	0x20000250

080055cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4a07      	ldr	r2, [pc, #28]	@ (80055f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80055dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4a06      	ldr	r2, [pc, #24]	@ (80055fc <vApplicationGetIdleTaskMemory+0x30>)
 80055e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2280      	movs	r2, #128	@ 0x80
 80055e8:	601a      	str	r2, [r3, #0]
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	20000254 	.word	0x20000254
 80055fc:	200002b0 	.word	0x200002b0

08005600 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4a07      	ldr	r2, [pc, #28]	@ (800562c <vApplicationGetTimerTaskMemory+0x2c>)
 8005610:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4a06      	ldr	r2, [pc, #24]	@ (8005630 <vApplicationGetTimerTaskMemory+0x30>)
 8005616:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800561e:	601a      	str	r2, [r3, #0]
}
 8005620:	bf00      	nop
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	200004b0 	.word	0x200004b0
 8005630:	2000050c 	.word	0x2000050c

08005634 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f103 0208 	add.w	r2, r3, #8
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800564c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f103 0208 	add.w	r2, r3, #8
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f103 0208 	add.w	r2, r3, #8
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800568e:	b480      	push	{r7}
 8005690:	b085      	sub	sp, #20
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	601a      	str	r2, [r3, #0]
}
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056d6:	b480      	push	{r7}
 80056d8:	b085      	sub	sp, #20
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056ec:	d103      	bne.n	80056f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e00c      	b.n	8005710 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3308      	adds	r3, #8
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	e002      	b.n	8005704 <vListInsert+0x2e>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	429a      	cmp	r2, r3
 800570e:	d2f6      	bcs.n	80056fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	601a      	str	r2, [r3, #0]
}
 800573c:	bf00      	nop
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6892      	ldr	r2, [r2, #8]
 800575e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6852      	ldr	r2, [r2, #4]
 8005768:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	429a      	cmp	r2, r3
 8005772:	d103      	bne.n	800577c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	1e5a      	subs	r2, r3, #1
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10d      	bne.n	80057cc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b4:	b672      	cpsid	i
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	b662      	cpsie	i
 80057c4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057c6:	bf00      	nop
 80057c8:	bf00      	nop
 80057ca:	e7fd      	b.n	80057c8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80057cc:	f002 f86e 	bl	80078ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d8:	68f9      	ldr	r1, [r7, #12]
 80057da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057dc:	fb01 f303 	mul.w	r3, r1, r3
 80057e0:	441a      	add	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fc:	3b01      	subs	r3, #1
 80057fe:	68f9      	ldr	r1, [r7, #12]
 8005800:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005802:	fb01 f303 	mul.w	r3, r1, r3
 8005806:	441a      	add	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	22ff      	movs	r2, #255	@ 0xff
 8005810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	22ff      	movs	r2, #255	@ 0xff
 8005818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d114      	bne.n	800584c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d01a      	beq.n	8005860 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3310      	adds	r3, #16
 800582e:	4618      	mov	r0, r3
 8005830:	f001 f918 	bl	8006a64 <xTaskRemoveFromEventList>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d012      	beq.n	8005860 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800583a:	4b0d      	ldr	r3, [pc, #52]	@ (8005870 <xQueueGenericReset+0xd4>)
 800583c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	e009      	b.n	8005860 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3310      	adds	r3, #16
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff feef 	bl	8005634 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3324      	adds	r3, #36	@ 0x24
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff feea 	bl	8005634 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005860:	f002 f85a 	bl	8007918 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005864:	2301      	movs	r3, #1
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	e000ed04 	.word	0xe000ed04

08005874 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08e      	sub	sp, #56	@ 0x38
 8005878:	af02      	add	r7, sp, #8
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10d      	bne.n	80058a4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588c:	b672      	cpsid	i
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	b662      	cpsie	i
 800589c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800589e:	bf00      	nop
 80058a0:	bf00      	nop
 80058a2:	e7fd      	b.n	80058a0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10d      	bne.n	80058c6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ae:	b672      	cpsid	i
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	b662      	cpsie	i
 80058be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80058c0:	bf00      	nop
 80058c2:	bf00      	nop
 80058c4:	e7fd      	b.n	80058c2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <xQueueGenericCreateStatic+0x5e>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <xQueueGenericCreateStatic+0x62>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <xQueueGenericCreateStatic+0x64>
 80058d6:	2300      	movs	r3, #0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10d      	bne.n	80058f8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e0:	b672      	cpsid	i
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	b662      	cpsie	i
 80058f0:	623b      	str	r3, [r7, #32]
}
 80058f2:	bf00      	nop
 80058f4:	bf00      	nop
 80058f6:	e7fd      	b.n	80058f4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d102      	bne.n	8005904 <xQueueGenericCreateStatic+0x90>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <xQueueGenericCreateStatic+0x94>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <xQueueGenericCreateStatic+0x96>
 8005908:	2300      	movs	r3, #0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10d      	bne.n	800592a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005912:	b672      	cpsid	i
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	b662      	cpsie	i
 8005922:	61fb      	str	r3, [r7, #28]
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop
 8005928:	e7fd      	b.n	8005926 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800592a:	2350      	movs	r3, #80	@ 0x50
 800592c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b50      	cmp	r3, #80	@ 0x50
 8005932:	d00d      	beq.n	8005950 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005938:	b672      	cpsid	i
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	b662      	cpsie	i
 8005948:	61bb      	str	r3, [r7, #24]
}
 800594a:	bf00      	nop
 800594c:	bf00      	nop
 800594e:	e7fd      	b.n	800594c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005950:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00d      	beq.n	8005978 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800595c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005964:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	4613      	mov	r3, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	68b9      	ldr	r1, [r7, #8]
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 f805 	bl	8005982 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800597a:	4618      	mov	r0, r3
 800597c:	3730      	adds	r7, #48	@ 0x30
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	607a      	str	r2, [r7, #4]
 800598e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	e002      	b.n	80059a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059b0:	2101      	movs	r1, #1
 80059b2:	69b8      	ldr	r0, [r7, #24]
 80059b4:	f7ff fef2 	bl	800579c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	78fa      	ldrb	r2, [r7, #3]
 80059bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059c0:	bf00      	nop
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08e      	sub	sp, #56	@ 0x38
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059d6:	2300      	movs	r3, #0
 80059d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80059de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10d      	bne.n	8005a00 <xQueueGenericSend+0x38>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e8:	b672      	cpsid	i
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	b662      	cpsie	i
 80059f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80059fa:	bf00      	nop
 80059fc:	bf00      	nop
 80059fe:	e7fd      	b.n	80059fc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d103      	bne.n	8005a0e <xQueueGenericSend+0x46>
 8005a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <xQueueGenericSend+0x4a>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <xQueueGenericSend+0x4c>
 8005a12:	2300      	movs	r3, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10d      	bne.n	8005a34 <xQueueGenericSend+0x6c>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1c:	b672      	cpsid	i
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	b662      	cpsie	i
 8005a2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a2e:	bf00      	nop
 8005a30:	bf00      	nop
 8005a32:	e7fd      	b.n	8005a30 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d103      	bne.n	8005a42 <xQueueGenericSend+0x7a>
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <xQueueGenericSend+0x7e>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <xQueueGenericSend+0x80>
 8005a46:	2300      	movs	r3, #0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10d      	bne.n	8005a68 <xQueueGenericSend+0xa0>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a50:	b672      	cpsid	i
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	b662      	cpsie	i
 8005a60:	623b      	str	r3, [r7, #32]
}
 8005a62:	bf00      	nop
 8005a64:	bf00      	nop
 8005a66:	e7fd      	b.n	8005a64 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a68:	f001 f9c4 	bl	8006df4 <xTaskGetSchedulerState>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d102      	bne.n	8005a78 <xQueueGenericSend+0xb0>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <xQueueGenericSend+0xb4>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <xQueueGenericSend+0xb6>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10d      	bne.n	8005a9e <xQueueGenericSend+0xd6>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a86:	b672      	cpsid	i
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	b662      	cpsie	i
 8005a96:	61fb      	str	r3, [r7, #28]
}
 8005a98:	bf00      	nop
 8005a9a:	bf00      	nop
 8005a9c:	e7fd      	b.n	8005a9a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a9e:	f001 ff05 	bl	80078ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d302      	bcc.n	8005ab4 <xQueueGenericSend+0xec>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d129      	bne.n	8005b08 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005aba:	f000 fa1b 	bl	8005ef4 <prvCopyDataToQueue>
 8005abe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d010      	beq.n	8005aea <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aca:	3324      	adds	r3, #36	@ 0x24
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 ffc9 	bl	8006a64 <xTaskRemoveFromEventList>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d013      	beq.n	8005b00 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ad8:	4b3f      	ldr	r3, [pc, #252]	@ (8005bd8 <xQueueGenericSend+0x210>)
 8005ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	e00a      	b.n	8005b00 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d007      	beq.n	8005b00 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005af0:	4b39      	ldr	r3, [pc, #228]	@ (8005bd8 <xQueueGenericSend+0x210>)
 8005af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b00:	f001 ff0a 	bl	8007918 <vPortExitCritical>
				return pdPASS;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e063      	b.n	8005bd0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d103      	bne.n	8005b16 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b0e:	f001 ff03 	bl	8007918 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	e05c      	b.n	8005bd0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d106      	bne.n	8005b2a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b1c:	f107 0314 	add.w	r3, r7, #20
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 f805 	bl	8006b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b26:	2301      	movs	r3, #1
 8005b28:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b2a:	f001 fef5 	bl	8007918 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b2e:	f000 fd69 	bl	8006604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b32:	f001 febb 	bl	80078ac <vPortEnterCritical>
 8005b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b3c:	b25b      	sxtb	r3, r3
 8005b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b42:	d103      	bne.n	8005b4c <xQueueGenericSend+0x184>
 8005b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b52:	b25b      	sxtb	r3, r3
 8005b54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b58:	d103      	bne.n	8005b62 <xQueueGenericSend+0x19a>
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b62:	f001 fed9 	bl	8007918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b66:	1d3a      	adds	r2, r7, #4
 8005b68:	f107 0314 	add.w	r3, r7, #20
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fff4 	bl	8006b5c <xTaskCheckForTimeOut>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d124      	bne.n	8005bc4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b7c:	f000 fab2 	bl	80060e4 <prvIsQueueFull>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d018      	beq.n	8005bb8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b88:	3310      	adds	r3, #16
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 ff12 	bl	80069b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b96:	f000 fa3d 	bl	8006014 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b9a:	f000 fd41 	bl	8006620 <xTaskResumeAll>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f47f af7c 	bne.w	8005a9e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd8 <xQueueGenericSend+0x210>)
 8005ba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	e772      	b.n	8005a9e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005bb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bba:	f000 fa2b 	bl	8006014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bbe:	f000 fd2f 	bl	8006620 <xTaskResumeAll>
 8005bc2:	e76c      	b.n	8005a9e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005bc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bc6:	f000 fa25 	bl	8006014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bca:	f000 fd29 	bl	8006620 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005bce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3738      	adds	r7, #56	@ 0x38
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08e      	sub	sp, #56	@ 0x38
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10d      	bne.n	8005c10 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf8:	b672      	cpsid	i
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	b662      	cpsie	i
 8005c08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c0a:	bf00      	nop
 8005c0c:	bf00      	nop
 8005c0e:	e7fd      	b.n	8005c0c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d103      	bne.n	8005c1e <xQueueGenericSendFromISR+0x42>
 8005c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <xQueueGenericSendFromISR+0x46>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <xQueueGenericSendFromISR+0x48>
 8005c22:	2300      	movs	r3, #0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10d      	bne.n	8005c44 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2c:	b672      	cpsid	i
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	b662      	cpsie	i
 8005c3c:	623b      	str	r3, [r7, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	bf00      	nop
 8005c42:	e7fd      	b.n	8005c40 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d103      	bne.n	8005c52 <xQueueGenericSendFromISR+0x76>
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d101      	bne.n	8005c56 <xQueueGenericSendFromISR+0x7a>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <xQueueGenericSendFromISR+0x7c>
 8005c56:	2300      	movs	r3, #0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10d      	bne.n	8005c78 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c60:	b672      	cpsid	i
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	b662      	cpsie	i
 8005c70:	61fb      	str	r3, [r7, #28]
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c78:	f001 ff00 	bl	8007a7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c7c:	f3ef 8211 	mrs	r2, BASEPRI
 8005c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c84:	b672      	cpsid	i
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	b662      	cpsie	i
 8005c94:	61ba      	str	r2, [r7, #24]
 8005c96:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c98:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d302      	bcc.n	8005cae <xQueueGenericSendFromISR+0xd2>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d12c      	bne.n	8005d08 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cbe:	f000 f919 	bl	8005ef4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cc2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cca:	d112      	bne.n	8005cf2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d016      	beq.n	8005d02 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd6:	3324      	adds	r3, #36	@ 0x24
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fec3 	bl	8006a64 <xTaskRemoveFromEventList>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00e      	beq.n	8005d02 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00b      	beq.n	8005d02 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	e007      	b.n	8005d02 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cf2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	b25a      	sxtb	r2, r3
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005d02:	2301      	movs	r3, #1
 8005d04:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005d06:	e001      	b.n	8005d0c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d0e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3738      	adds	r7, #56	@ 0x38
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08c      	sub	sp, #48	@ 0x30
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d30:	2300      	movs	r3, #0
 8005d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10d      	bne.n	8005d5a <xQueueReceive+0x36>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d42:	b672      	cpsid	i
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	b662      	cpsie	i
 8005d52:	623b      	str	r3, [r7, #32]
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop
 8005d58:	e7fd      	b.n	8005d56 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d103      	bne.n	8005d68 <xQueueReceive+0x44>
 8005d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <xQueueReceive+0x48>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e000      	b.n	8005d6e <xQueueReceive+0x4a>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10d      	bne.n	8005d8e <xQueueReceive+0x6a>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d76:	b672      	cpsid	i
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	b662      	cpsie	i
 8005d86:	61fb      	str	r3, [r7, #28]
}
 8005d88:	bf00      	nop
 8005d8a:	bf00      	nop
 8005d8c:	e7fd      	b.n	8005d8a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d8e:	f001 f831 	bl	8006df4 <xTaskGetSchedulerState>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d102      	bne.n	8005d9e <xQueueReceive+0x7a>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <xQueueReceive+0x7e>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e000      	b.n	8005da4 <xQueueReceive+0x80>
 8005da2:	2300      	movs	r3, #0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10d      	bne.n	8005dc4 <xQueueReceive+0xa0>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dac:	b672      	cpsid	i
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	b662      	cpsie	i
 8005dbc:	61bb      	str	r3, [r7, #24]
}
 8005dbe:	bf00      	nop
 8005dc0:	bf00      	nop
 8005dc2:	e7fd      	b.n	8005dc0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dc4:	f001 fd72 	bl	80078ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dcc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01f      	beq.n	8005e14 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dd8:	f000 f8f6 	bl	8005fc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dde:	1e5a      	subs	r2, r3, #1
 8005de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00f      	beq.n	8005e0c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dee:	3310      	adds	r3, #16
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fe37 	bl	8006a64 <xTaskRemoveFromEventList>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d007      	beq.n	8005e0c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005dfc:	4b3c      	ldr	r3, [pc, #240]	@ (8005ef0 <xQueueReceive+0x1cc>)
 8005dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e0c:	f001 fd84 	bl	8007918 <vPortExitCritical>
				return pdPASS;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e069      	b.n	8005ee8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d103      	bne.n	8005e22 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e1a:	f001 fd7d 	bl	8007918 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e062      	b.n	8005ee8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d106      	bne.n	8005e36 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e28:	f107 0310 	add.w	r3, r7, #16
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 fe7f 	bl	8006b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e32:	2301      	movs	r3, #1
 8005e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e36:	f001 fd6f 	bl	8007918 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e3a:	f000 fbe3 	bl	8006604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e3e:	f001 fd35 	bl	80078ac <vPortEnterCritical>
 8005e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e48:	b25b      	sxtb	r3, r3
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e4e:	d103      	bne.n	8005e58 <xQueueReceive+0x134>
 8005e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e5e:	b25b      	sxtb	r3, r3
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e64:	d103      	bne.n	8005e6e <xQueueReceive+0x14a>
 8005e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e6e:	f001 fd53 	bl	8007918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e72:	1d3a      	adds	r2, r7, #4
 8005e74:	f107 0310 	add.w	r3, r7, #16
 8005e78:	4611      	mov	r1, r2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fe6e 	bl	8006b5c <xTaskCheckForTimeOut>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d123      	bne.n	8005ece <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e88:	f000 f916 	bl	80060b8 <prvIsQueueEmpty>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d017      	beq.n	8005ec2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e94:	3324      	adds	r3, #36	@ 0x24
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	4611      	mov	r1, r2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fd8c 	bl	80069b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ea0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ea2:	f000 f8b7 	bl	8006014 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ea6:	f000 fbbb 	bl	8006620 <xTaskResumeAll>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d189      	bne.n	8005dc4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8005ef0 <xQueueReceive+0x1cc>)
 8005eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	e780      	b.n	8005dc4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ec4:	f000 f8a6 	bl	8006014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ec8:	f000 fbaa 	bl	8006620 <xTaskResumeAll>
 8005ecc:	e77a      	b.n	8005dc4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ece:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ed0:	f000 f8a0 	bl	8006014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ed4:	f000 fba4 	bl	8006620 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ed8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eda:	f000 f8ed 	bl	80060b8 <prvIsQueueEmpty>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f43f af6f 	beq.w	8005dc4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ee6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3730      	adds	r7, #48	@ 0x30
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	e000ed04 	.word	0xe000ed04

08005ef4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10d      	bne.n	8005f2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d14d      	bne.n	8005fb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 ff86 	bl	8006e30 <xTaskPriorityDisinherit>
 8005f24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	609a      	str	r2, [r3, #8]
 8005f2c:	e043      	b.n	8005fb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d119      	bne.n	8005f68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6858      	ldr	r0, [r3, #4]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	68b9      	ldr	r1, [r7, #8]
 8005f40:	f002 fba9 	bl	8008696 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4c:	441a      	add	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d32b      	bcc.n	8005fb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	605a      	str	r2, [r3, #4]
 8005f66:	e026      	b.n	8005fb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	68d8      	ldr	r0, [r3, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f70:	461a      	mov	r2, r3
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	f002 fb8f 	bl	8008696 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f80:	425b      	negs	r3, r3
 8005f82:	441a      	add	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d207      	bcs.n	8005fa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9c:	425b      	negs	r3, r3
 8005f9e:	441a      	add	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d105      	bne.n	8005fb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005fbe:	697b      	ldr	r3, [r7, #20]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d018      	beq.n	800600c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe2:	441a      	add	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d303      	bcc.n	8005ffc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68d9      	ldr	r1, [r3, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006004:	461a      	mov	r2, r3
 8006006:	6838      	ldr	r0, [r7, #0]
 8006008:	f002 fb45 	bl	8008696 <memcpy>
	}
}
 800600c:	bf00      	nop
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800601c:	f001 fc46 	bl	80078ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006026:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006028:	e011      	b.n	800604e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602e:	2b00      	cmp	r3, #0
 8006030:	d012      	beq.n	8006058 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3324      	adds	r3, #36	@ 0x24
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fd14 	bl	8006a64 <xTaskRemoveFromEventList>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006042:	f000 fdf3 	bl	8006c2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	3b01      	subs	r3, #1
 800604a:	b2db      	uxtb	r3, r3
 800604c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800604e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006052:	2b00      	cmp	r3, #0
 8006054:	dce9      	bgt.n	800602a <prvUnlockQueue+0x16>
 8006056:	e000      	b.n	800605a <prvUnlockQueue+0x46>
					break;
 8006058:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	22ff      	movs	r2, #255	@ 0xff
 800605e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006062:	f001 fc59 	bl	8007918 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006066:	f001 fc21 	bl	80078ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006070:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006072:	e011      	b.n	8006098 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d012      	beq.n	80060a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3310      	adds	r3, #16
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fcef 	bl	8006a64 <xTaskRemoveFromEventList>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800608c:	f000 fdce 	bl	8006c2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006090:	7bbb      	ldrb	r3, [r7, #14]
 8006092:	3b01      	subs	r3, #1
 8006094:	b2db      	uxtb	r3, r3
 8006096:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800609c:	2b00      	cmp	r3, #0
 800609e:	dce9      	bgt.n	8006074 <prvUnlockQueue+0x60>
 80060a0:	e000      	b.n	80060a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	22ff      	movs	r2, #255	@ 0xff
 80060a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80060ac:	f001 fc34 	bl	8007918 <vPortExitCritical>
}
 80060b0:	bf00      	nop
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060c0:	f001 fbf4 	bl	80078ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d102      	bne.n	80060d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060cc:	2301      	movs	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	e001      	b.n	80060d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060d6:	f001 fc1f 	bl	8007918 <vPortExitCritical>

	return xReturn;
 80060da:	68fb      	ldr	r3, [r7, #12]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060ec:	f001 fbde 	bl	80078ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d102      	bne.n	8006102 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060fc:	2301      	movs	r3, #1
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	e001      	b.n	8006106 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006106:	f001 fc07 	bl	8007918 <vPortExitCritical>

	return xReturn;
 800610a:	68fb      	ldr	r3, [r7, #12]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	e014      	b.n	800614e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006124:	4a0f      	ldr	r2, [pc, #60]	@ (8006164 <vQueueAddToRegistry+0x50>)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10b      	bne.n	8006148 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006130:	490c      	ldr	r1, [pc, #48]	@ (8006164 <vQueueAddToRegistry+0x50>)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800613a:	4a0a      	ldr	r2, [pc, #40]	@ (8006164 <vQueueAddToRegistry+0x50>)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	4413      	add	r3, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006146:	e006      	b.n	8006156 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3301      	adds	r3, #1
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b07      	cmp	r3, #7
 8006152:	d9e7      	bls.n	8006124 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006154:	bf00      	nop
 8006156:	bf00      	nop
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	2000090c 	.word	0x2000090c

08006168 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006178:	f001 fb98 	bl	80078ac <vPortEnterCritical>
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006182:	b25b      	sxtb	r3, r3
 8006184:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006188:	d103      	bne.n	8006192 <vQueueWaitForMessageRestricted+0x2a>
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006198:	b25b      	sxtb	r3, r3
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800619e:	d103      	bne.n	80061a8 <vQueueWaitForMessageRestricted+0x40>
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061a8:	f001 fbb6 	bl	8007918 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d106      	bne.n	80061c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	3324      	adds	r3, #36	@ 0x24
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fc23 	bl	8006a08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80061c2:	6978      	ldr	r0, [r7, #20]
 80061c4:	f7ff ff26 	bl	8006014 <prvUnlockQueue>
	}
 80061c8:	bf00      	nop
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08e      	sub	sp, #56	@ 0x38
 80061d4:	af04      	add	r7, sp, #16
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10d      	bne.n	8006200 <xTaskCreateStatic+0x30>
	__asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e8:	b672      	cpsid	i
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	b662      	cpsie	i
 80061f8:	623b      	str	r3, [r7, #32]
}
 80061fa:	bf00      	nop
 80061fc:	bf00      	nop
 80061fe:	e7fd      	b.n	80061fc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10d      	bne.n	8006222 <xTaskCreateStatic+0x52>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620a:	b672      	cpsid	i
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	b662      	cpsie	i
 800621a:	61fb      	str	r3, [r7, #28]
}
 800621c:	bf00      	nop
 800621e:	bf00      	nop
 8006220:	e7fd      	b.n	800621e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006222:	235c      	movs	r3, #92	@ 0x5c
 8006224:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2b5c      	cmp	r3, #92	@ 0x5c
 800622a:	d00d      	beq.n	8006248 <xTaskCreateStatic+0x78>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006230:	b672      	cpsid	i
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	b662      	cpsie	i
 8006240:	61bb      	str	r3, [r7, #24]
}
 8006242:	bf00      	nop
 8006244:	bf00      	nop
 8006246:	e7fd      	b.n	8006244 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006248:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800624a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624c:	2b00      	cmp	r3, #0
 800624e:	d01e      	beq.n	800628e <xTaskCreateStatic+0xbe>
 8006250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01b      	beq.n	800628e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006258:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800625e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006262:	2202      	movs	r2, #2
 8006264:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006268:	2300      	movs	r3, #0
 800626a:	9303      	str	r3, [sp, #12]
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	9302      	str	r3, [sp, #8]
 8006270:	f107 0314 	add.w	r3, r7, #20
 8006274:	9301      	str	r3, [sp, #4]
 8006276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	68b9      	ldr	r1, [r7, #8]
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f850 	bl	8006326 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006286:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006288:	f000 f8e0 	bl	800644c <prvAddNewTaskToReadyList>
 800628c:	e001      	b.n	8006292 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800628e:	2300      	movs	r3, #0
 8006290:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006292:	697b      	ldr	r3, [r7, #20]
	}
 8006294:	4618      	mov	r0, r3
 8006296:	3728      	adds	r7, #40	@ 0x28
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08c      	sub	sp, #48	@ 0x30
 80062a0:	af04      	add	r7, sp, #16
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	4613      	mov	r3, r2
 80062aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062ac:	88fb      	ldrh	r3, [r7, #6]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 fc29 	bl	8007b08 <pvPortMalloc>
 80062b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00e      	beq.n	80062dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062be:	205c      	movs	r0, #92	@ 0x5c
 80062c0:	f001 fc22 	bl	8007b08 <pvPortMalloc>
 80062c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80062d2:	e005      	b.n	80062e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062d4:	6978      	ldr	r0, [r7, #20]
 80062d6:	f001 fce5 	bl	8007ca4 <vPortFree>
 80062da:	e001      	b.n	80062e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062dc:	2300      	movs	r3, #0
 80062de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d017      	beq.n	8006316 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062ee:	88fa      	ldrh	r2, [r7, #6]
 80062f0:	2300      	movs	r3, #0
 80062f2:	9303      	str	r3, [sp, #12]
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	9302      	str	r3, [sp, #8]
 80062f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fa:	9301      	str	r3, [sp, #4]
 80062fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	68b9      	ldr	r1, [r7, #8]
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 f80e 	bl	8006326 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800630a:	69f8      	ldr	r0, [r7, #28]
 800630c:	f000 f89e 	bl	800644c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006310:	2301      	movs	r3, #1
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	e002      	b.n	800631c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006316:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800631a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800631c:	69bb      	ldr	r3, [r7, #24]
	}
 800631e:	4618      	mov	r0, r3
 8006320:	3720      	adds	r7, #32
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b088      	sub	sp, #32
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	607a      	str	r2, [r7, #4]
 8006332:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006336:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	461a      	mov	r2, r3
 800633e:	21a5      	movs	r1, #165	@ 0xa5
 8006340:	f002 f92e 	bl	80085a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006348:	6879      	ldr	r1, [r7, #4]
 800634a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800634e:	440b      	add	r3, r1
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	f023 0307 	bic.w	r3, r3, #7
 800635c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00d      	beq.n	8006384 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636c:	b672      	cpsid	i
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	b662      	cpsie	i
 800637c:	617b      	str	r3, [r7, #20]
}
 800637e:	bf00      	nop
 8006380:	bf00      	nop
 8006382:	e7fd      	b.n	8006380 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d01f      	beq.n	80063ca <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800638a:	2300      	movs	r3, #0
 800638c:	61fb      	str	r3, [r7, #28]
 800638e:	e012      	b.n	80063b6 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	4413      	add	r3, r2
 8006396:	7819      	ldrb	r1, [r3, #0]
 8006398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	3334      	adds	r3, #52	@ 0x34
 80063a0:	460a      	mov	r2, r1
 80063a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	4413      	add	r3, r2
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d006      	beq.n	80063be <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	3301      	adds	r3, #1
 80063b4:	61fb      	str	r3, [r7, #28]
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	2b0f      	cmp	r3, #15
 80063ba:	d9e9      	bls.n	8006390 <prvInitialiseNewTask+0x6a>
 80063bc:	e000      	b.n	80063c0 <prvInitialiseNewTask+0x9a>
			{
				break;
 80063be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063c8:	e003      	b.n	80063d2 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d4:	2b37      	cmp	r3, #55	@ 0x37
 80063d6:	d901      	bls.n	80063dc <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063d8:	2337      	movs	r3, #55	@ 0x37
 80063da:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063e6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80063e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ea:	2200      	movs	r2, #0
 80063ec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	3304      	adds	r3, #4
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff f93e 	bl	8005674 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fa:	3318      	adds	r3, #24
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff f939 	bl	8005674 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006406:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800640e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006410:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006416:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641a:	2200      	movs	r2, #0
 800641c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800641e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	68f9      	ldr	r1, [r7, #12]
 800642a:	69b8      	ldr	r0, [r7, #24]
 800642c:	f001 f930 	bl	8007690 <pxPortInitialiseStack>
 8006430:	4602      	mov	r2, r0
 8006432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006434:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800643c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006442:	bf00      	nop
 8006444:	3720      	adds	r7, #32
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006454:	f001 fa2a 	bl	80078ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006458:	4b2d      	ldr	r3, [pc, #180]	@ (8006510 <prvAddNewTaskToReadyList+0xc4>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3301      	adds	r3, #1
 800645e:	4a2c      	ldr	r2, [pc, #176]	@ (8006510 <prvAddNewTaskToReadyList+0xc4>)
 8006460:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006462:	4b2c      	ldr	r3, [pc, #176]	@ (8006514 <prvAddNewTaskToReadyList+0xc8>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d109      	bne.n	800647e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800646a:	4a2a      	ldr	r2, [pc, #168]	@ (8006514 <prvAddNewTaskToReadyList+0xc8>)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006470:	4b27      	ldr	r3, [pc, #156]	@ (8006510 <prvAddNewTaskToReadyList+0xc4>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d110      	bne.n	800649a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006478:	f000 fbfc 	bl	8006c74 <prvInitialiseTaskLists>
 800647c:	e00d      	b.n	800649a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800647e:	4b26      	ldr	r3, [pc, #152]	@ (8006518 <prvAddNewTaskToReadyList+0xcc>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d109      	bne.n	800649a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006486:	4b23      	ldr	r3, [pc, #140]	@ (8006514 <prvAddNewTaskToReadyList+0xc8>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006490:	429a      	cmp	r2, r3
 8006492:	d802      	bhi.n	800649a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006494:	4a1f      	ldr	r2, [pc, #124]	@ (8006514 <prvAddNewTaskToReadyList+0xc8>)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800649a:	4b20      	ldr	r3, [pc, #128]	@ (800651c <prvAddNewTaskToReadyList+0xd0>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3301      	adds	r3, #1
 80064a0:	4a1e      	ldr	r2, [pc, #120]	@ (800651c <prvAddNewTaskToReadyList+0xd0>)
 80064a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064a4:	4b1d      	ldr	r3, [pc, #116]	@ (800651c <prvAddNewTaskToReadyList+0xd0>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006520 <prvAddNewTaskToReadyList+0xd4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d903      	bls.n	80064c0 <prvAddNewTaskToReadyList+0x74>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064bc:	4a18      	ldr	r2, [pc, #96]	@ (8006520 <prvAddNewTaskToReadyList+0xd4>)
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4a15      	ldr	r2, [pc, #84]	@ (8006524 <prvAddNewTaskToReadyList+0xd8>)
 80064ce:	441a      	add	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3304      	adds	r3, #4
 80064d4:	4619      	mov	r1, r3
 80064d6:	4610      	mov	r0, r2
 80064d8:	f7ff f8d9 	bl	800568e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064dc:	f001 fa1c 	bl	8007918 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064e0:	4b0d      	ldr	r3, [pc, #52]	@ (8006518 <prvAddNewTaskToReadyList+0xcc>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00e      	beq.n	8006506 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006514 <prvAddNewTaskToReadyList+0xc8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d207      	bcs.n	8006506 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006528 <prvAddNewTaskToReadyList+0xdc>)
 80064f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006506:	bf00      	nop
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000e20 	.word	0x20000e20
 8006514:	2000094c 	.word	0x2000094c
 8006518:	20000e2c 	.word	0x20000e2c
 800651c:	20000e3c 	.word	0x20000e3c
 8006520:	20000e28 	.word	0x20000e28
 8006524:	20000950 	.word	0x20000950
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08a      	sub	sp, #40	@ 0x28
 8006530:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006532:	2300      	movs	r3, #0
 8006534:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800653a:	463a      	mov	r2, r7
 800653c:	1d39      	adds	r1, r7, #4
 800653e:	f107 0308 	add.w	r3, r7, #8
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff f842 	bl	80055cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	9202      	str	r2, [sp, #8]
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	2300      	movs	r3, #0
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	2300      	movs	r3, #0
 8006558:	460a      	mov	r2, r1
 800655a:	4924      	ldr	r1, [pc, #144]	@ (80065ec <vTaskStartScheduler+0xc0>)
 800655c:	4824      	ldr	r0, [pc, #144]	@ (80065f0 <vTaskStartScheduler+0xc4>)
 800655e:	f7ff fe37 	bl	80061d0 <xTaskCreateStatic>
 8006562:	4603      	mov	r3, r0
 8006564:	4a23      	ldr	r2, [pc, #140]	@ (80065f4 <vTaskStartScheduler+0xc8>)
 8006566:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006568:	4b22      	ldr	r3, [pc, #136]	@ (80065f4 <vTaskStartScheduler+0xc8>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006570:	2301      	movs	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	e001      	b.n	800657a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006576:	2300      	movs	r3, #0
 8006578:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d102      	bne.n	8006586 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006580:	f000 fd1e 	bl	8006fc0 <xTimerCreateTimerTask>
 8006584:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d118      	bne.n	80065be <vTaskStartScheduler+0x92>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006590:	b672      	cpsid	i
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	b662      	cpsie	i
 80065a0:	613b      	str	r3, [r7, #16]
}
 80065a2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065a4:	4b14      	ldr	r3, [pc, #80]	@ (80065f8 <vTaskStartScheduler+0xcc>)
 80065a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065ac:	4b13      	ldr	r3, [pc, #76]	@ (80065fc <vTaskStartScheduler+0xd0>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065b2:	4b13      	ldr	r3, [pc, #76]	@ (8006600 <vTaskStartScheduler+0xd4>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065b8:	f001 f8fa 	bl	80077b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065bc:	e011      	b.n	80065e2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065c4:	d10d      	bne.n	80065e2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ca:	b672      	cpsid	i
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	b662      	cpsie	i
 80065da:	60fb      	str	r3, [r7, #12]
}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	e7fd      	b.n	80065de <vTaskStartScheduler+0xb2>
}
 80065e2:	bf00      	nop
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	08009cec 	.word	0x08009cec
 80065f0:	08006c45 	.word	0x08006c45
 80065f4:	20000e44 	.word	0x20000e44
 80065f8:	20000e40 	.word	0x20000e40
 80065fc:	20000e2c 	.word	0x20000e2c
 8006600:	20000e24 	.word	0x20000e24

08006604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006608:	4b04      	ldr	r3, [pc, #16]	@ (800661c <vTaskSuspendAll+0x18>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3301      	adds	r3, #1
 800660e:	4a03      	ldr	r2, [pc, #12]	@ (800661c <vTaskSuspendAll+0x18>)
 8006610:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006612:	bf00      	nop
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	20000e48 	.word	0x20000e48

08006620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800662a:	2300      	movs	r3, #0
 800662c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800662e:	4b43      	ldr	r3, [pc, #268]	@ (800673c <xTaskResumeAll+0x11c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10d      	bne.n	8006652 <xTaskResumeAll+0x32>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663a:	b672      	cpsid	i
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	b662      	cpsie	i
 800664a:	603b      	str	r3, [r7, #0]
}
 800664c:	bf00      	nop
 800664e:	bf00      	nop
 8006650:	e7fd      	b.n	800664e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006652:	f001 f92b 	bl	80078ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006656:	4b39      	ldr	r3, [pc, #228]	@ (800673c <xTaskResumeAll+0x11c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3b01      	subs	r3, #1
 800665c:	4a37      	ldr	r2, [pc, #220]	@ (800673c <xTaskResumeAll+0x11c>)
 800665e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006660:	4b36      	ldr	r3, [pc, #216]	@ (800673c <xTaskResumeAll+0x11c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d162      	bne.n	800672e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006668:	4b35      	ldr	r3, [pc, #212]	@ (8006740 <xTaskResumeAll+0x120>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d05e      	beq.n	800672e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006670:	e02f      	b.n	80066d2 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006672:	4b34      	ldr	r3, [pc, #208]	@ (8006744 <xTaskResumeAll+0x124>)
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3318      	adds	r3, #24
 800667e:	4618      	mov	r0, r3
 8006680:	f7ff f862 	bl	8005748 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3304      	adds	r3, #4
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff f85d 	bl	8005748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006692:	4b2d      	ldr	r3, [pc, #180]	@ (8006748 <xTaskResumeAll+0x128>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d903      	bls.n	80066a2 <xTaskResumeAll+0x82>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669e:	4a2a      	ldr	r2, [pc, #168]	@ (8006748 <xTaskResumeAll+0x128>)
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4a27      	ldr	r2, [pc, #156]	@ (800674c <xTaskResumeAll+0x12c>)
 80066b0:	441a      	add	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4619      	mov	r1, r3
 80066b8:	4610      	mov	r0, r2
 80066ba:	f7fe ffe8 	bl	800568e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c2:	4b23      	ldr	r3, [pc, #140]	@ (8006750 <xTaskResumeAll+0x130>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d302      	bcc.n	80066d2 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80066cc:	4b21      	ldr	r3, [pc, #132]	@ (8006754 <xTaskResumeAll+0x134>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066d2:	4b1c      	ldr	r3, [pc, #112]	@ (8006744 <xTaskResumeAll+0x124>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1cb      	bne.n	8006672 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066e0:	f000 fb68 	bl	8006db4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80066e4:	4b1c      	ldr	r3, [pc, #112]	@ (8006758 <xTaskResumeAll+0x138>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d010      	beq.n	8006712 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066f0:	f000 f846 	bl	8006780 <xTaskIncrementTick>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80066fa:	4b16      	ldr	r3, [pc, #88]	@ (8006754 <xTaskResumeAll+0x134>)
 80066fc:	2201      	movs	r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3b01      	subs	r3, #1
 8006704:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1f1      	bne.n	80066f0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800670c:	4b12      	ldr	r3, [pc, #72]	@ (8006758 <xTaskResumeAll+0x138>)
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006712:	4b10      	ldr	r3, [pc, #64]	@ (8006754 <xTaskResumeAll+0x134>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d009      	beq.n	800672e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800671a:	2301      	movs	r3, #1
 800671c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800671e:	4b0f      	ldr	r3, [pc, #60]	@ (800675c <xTaskResumeAll+0x13c>)
 8006720:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800672e:	f001 f8f3 	bl	8007918 <vPortExitCritical>

	return xAlreadyYielded;
 8006732:	68bb      	ldr	r3, [r7, #8]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20000e48 	.word	0x20000e48
 8006740:	20000e20 	.word	0x20000e20
 8006744:	20000de0 	.word	0x20000de0
 8006748:	20000e28 	.word	0x20000e28
 800674c:	20000950 	.word	0x20000950
 8006750:	2000094c 	.word	0x2000094c
 8006754:	20000e34 	.word	0x20000e34
 8006758:	20000e30 	.word	0x20000e30
 800675c:	e000ed04 	.word	0xe000ed04

08006760 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006766:	4b05      	ldr	r3, [pc, #20]	@ (800677c <xTaskGetTickCount+0x1c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800676c:	687b      	ldr	r3, [r7, #4]
}
 800676e:	4618      	mov	r0, r3
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	20000e24 	.word	0x20000e24

08006780 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006786:	2300      	movs	r3, #0
 8006788:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800678a:	4b50      	ldr	r3, [pc, #320]	@ (80068cc <xTaskIncrementTick+0x14c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	f040 808c 	bne.w	80068ac <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006794:	4b4e      	ldr	r3, [pc, #312]	@ (80068d0 <xTaskIncrementTick+0x150>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800679c:	4a4c      	ldr	r2, [pc, #304]	@ (80068d0 <xTaskIncrementTick+0x150>)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d123      	bne.n	80067f0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80067a8:	4b4a      	ldr	r3, [pc, #296]	@ (80068d4 <xTaskIncrementTick+0x154>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00d      	beq.n	80067ce <xTaskIncrementTick+0x4e>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b6:	b672      	cpsid	i
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	b662      	cpsie	i
 80067c6:	603b      	str	r3, [r7, #0]
}
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
 80067cc:	e7fd      	b.n	80067ca <xTaskIncrementTick+0x4a>
 80067ce:	4b41      	ldr	r3, [pc, #260]	@ (80068d4 <xTaskIncrementTick+0x154>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	4b40      	ldr	r3, [pc, #256]	@ (80068d8 <xTaskIncrementTick+0x158>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a3e      	ldr	r2, [pc, #248]	@ (80068d4 <xTaskIncrementTick+0x154>)
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	4a3e      	ldr	r2, [pc, #248]	@ (80068d8 <xTaskIncrementTick+0x158>)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	4b3e      	ldr	r3, [pc, #248]	@ (80068dc <xTaskIncrementTick+0x15c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3301      	adds	r3, #1
 80067e8:	4a3c      	ldr	r2, [pc, #240]	@ (80068dc <xTaskIncrementTick+0x15c>)
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	f000 fae2 	bl	8006db4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067f0:	4b3b      	ldr	r3, [pc, #236]	@ (80068e0 <xTaskIncrementTick+0x160>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d349      	bcc.n	800688e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067fa:	4b36      	ldr	r3, [pc, #216]	@ (80068d4 <xTaskIncrementTick+0x154>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d104      	bne.n	800680e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006804:	4b36      	ldr	r3, [pc, #216]	@ (80068e0 <xTaskIncrementTick+0x160>)
 8006806:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800680a:	601a      	str	r2, [r3, #0]
					break;
 800680c:	e03f      	b.n	800688e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800680e:	4b31      	ldr	r3, [pc, #196]	@ (80068d4 <xTaskIncrementTick+0x154>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	429a      	cmp	r2, r3
 8006824:	d203      	bcs.n	800682e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006826:	4a2e      	ldr	r2, [pc, #184]	@ (80068e0 <xTaskIncrementTick+0x160>)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800682c:	e02f      	b.n	800688e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	3304      	adds	r3, #4
 8006832:	4618      	mov	r0, r3
 8006834:	f7fe ff88 	bl	8005748 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683c:	2b00      	cmp	r3, #0
 800683e:	d004      	beq.n	800684a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	3318      	adds	r3, #24
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe ff7f 	bl	8005748 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800684e:	4b25      	ldr	r3, [pc, #148]	@ (80068e4 <xTaskIncrementTick+0x164>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d903      	bls.n	800685e <xTaskIncrementTick+0xde>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	4a22      	ldr	r2, [pc, #136]	@ (80068e4 <xTaskIncrementTick+0x164>)
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4a1f      	ldr	r2, [pc, #124]	@ (80068e8 <xTaskIncrementTick+0x168>)
 800686c:	441a      	add	r2, r3
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	3304      	adds	r3, #4
 8006872:	4619      	mov	r1, r3
 8006874:	4610      	mov	r0, r2
 8006876:	f7fe ff0a 	bl	800568e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800687e:	4b1b      	ldr	r3, [pc, #108]	@ (80068ec <xTaskIncrementTick+0x16c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006884:	429a      	cmp	r2, r3
 8006886:	d3b8      	bcc.n	80067fa <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006888:	2301      	movs	r3, #1
 800688a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800688c:	e7b5      	b.n	80067fa <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800688e:	4b17      	ldr	r3, [pc, #92]	@ (80068ec <xTaskIncrementTick+0x16c>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006894:	4914      	ldr	r1, [pc, #80]	@ (80068e8 <xTaskIncrementTick+0x168>)
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d907      	bls.n	80068b6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80068a6:	2301      	movs	r3, #1
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	e004      	b.n	80068b6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80068ac:	4b10      	ldr	r3, [pc, #64]	@ (80068f0 <xTaskIncrementTick+0x170>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3301      	adds	r3, #1
 80068b2:	4a0f      	ldr	r2, [pc, #60]	@ (80068f0 <xTaskIncrementTick+0x170>)
 80068b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80068b6:	4b0f      	ldr	r3, [pc, #60]	@ (80068f4 <xTaskIncrementTick+0x174>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80068be:	2301      	movs	r3, #1
 80068c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80068c2:	697b      	ldr	r3, [r7, #20]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	20000e48 	.word	0x20000e48
 80068d0:	20000e24 	.word	0x20000e24
 80068d4:	20000dd8 	.word	0x20000dd8
 80068d8:	20000ddc 	.word	0x20000ddc
 80068dc:	20000e38 	.word	0x20000e38
 80068e0:	20000e40 	.word	0x20000e40
 80068e4:	20000e28 	.word	0x20000e28
 80068e8:	20000950 	.word	0x20000950
 80068ec:	2000094c 	.word	0x2000094c
 80068f0:	20000e30 	.word	0x20000e30
 80068f4:	20000e34 	.word	0x20000e34

080068f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068fe:	4b29      	ldr	r3, [pc, #164]	@ (80069a4 <vTaskSwitchContext+0xac>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006906:	4b28      	ldr	r3, [pc, #160]	@ (80069a8 <vTaskSwitchContext+0xb0>)
 8006908:	2201      	movs	r2, #1
 800690a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800690c:	e044      	b.n	8006998 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800690e:	4b26      	ldr	r3, [pc, #152]	@ (80069a8 <vTaskSwitchContext+0xb0>)
 8006910:	2200      	movs	r2, #0
 8006912:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006914:	4b25      	ldr	r3, [pc, #148]	@ (80069ac <vTaskSwitchContext+0xb4>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	e013      	b.n	8006944 <vTaskSwitchContext+0x4c>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10d      	bne.n	800693e <vTaskSwitchContext+0x46>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006926:	b672      	cpsid	i
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	b662      	cpsie	i
 8006936:	607b      	str	r3, [r7, #4]
}
 8006938:	bf00      	nop
 800693a:	bf00      	nop
 800693c:	e7fd      	b.n	800693a <vTaskSwitchContext+0x42>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3b01      	subs	r3, #1
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	491a      	ldr	r1, [pc, #104]	@ (80069b0 <vTaskSwitchContext+0xb8>)
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0e1      	beq.n	800691c <vTaskSwitchContext+0x24>
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4613      	mov	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4a13      	ldr	r2, [pc, #76]	@ (80069b0 <vTaskSwitchContext+0xb8>)
 8006964:	4413      	add	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	605a      	str	r2, [r3, #4]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	3308      	adds	r3, #8
 800697a:	429a      	cmp	r2, r3
 800697c:	d104      	bne.n	8006988 <vTaskSwitchContext+0x90>
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	605a      	str	r2, [r3, #4]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	4a09      	ldr	r2, [pc, #36]	@ (80069b4 <vTaskSwitchContext+0xbc>)
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	4a06      	ldr	r2, [pc, #24]	@ (80069ac <vTaskSwitchContext+0xb4>)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6013      	str	r3, [r2, #0]
}
 8006998:	bf00      	nop
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	20000e48 	.word	0x20000e48
 80069a8:	20000e34 	.word	0x20000e34
 80069ac:	20000e28 	.word	0x20000e28
 80069b0:	20000950 	.word	0x20000950
 80069b4:	2000094c 	.word	0x2000094c

080069b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10d      	bne.n	80069e4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069cc:	b672      	cpsid	i
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	b662      	cpsie	i
 80069dc:	60fb      	str	r3, [r7, #12]
}
 80069de:	bf00      	nop
 80069e0:	bf00      	nop
 80069e2:	e7fd      	b.n	80069e0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069e4:	4b07      	ldr	r3, [pc, #28]	@ (8006a04 <vTaskPlaceOnEventList+0x4c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3318      	adds	r3, #24
 80069ea:	4619      	mov	r1, r3
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7fe fe72 	bl	80056d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069f2:	2101      	movs	r1, #1
 80069f4:	6838      	ldr	r0, [r7, #0]
 80069f6:	f000 fa8f 	bl	8006f18 <prvAddCurrentTaskToDelayedList>
}
 80069fa:	bf00      	nop
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	2000094c 	.word	0x2000094c

08006a08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10d      	bne.n	8006a36 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1e:	b672      	cpsid	i
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	b662      	cpsie	i
 8006a2e:	617b      	str	r3, [r7, #20]
}
 8006a30:	bf00      	nop
 8006a32:	bf00      	nop
 8006a34:	e7fd      	b.n	8006a32 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a36:	4b0a      	ldr	r3, [pc, #40]	@ (8006a60 <vTaskPlaceOnEventListRestricted+0x58>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3318      	adds	r3, #24
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f7fe fe25 	bl	800568e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006a4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a50:	6879      	ldr	r1, [r7, #4]
 8006a52:	68b8      	ldr	r0, [r7, #8]
 8006a54:	f000 fa60 	bl	8006f18 <prvAddCurrentTaskToDelayedList>
	}
 8006a58:	bf00      	nop
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	2000094c 	.word	0x2000094c

08006a64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10d      	bne.n	8006a96 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7e:	b672      	cpsid	i
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	b662      	cpsie	i
 8006a8e:	60fb      	str	r3, [r7, #12]
}
 8006a90:	bf00      	nop
 8006a92:	bf00      	nop
 8006a94:	e7fd      	b.n	8006a92 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	3318      	adds	r3, #24
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fe54 	bl	8005748 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b18 <xTaskRemoveFromEventList+0xb4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d11d      	bne.n	8006ae4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fe fe4b 	bl	8005748 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab6:	4b19      	ldr	r3, [pc, #100]	@ (8006b1c <xTaskRemoveFromEventList+0xb8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d903      	bls.n	8006ac6 <xTaskRemoveFromEventList+0x62>
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac2:	4a16      	ldr	r2, [pc, #88]	@ (8006b1c <xTaskRemoveFromEventList+0xb8>)
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aca:	4613      	mov	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4a13      	ldr	r2, [pc, #76]	@ (8006b20 <xTaskRemoveFromEventList+0xbc>)
 8006ad4:	441a      	add	r2, r3
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	4619      	mov	r1, r3
 8006adc:	4610      	mov	r0, r2
 8006ade:	f7fe fdd6 	bl	800568e <vListInsertEnd>
 8006ae2:	e005      	b.n	8006af0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	3318      	adds	r3, #24
 8006ae8:	4619      	mov	r1, r3
 8006aea:	480e      	ldr	r0, [pc, #56]	@ (8006b24 <xTaskRemoveFromEventList+0xc0>)
 8006aec:	f7fe fdcf 	bl	800568e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006af4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b28 <xTaskRemoveFromEventList+0xc4>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d905      	bls.n	8006b0a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006afe:	2301      	movs	r3, #1
 8006b00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b02:	4b0a      	ldr	r3, [pc, #40]	@ (8006b2c <xTaskRemoveFromEventList+0xc8>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	e001      	b.n	8006b0e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b0e:	697b      	ldr	r3, [r7, #20]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3718      	adds	r7, #24
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	20000e48 	.word	0x20000e48
 8006b1c:	20000e28 	.word	0x20000e28
 8006b20:	20000950 	.word	0x20000950
 8006b24:	20000de0 	.word	0x20000de0
 8006b28:	2000094c 	.word	0x2000094c
 8006b2c:	20000e34 	.word	0x20000e34

08006b30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b38:	4b06      	ldr	r3, [pc, #24]	@ (8006b54 <vTaskInternalSetTimeOutState+0x24>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b40:	4b05      	ldr	r3, [pc, #20]	@ (8006b58 <vTaskInternalSetTimeOutState+0x28>)
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	605a      	str	r2, [r3, #4]
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	20000e38 	.word	0x20000e38
 8006b58:	20000e24 	.word	0x20000e24

08006b5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b088      	sub	sp, #32
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10d      	bne.n	8006b88 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b70:	b672      	cpsid	i
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	b662      	cpsie	i
 8006b80:	613b      	str	r3, [r7, #16]
}
 8006b82:	bf00      	nop
 8006b84:	bf00      	nop
 8006b86:	e7fd      	b.n	8006b84 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10d      	bne.n	8006baa <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b92:	b672      	cpsid	i
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	b662      	cpsie	i
 8006ba2:	60fb      	str	r3, [r7, #12]
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop
 8006ba8:	e7fd      	b.n	8006ba6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006baa:	f000 fe7f 	bl	80078ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bae:	4b1d      	ldr	r3, [pc, #116]	@ (8006c24 <xTaskCheckForTimeOut+0xc8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bc6:	d102      	bne.n	8006bce <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	61fb      	str	r3, [r7, #28]
 8006bcc:	e023      	b.n	8006c16 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	4b15      	ldr	r3, [pc, #84]	@ (8006c28 <xTaskCheckForTimeOut+0xcc>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d007      	beq.n	8006bea <xTaskCheckForTimeOut+0x8e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d302      	bcc.n	8006bea <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006be4:	2301      	movs	r3, #1
 8006be6:	61fb      	str	r3, [r7, #28]
 8006be8:	e015      	b.n	8006c16 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d20b      	bcs.n	8006c0c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	1ad2      	subs	r2, r2, r3
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff ff95 	bl	8006b30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c06:	2300      	movs	r3, #0
 8006c08:	61fb      	str	r3, [r7, #28]
 8006c0a:	e004      	b.n	8006c16 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c12:	2301      	movs	r3, #1
 8006c14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c16:	f000 fe7f 	bl	8007918 <vPortExitCritical>

	return xReturn;
 8006c1a:	69fb      	ldr	r3, [r7, #28]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3720      	adds	r7, #32
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	20000e24 	.word	0x20000e24
 8006c28:	20000e38 	.word	0x20000e38

08006c2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c30:	4b03      	ldr	r3, [pc, #12]	@ (8006c40 <vTaskMissedYield+0x14>)
 8006c32:	2201      	movs	r2, #1
 8006c34:	601a      	str	r2, [r3, #0]
}
 8006c36:	bf00      	nop
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	20000e34 	.word	0x20000e34

08006c44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c4c:	f000 f852 	bl	8006cf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c50:	4b06      	ldr	r3, [pc, #24]	@ (8006c6c <prvIdleTask+0x28>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d9f9      	bls.n	8006c4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c58:	4b05      	ldr	r3, [pc, #20]	@ (8006c70 <prvIdleTask+0x2c>)
 8006c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c68:	e7f0      	b.n	8006c4c <prvIdleTask+0x8>
 8006c6a:	bf00      	nop
 8006c6c:	20000950 	.word	0x20000950
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	607b      	str	r3, [r7, #4]
 8006c7e:	e00c      	b.n	8006c9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4a12      	ldr	r2, [pc, #72]	@ (8006cd4 <prvInitialiseTaskLists+0x60>)
 8006c8c:	4413      	add	r3, r2
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fe fcd0 	bl	8005634 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	3301      	adds	r3, #1
 8006c98:	607b      	str	r3, [r7, #4]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b37      	cmp	r3, #55	@ 0x37
 8006c9e:	d9ef      	bls.n	8006c80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ca0:	480d      	ldr	r0, [pc, #52]	@ (8006cd8 <prvInitialiseTaskLists+0x64>)
 8006ca2:	f7fe fcc7 	bl	8005634 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ca6:	480d      	ldr	r0, [pc, #52]	@ (8006cdc <prvInitialiseTaskLists+0x68>)
 8006ca8:	f7fe fcc4 	bl	8005634 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cac:	480c      	ldr	r0, [pc, #48]	@ (8006ce0 <prvInitialiseTaskLists+0x6c>)
 8006cae:	f7fe fcc1 	bl	8005634 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cb2:	480c      	ldr	r0, [pc, #48]	@ (8006ce4 <prvInitialiseTaskLists+0x70>)
 8006cb4:	f7fe fcbe 	bl	8005634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cb8:	480b      	ldr	r0, [pc, #44]	@ (8006ce8 <prvInitialiseTaskLists+0x74>)
 8006cba:	f7fe fcbb 	bl	8005634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8006cec <prvInitialiseTaskLists+0x78>)
 8006cc0:	4a05      	ldr	r2, [pc, #20]	@ (8006cd8 <prvInitialiseTaskLists+0x64>)
 8006cc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf0 <prvInitialiseTaskLists+0x7c>)
 8006cc6:	4a05      	ldr	r2, [pc, #20]	@ (8006cdc <prvInitialiseTaskLists+0x68>)
 8006cc8:	601a      	str	r2, [r3, #0]
}
 8006cca:	bf00      	nop
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000950 	.word	0x20000950
 8006cd8:	20000db0 	.word	0x20000db0
 8006cdc:	20000dc4 	.word	0x20000dc4
 8006ce0:	20000de0 	.word	0x20000de0
 8006ce4:	20000df4 	.word	0x20000df4
 8006ce8:	20000e0c 	.word	0x20000e0c
 8006cec:	20000dd8 	.word	0x20000dd8
 8006cf0:	20000ddc 	.word	0x20000ddc

08006cf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cfa:	e019      	b.n	8006d30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006cfc:	f000 fdd6 	bl	80078ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d00:	4b10      	ldr	r3, [pc, #64]	@ (8006d44 <prvCheckTasksWaitingTermination+0x50>)
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fe fd1b 	bl	8005748 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d12:	4b0d      	ldr	r3, [pc, #52]	@ (8006d48 <prvCheckTasksWaitingTermination+0x54>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	4a0b      	ldr	r2, [pc, #44]	@ (8006d48 <prvCheckTasksWaitingTermination+0x54>)
 8006d1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d4c <prvCheckTasksWaitingTermination+0x58>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3b01      	subs	r3, #1
 8006d22:	4a0a      	ldr	r2, [pc, #40]	@ (8006d4c <prvCheckTasksWaitingTermination+0x58>)
 8006d24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d26:	f000 fdf7 	bl	8007918 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f810 	bl	8006d50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d30:	4b06      	ldr	r3, [pc, #24]	@ (8006d4c <prvCheckTasksWaitingTermination+0x58>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e1      	bne.n	8006cfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d38:	bf00      	nop
 8006d3a:	bf00      	nop
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	20000df4 	.word	0x20000df4
 8006d48:	20000e20 	.word	0x20000e20
 8006d4c:	20000e08 	.word	0x20000e08

08006d50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d108      	bne.n	8006d74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 ff9c 	bl	8007ca4 <vPortFree>
				vPortFree( pxTCB );
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 ff99 	bl	8007ca4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d72:	e01b      	b.n	8006dac <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d103      	bne.n	8006d86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 ff90 	bl	8007ca4 <vPortFree>
	}
 8006d84:	e012      	b.n	8006dac <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d00d      	beq.n	8006dac <prvDeleteTCB+0x5c>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d94:	b672      	cpsid	i
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	b662      	cpsie	i
 8006da4:	60fb      	str	r3, [r7, #12]
}
 8006da6:	bf00      	nop
 8006da8:	bf00      	nop
 8006daa:	e7fd      	b.n	8006da8 <prvDeleteTCB+0x58>
	}
 8006dac:	bf00      	nop
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dba:	4b0c      	ldr	r3, [pc, #48]	@ (8006dec <prvResetNextTaskUnblockTime+0x38>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d104      	bne.n	8006dce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006df0 <prvResetNextTaskUnblockTime+0x3c>)
 8006dc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006dca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006dcc:	e008      	b.n	8006de0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dce:	4b07      	ldr	r3, [pc, #28]	@ (8006dec <prvResetNextTaskUnblockTime+0x38>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	4a04      	ldr	r2, [pc, #16]	@ (8006df0 <prvResetNextTaskUnblockTime+0x3c>)
 8006dde:	6013      	str	r3, [r2, #0]
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	20000dd8 	.word	0x20000dd8
 8006df0:	20000e40 	.word	0x20000e40

08006df4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006e28 <xTaskGetSchedulerState+0x34>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d102      	bne.n	8006e08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e02:	2301      	movs	r3, #1
 8006e04:	607b      	str	r3, [r7, #4]
 8006e06:	e008      	b.n	8006e1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e08:	4b08      	ldr	r3, [pc, #32]	@ (8006e2c <xTaskGetSchedulerState+0x38>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d102      	bne.n	8006e16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e10:	2302      	movs	r3, #2
 8006e12:	607b      	str	r3, [r7, #4]
 8006e14:	e001      	b.n	8006e1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e16:	2300      	movs	r3, #0
 8006e18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e1a:	687b      	ldr	r3, [r7, #4]
	}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	20000e2c 	.word	0x20000e2c
 8006e2c:	20000e48 	.word	0x20000e48

08006e30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d05c      	beq.n	8006f00 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e46:	4b31      	ldr	r3, [pc, #196]	@ (8006f0c <xTaskPriorityDisinherit+0xdc>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d00d      	beq.n	8006e6c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e54:	b672      	cpsid	i
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	b662      	cpsie	i
 8006e64:	60fb      	str	r3, [r7, #12]
}
 8006e66:	bf00      	nop
 8006e68:	bf00      	nop
 8006e6a:	e7fd      	b.n	8006e68 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10d      	bne.n	8006e90 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e78:	b672      	cpsid	i
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	b662      	cpsie	i
 8006e88:	60bb      	str	r3, [r7, #8]
}
 8006e8a:	bf00      	nop
 8006e8c:	bf00      	nop
 8006e8e:	e7fd      	b.n	8006e8c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e94:	1e5a      	subs	r2, r3, #1
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d02c      	beq.n	8006f00 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d128      	bne.n	8006f00 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe fc48 	bl	8005748 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8006f10 <xTaskPriorityDisinherit+0xe0>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d903      	bls.n	8006ee0 <xTaskPriorityDisinherit+0xb0>
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006edc:	4a0c      	ldr	r2, [pc, #48]	@ (8006f10 <xTaskPriorityDisinherit+0xe0>)
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4a09      	ldr	r2, [pc, #36]	@ (8006f14 <xTaskPriorityDisinherit+0xe4>)
 8006eee:	441a      	add	r2, r3
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	f7fe fbc9 	bl	800568e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006efc:	2301      	movs	r3, #1
 8006efe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f00:	697b      	ldr	r3, [r7, #20]
	}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3718      	adds	r7, #24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	2000094c 	.word	0x2000094c
 8006f10:	20000e28 	.word	0x20000e28
 8006f14:	20000950 	.word	0x20000950

08006f18 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f22:	4b21      	ldr	r3, [pc, #132]	@ (8006fa8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f28:	4b20      	ldr	r3, [pc, #128]	@ (8006fac <prvAddCurrentTaskToDelayedList+0x94>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe fc0a 	bl	8005748 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f3a:	d10a      	bne.n	8006f52 <prvAddCurrentTaskToDelayedList+0x3a>
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d007      	beq.n	8006f52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f42:	4b1a      	ldr	r3, [pc, #104]	@ (8006fac <prvAddCurrentTaskToDelayedList+0x94>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4819      	ldr	r0, [pc, #100]	@ (8006fb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f4c:	f7fe fb9f 	bl	800568e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f50:	e026      	b.n	8006fa0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4413      	add	r3, r2
 8006f58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f5a:	4b14      	ldr	r3, [pc, #80]	@ (8006fac <prvAddCurrentTaskToDelayedList+0x94>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d209      	bcs.n	8006f7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f6a:	4b12      	ldr	r3, [pc, #72]	@ (8006fb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8006fac <prvAddCurrentTaskToDelayedList+0x94>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4619      	mov	r1, r3
 8006f76:	4610      	mov	r0, r2
 8006f78:	f7fe fbad 	bl	80056d6 <vListInsert>
}
 8006f7c:	e010      	b.n	8006fa0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	4b0a      	ldr	r3, [pc, #40]	@ (8006fac <prvAddCurrentTaskToDelayedList+0x94>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3304      	adds	r3, #4
 8006f88:	4619      	mov	r1, r3
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	f7fe fba3 	bl	80056d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f90:	4b0a      	ldr	r3, [pc, #40]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d202      	bcs.n	8006fa0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f9a:	4a08      	ldr	r2, [pc, #32]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	6013      	str	r3, [r2, #0]
}
 8006fa0:	bf00      	nop
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	20000e24 	.word	0x20000e24
 8006fac:	2000094c 	.word	0x2000094c
 8006fb0:	20000e0c 	.word	0x20000e0c
 8006fb4:	20000ddc 	.word	0x20000ddc
 8006fb8:	20000dd8 	.word	0x20000dd8
 8006fbc:	20000e40 	.word	0x20000e40

08006fc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08a      	sub	sp, #40	@ 0x28
 8006fc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006fca:	f000 fb21 	bl	8007610 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006fce:	4b1e      	ldr	r3, [pc, #120]	@ (8007048 <xTimerCreateTimerTask+0x88>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d021      	beq.n	800701a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006fde:	1d3a      	adds	r2, r7, #4
 8006fe0:	f107 0108 	add.w	r1, r7, #8
 8006fe4:	f107 030c 	add.w	r3, r7, #12
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fe fb09 	bl	8005600 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	9202      	str	r2, [sp, #8]
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	460a      	mov	r2, r1
 8007000:	4912      	ldr	r1, [pc, #72]	@ (800704c <xTimerCreateTimerTask+0x8c>)
 8007002:	4813      	ldr	r0, [pc, #76]	@ (8007050 <xTimerCreateTimerTask+0x90>)
 8007004:	f7ff f8e4 	bl	80061d0 <xTaskCreateStatic>
 8007008:	4603      	mov	r3, r0
 800700a:	4a12      	ldr	r2, [pc, #72]	@ (8007054 <xTimerCreateTimerTask+0x94>)
 800700c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800700e:	4b11      	ldr	r3, [pc, #68]	@ (8007054 <xTimerCreateTimerTask+0x94>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007016:	2301      	movs	r3, #1
 8007018:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10d      	bne.n	800703c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007024:	b672      	cpsid	i
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	b662      	cpsie	i
 8007034:	613b      	str	r3, [r7, #16]
}
 8007036:	bf00      	nop
 8007038:	bf00      	nop
 800703a:	e7fd      	b.n	8007038 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800703c:	697b      	ldr	r3, [r7, #20]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20000e7c 	.word	0x20000e7c
 800704c:	08009cf4 	.word	0x08009cf4
 8007050:	08007199 	.word	0x08007199
 8007054:	20000e80 	.word	0x20000e80

08007058 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08a      	sub	sp, #40	@ 0x28
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007066:	2300      	movs	r3, #0
 8007068:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10d      	bne.n	800708c <xTimerGenericCommand+0x34>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007074:	b672      	cpsid	i
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	b662      	cpsie	i
 8007084:	623b      	str	r3, [r7, #32]
}
 8007086:	bf00      	nop
 8007088:	bf00      	nop
 800708a:	e7fd      	b.n	8007088 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800708c:	4b19      	ldr	r3, [pc, #100]	@ (80070f4 <xTimerGenericCommand+0x9c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d02a      	beq.n	80070ea <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b05      	cmp	r3, #5
 80070a4:	dc18      	bgt.n	80070d8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070a6:	f7ff fea5 	bl	8006df4 <xTaskGetSchedulerState>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d109      	bne.n	80070c4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070b0:	4b10      	ldr	r3, [pc, #64]	@ (80070f4 <xTimerGenericCommand+0x9c>)
 80070b2:	6818      	ldr	r0, [r3, #0]
 80070b4:	f107 0110 	add.w	r1, r7, #16
 80070b8:	2300      	movs	r3, #0
 80070ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070bc:	f7fe fc84 	bl	80059c8 <xQueueGenericSend>
 80070c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80070c2:	e012      	b.n	80070ea <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070c4:	4b0b      	ldr	r3, [pc, #44]	@ (80070f4 <xTimerGenericCommand+0x9c>)
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	f107 0110 	add.w	r1, r7, #16
 80070cc:	2300      	movs	r3, #0
 80070ce:	2200      	movs	r2, #0
 80070d0:	f7fe fc7a 	bl	80059c8 <xQueueGenericSend>
 80070d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80070d6:	e008      	b.n	80070ea <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070d8:	4b06      	ldr	r3, [pc, #24]	@ (80070f4 <xTimerGenericCommand+0x9c>)
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	f107 0110 	add.w	r1, r7, #16
 80070e0:	2300      	movs	r3, #0
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	f7fe fd7a 	bl	8005bdc <xQueueGenericSendFromISR>
 80070e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3728      	adds	r7, #40	@ 0x28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	20000e7c 	.word	0x20000e7c

080070f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007102:	4b24      	ldr	r3, [pc, #144]	@ (8007194 <prvProcessExpiredTimer+0x9c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	3304      	adds	r3, #4
 8007110:	4618      	mov	r0, r3
 8007112:	f7fe fb19 	bl	8005748 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	2b00      	cmp	r3, #0
 8007122:	d025      	beq.n	8007170 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	699a      	ldr	r2, [r3, #24]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	18d1      	adds	r1, r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	6978      	ldr	r0, [r7, #20]
 8007132:	f000 f8d7 	bl	80072e4 <prvInsertTimerInActiveList>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d022      	beq.n	8007182 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800713c:	2300      	movs	r3, #0
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	2300      	movs	r3, #0
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	2100      	movs	r1, #0
 8007146:	6978      	ldr	r0, [r7, #20]
 8007148:	f7ff ff86 	bl	8007058 <xTimerGenericCommand>
 800714c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d116      	bne.n	8007182 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007158:	b672      	cpsid	i
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	b662      	cpsie	i
 8007168:	60fb      	str	r3, [r7, #12]
}
 800716a:	bf00      	nop
 800716c:	bf00      	nop
 800716e:	e7fd      	b.n	800716c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007176:	f023 0301 	bic.w	r3, r3, #1
 800717a:	b2da      	uxtb	r2, r3
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	6978      	ldr	r0, [r7, #20]
 8007188:	4798      	blx	r3
}
 800718a:	bf00      	nop
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	20000e74 	.word	0x20000e74

08007198 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071a0:	f107 0308 	add.w	r3, r7, #8
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 f859 	bl	800725c <prvGetNextExpireTime>
 80071aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	4619      	mov	r1, r3
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 f805 	bl	80071c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071b6:	f000 f8d7 	bl	8007368 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071ba:	bf00      	nop
 80071bc:	e7f0      	b.n	80071a0 <prvTimerTask+0x8>
	...

080071c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071ca:	f7ff fa1b 	bl	8006604 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071ce:	f107 0308 	add.w	r3, r7, #8
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 f866 	bl	80072a4 <prvSampleTimeNow>
 80071d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d130      	bne.n	8007242 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10a      	bne.n	80071fc <prvProcessTimerOrBlockTask+0x3c>
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d806      	bhi.n	80071fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80071ee:	f7ff fa17 	bl	8006620 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff ff7f 	bl	80070f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071fa:	e024      	b.n	8007246 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d008      	beq.n	8007214 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007202:	4b13      	ldr	r3, [pc, #76]	@ (8007250 <prvProcessTimerOrBlockTask+0x90>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <prvProcessTimerOrBlockTask+0x50>
 800720c:	2301      	movs	r3, #1
 800720e:	e000      	b.n	8007212 <prvProcessTimerOrBlockTask+0x52>
 8007210:	2300      	movs	r3, #0
 8007212:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007214:	4b0f      	ldr	r3, [pc, #60]	@ (8007254 <prvProcessTimerOrBlockTask+0x94>)
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	4619      	mov	r1, r3
 8007222:	f7fe ffa1 	bl	8006168 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007226:	f7ff f9fb 	bl	8006620 <xTaskResumeAll>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007230:	4b09      	ldr	r3, [pc, #36]	@ (8007258 <prvProcessTimerOrBlockTask+0x98>)
 8007232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	f3bf 8f6f 	isb	sy
}
 8007240:	e001      	b.n	8007246 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007242:	f7ff f9ed 	bl	8006620 <xTaskResumeAll>
}
 8007246:	bf00      	nop
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000e78 	.word	0x20000e78
 8007254:	20000e7c 	.word	0x20000e7c
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007264:	4b0e      	ldr	r3, [pc, #56]	@ (80072a0 <prvGetNextExpireTime+0x44>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <prvGetNextExpireTime+0x16>
 800726e:	2201      	movs	r2, #1
 8007270:	e000      	b.n	8007274 <prvGetNextExpireTime+0x18>
 8007272:	2200      	movs	r2, #0
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d105      	bne.n	800728c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007280:	4b07      	ldr	r3, [pc, #28]	@ (80072a0 <prvGetNextExpireTime+0x44>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	e001      	b.n	8007290 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800728c:	2300      	movs	r3, #0
 800728e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007290:	68fb      	ldr	r3, [r7, #12]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	20000e74 	.word	0x20000e74

080072a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072ac:	f7ff fa58 	bl	8006760 <xTaskGetTickCount>
 80072b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072b2:	4b0b      	ldr	r3, [pc, #44]	@ (80072e0 <prvSampleTimeNow+0x3c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d205      	bcs.n	80072c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072bc:	f000 f940 	bl	8007540 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e002      	b.n	80072ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072ce:	4a04      	ldr	r2, [pc, #16]	@ (80072e0 <prvSampleTimeNow+0x3c>)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072d4:	68fb      	ldr	r3, [r7, #12]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000e84 	.word	0x20000e84

080072e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	429a      	cmp	r2, r3
 8007308:	d812      	bhi.n	8007330 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	1ad2      	subs	r2, r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	429a      	cmp	r2, r3
 8007316:	d302      	bcc.n	800731e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007318:	2301      	movs	r3, #1
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	e01b      	b.n	8007356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800731e:	4b10      	ldr	r3, [pc, #64]	@ (8007360 <prvInsertTimerInActiveList+0x7c>)
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	3304      	adds	r3, #4
 8007326:	4619      	mov	r1, r3
 8007328:	4610      	mov	r0, r2
 800732a:	f7fe f9d4 	bl	80056d6 <vListInsert>
 800732e:	e012      	b.n	8007356 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d206      	bcs.n	8007346 <prvInsertTimerInActiveList+0x62>
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	429a      	cmp	r2, r3
 800733e:	d302      	bcc.n	8007346 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007340:	2301      	movs	r3, #1
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	e007      	b.n	8007356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007346:	4b07      	ldr	r3, [pc, #28]	@ (8007364 <prvInsertTimerInActiveList+0x80>)
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3304      	adds	r3, #4
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f7fe f9c0 	bl	80056d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007356:	697b      	ldr	r3, [r7, #20]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	20000e78 	.word	0x20000e78
 8007364:	20000e74 	.word	0x20000e74

08007368 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08e      	sub	sp, #56	@ 0x38
 800736c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800736e:	e0d4      	b.n	800751a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	da1b      	bge.n	80073ae <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007376:	1d3b      	adds	r3, r7, #4
 8007378:	3304      	adds	r3, #4
 800737a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800737c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10d      	bne.n	800739e <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007386:	b672      	cpsid	i
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	b662      	cpsie	i
 8007396:	61fb      	str	r3, [r7, #28]
}
 8007398:	bf00      	nop
 800739a:	bf00      	nop
 800739c:	e7fd      	b.n	800739a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800739e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073a4:	6850      	ldr	r0, [r2, #4]
 80073a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073a8:	6892      	ldr	r2, [r2, #8]
 80073aa:	4611      	mov	r1, r2
 80073ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f2c0 80b2 	blt.w	800751a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d004      	beq.n	80073cc <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c4:	3304      	adds	r3, #4
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe f9be 	bl	8005748 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073cc:	463b      	mov	r3, r7
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff ff68 	bl	80072a4 <prvSampleTimeNow>
 80073d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b09      	cmp	r3, #9
 80073da:	f200 809b 	bhi.w	8007514 <prvProcessReceivedCommands+0x1ac>
 80073de:	a201      	add	r2, pc, #4	@ (adr r2, 80073e4 <prvProcessReceivedCommands+0x7c>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	0800740d 	.word	0x0800740d
 80073e8:	0800740d 	.word	0x0800740d
 80073ec:	0800740d 	.word	0x0800740d
 80073f0:	08007487 	.word	0x08007487
 80073f4:	0800749b 	.word	0x0800749b
 80073f8:	080074eb 	.word	0x080074eb
 80073fc:	0800740d 	.word	0x0800740d
 8007400:	0800740d 	.word	0x0800740d
 8007404:	08007487 	.word	0x08007487
 8007408:	0800749b 	.word	0x0800749b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800740c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007412:	f043 0301 	orr.w	r3, r3, #1
 8007416:	b2da      	uxtb	r2, r3
 8007418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	18d1      	adds	r1, r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800742a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800742c:	f7ff ff5a 	bl	80072e4 <prvInsertTimerInActiveList>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d070      	beq.n	8007518 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800743c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800743e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007440:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	d065      	beq.n	8007518 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	441a      	add	r2, r3
 8007454:	2300      	movs	r3, #0
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	2300      	movs	r3, #0
 800745a:	2100      	movs	r1, #0
 800745c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800745e:	f7ff fdfb 	bl	8007058 <xTimerGenericCommand>
 8007462:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d156      	bne.n	8007518 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746e:	b672      	cpsid	i
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	b662      	cpsie	i
 800747e:	61bb      	str	r3, [r7, #24]
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	e7fd      	b.n	8007482 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800748c:	f023 0301 	bic.w	r3, r3, #1
 8007490:	b2da      	uxtb	r2, r3
 8007492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007494:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007498:	e03f      	b.n	800751a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800749a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074a0:	f043 0301 	orr.w	r3, r3, #1
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10d      	bne.n	80074d6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074be:	b672      	cpsid	i
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	b662      	cpsie	i
 80074ce:	617b      	str	r3, [r7, #20]
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	e7fd      	b.n	80074d2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d8:	699a      	ldr	r2, [r3, #24]
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	18d1      	adds	r1, r2, r3
 80074de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074e4:	f7ff fefe 	bl	80072e4 <prvInsertTimerInActiveList>
					break;
 80074e8:	e017      	b.n	800751a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d103      	bne.n	8007500 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80074f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074fa:	f000 fbd3 	bl	8007ca4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074fe:	e00c      	b.n	800751a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007502:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007506:	f023 0301 	bic.w	r3, r3, #1
 800750a:	b2da      	uxtb	r2, r3
 800750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007512:	e002      	b.n	800751a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007514:	bf00      	nop
 8007516:	e000      	b.n	800751a <prvProcessReceivedCommands+0x1b2>
					break;
 8007518:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800751a:	4b08      	ldr	r3, [pc, #32]	@ (800753c <prvProcessReceivedCommands+0x1d4>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	1d39      	adds	r1, r7, #4
 8007520:	2200      	movs	r2, #0
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fbfe 	bl	8005d24 <xQueueReceive>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	f47f af20 	bne.w	8007370 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007530:	bf00      	nop
 8007532:	bf00      	nop
 8007534:	3730      	adds	r7, #48	@ 0x30
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	20000e7c 	.word	0x20000e7c

08007540 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007546:	e04b      	b.n	80075e0 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007548:	4b2f      	ldr	r3, [pc, #188]	@ (8007608 <prvSwitchTimerLists+0xc8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007552:	4b2d      	ldr	r3, [pc, #180]	@ (8007608 <prvSwitchTimerLists+0xc8>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3304      	adds	r3, #4
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe f8f1 	bl	8005748 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d031      	beq.n	80075e0 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	4413      	add	r3, r2
 8007584:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	429a      	cmp	r2, r3
 800758c:	d90e      	bls.n	80075ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800759a:	4b1b      	ldr	r3, [pc, #108]	@ (8007608 <prvSwitchTimerLists+0xc8>)
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3304      	adds	r3, #4
 80075a2:	4619      	mov	r1, r3
 80075a4:	4610      	mov	r0, r2
 80075a6:	f7fe f896 	bl	80056d6 <vListInsert>
 80075aa:	e019      	b.n	80075e0 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075ac:	2300      	movs	r3, #0
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	2300      	movs	r3, #0
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	2100      	movs	r1, #0
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f7ff fd4e 	bl	8007058 <xTimerGenericCommand>
 80075bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10d      	bne.n	80075e0 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c8:	b672      	cpsid	i
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	b662      	cpsie	i
 80075d8:	603b      	str	r3, [r7, #0]
}
 80075da:	bf00      	nop
 80075dc:	bf00      	nop
 80075de:	e7fd      	b.n	80075dc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075e0:	4b09      	ldr	r3, [pc, #36]	@ (8007608 <prvSwitchTimerLists+0xc8>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1ae      	bne.n	8007548 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075ea:	4b07      	ldr	r3, [pc, #28]	@ (8007608 <prvSwitchTimerLists+0xc8>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075f0:	4b06      	ldr	r3, [pc, #24]	@ (800760c <prvSwitchTimerLists+0xcc>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a04      	ldr	r2, [pc, #16]	@ (8007608 <prvSwitchTimerLists+0xc8>)
 80075f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075f8:	4a04      	ldr	r2, [pc, #16]	@ (800760c <prvSwitchTimerLists+0xcc>)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	6013      	str	r3, [r2, #0]
}
 80075fe:	bf00      	nop
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20000e74 	.word	0x20000e74
 800760c:	20000e78 	.word	0x20000e78

08007610 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007616:	f000 f949 	bl	80078ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800761a:	4b15      	ldr	r3, [pc, #84]	@ (8007670 <prvCheckForValidListAndQueue+0x60>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d120      	bne.n	8007664 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007622:	4814      	ldr	r0, [pc, #80]	@ (8007674 <prvCheckForValidListAndQueue+0x64>)
 8007624:	f7fe f806 	bl	8005634 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007628:	4813      	ldr	r0, [pc, #76]	@ (8007678 <prvCheckForValidListAndQueue+0x68>)
 800762a:	f7fe f803 	bl	8005634 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800762e:	4b13      	ldr	r3, [pc, #76]	@ (800767c <prvCheckForValidListAndQueue+0x6c>)
 8007630:	4a10      	ldr	r2, [pc, #64]	@ (8007674 <prvCheckForValidListAndQueue+0x64>)
 8007632:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007634:	4b12      	ldr	r3, [pc, #72]	@ (8007680 <prvCheckForValidListAndQueue+0x70>)
 8007636:	4a10      	ldr	r2, [pc, #64]	@ (8007678 <prvCheckForValidListAndQueue+0x68>)
 8007638:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800763a:	2300      	movs	r3, #0
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	4b11      	ldr	r3, [pc, #68]	@ (8007684 <prvCheckForValidListAndQueue+0x74>)
 8007640:	4a11      	ldr	r2, [pc, #68]	@ (8007688 <prvCheckForValidListAndQueue+0x78>)
 8007642:	2110      	movs	r1, #16
 8007644:	200a      	movs	r0, #10
 8007646:	f7fe f915 	bl	8005874 <xQueueGenericCreateStatic>
 800764a:	4603      	mov	r3, r0
 800764c:	4a08      	ldr	r2, [pc, #32]	@ (8007670 <prvCheckForValidListAndQueue+0x60>)
 800764e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007650:	4b07      	ldr	r3, [pc, #28]	@ (8007670 <prvCheckForValidListAndQueue+0x60>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d005      	beq.n	8007664 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007658:	4b05      	ldr	r3, [pc, #20]	@ (8007670 <prvCheckForValidListAndQueue+0x60>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	490b      	ldr	r1, [pc, #44]	@ (800768c <prvCheckForValidListAndQueue+0x7c>)
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe fd58 	bl	8006114 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007664:	f000 f958 	bl	8007918 <vPortExitCritical>
}
 8007668:	bf00      	nop
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000e7c 	.word	0x20000e7c
 8007674:	20000e4c 	.word	0x20000e4c
 8007678:	20000e60 	.word	0x20000e60
 800767c:	20000e74 	.word	0x20000e74
 8007680:	20000e78 	.word	0x20000e78
 8007684:	20000f28 	.word	0x20000f28
 8007688:	20000e88 	.word	0x20000e88
 800768c:	08009cfc 	.word	0x08009cfc

08007690 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3b04      	subs	r3, #4
 80076a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80076a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3b04      	subs	r3, #4
 80076ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f023 0201 	bic.w	r2, r3, #1
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3b04      	subs	r3, #4
 80076be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076c0:	4a0c      	ldr	r2, [pc, #48]	@ (80076f4 <pxPortInitialiseStack+0x64>)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3b14      	subs	r3, #20
 80076ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3b04      	subs	r3, #4
 80076d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f06f 0202 	mvn.w	r2, #2
 80076de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3b20      	subs	r3, #32
 80076e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076e6:	68fb      	ldr	r3, [r7, #12]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	080076f9 	.word	0x080076f9

080076f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007702:	4b15      	ldr	r3, [pc, #84]	@ (8007758 <prvTaskExitError+0x60>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800770a:	d00d      	beq.n	8007728 <prvTaskExitError+0x30>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007710:	b672      	cpsid	i
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	b662      	cpsie	i
 8007720:	60fb      	str	r3, [r7, #12]
}
 8007722:	bf00      	nop
 8007724:	bf00      	nop
 8007726:	e7fd      	b.n	8007724 <prvTaskExitError+0x2c>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772c:	b672      	cpsid	i
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	b662      	cpsie	i
 800773c:	60bb      	str	r3, [r7, #8]
}
 800773e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007740:	bf00      	nop
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d0fc      	beq.n	8007742 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	2000000c 	.word	0x2000000c
 800775c:	00000000 	.word	0x00000000

08007760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007760:	4b07      	ldr	r3, [pc, #28]	@ (8007780 <pxCurrentTCBConst2>)
 8007762:	6819      	ldr	r1, [r3, #0]
 8007764:	6808      	ldr	r0, [r1, #0]
 8007766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776a:	f380 8809 	msr	PSP, r0
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f04f 0000 	mov.w	r0, #0
 8007776:	f380 8811 	msr	BASEPRI, r0
 800777a:	4770      	bx	lr
 800777c:	f3af 8000 	nop.w

08007780 <pxCurrentTCBConst2>:
 8007780:	2000094c 	.word	0x2000094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop

08007788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007788:	4808      	ldr	r0, [pc, #32]	@ (80077ac <prvPortStartFirstTask+0x24>)
 800778a:	6800      	ldr	r0, [r0, #0]
 800778c:	6800      	ldr	r0, [r0, #0]
 800778e:	f380 8808 	msr	MSP, r0
 8007792:	f04f 0000 	mov.w	r0, #0
 8007796:	f380 8814 	msr	CONTROL, r0
 800779a:	b662      	cpsie	i
 800779c:	b661      	cpsie	f
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	df00      	svc	0
 80077a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077aa:	bf00      	nop
 80077ac:	e000ed08 	.word	0xe000ed08

080077b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077b6:	4b37      	ldr	r3, [pc, #220]	@ (8007894 <xPortStartScheduler+0xe4>)
 80077b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	22ff      	movs	r2, #255	@ 0xff
 80077c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	4b2f      	ldr	r3, [pc, #188]	@ (8007898 <xPortStartScheduler+0xe8>)
 80077dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077de:	4b2f      	ldr	r3, [pc, #188]	@ (800789c <xPortStartScheduler+0xec>)
 80077e0:	2207      	movs	r2, #7
 80077e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077e4:	e009      	b.n	80077fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80077e6:	4b2d      	ldr	r3, [pc, #180]	@ (800789c <xPortStartScheduler+0xec>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	4a2b      	ldr	r2, [pc, #172]	@ (800789c <xPortStartScheduler+0xec>)
 80077ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007802:	2b80      	cmp	r3, #128	@ 0x80
 8007804:	d0ef      	beq.n	80077e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007806:	4b25      	ldr	r3, [pc, #148]	@ (800789c <xPortStartScheduler+0xec>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f1c3 0307 	rsb	r3, r3, #7
 800780e:	2b04      	cmp	r3, #4
 8007810:	d00d      	beq.n	800782e <xPortStartScheduler+0x7e>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	b672      	cpsid	i
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	b662      	cpsie	i
 8007826:	60bb      	str	r3, [r7, #8]
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800782e:	4b1b      	ldr	r3, [pc, #108]	@ (800789c <xPortStartScheduler+0xec>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	021b      	lsls	r3, r3, #8
 8007834:	4a19      	ldr	r2, [pc, #100]	@ (800789c <xPortStartScheduler+0xec>)
 8007836:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007838:	4b18      	ldr	r3, [pc, #96]	@ (800789c <xPortStartScheduler+0xec>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007840:	4a16      	ldr	r2, [pc, #88]	@ (800789c <xPortStartScheduler+0xec>)
 8007842:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	b2da      	uxtb	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800784c:	4b14      	ldr	r3, [pc, #80]	@ (80078a0 <xPortStartScheduler+0xf0>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a13      	ldr	r2, [pc, #76]	@ (80078a0 <xPortStartScheduler+0xf0>)
 8007852:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007856:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007858:	4b11      	ldr	r3, [pc, #68]	@ (80078a0 <xPortStartScheduler+0xf0>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a10      	ldr	r2, [pc, #64]	@ (80078a0 <xPortStartScheduler+0xf0>)
 800785e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007862:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007864:	f000 f8dc 	bl	8007a20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007868:	4b0e      	ldr	r3, [pc, #56]	@ (80078a4 <xPortStartScheduler+0xf4>)
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800786e:	f000 f8fb 	bl	8007a68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007872:	4b0d      	ldr	r3, [pc, #52]	@ (80078a8 <xPortStartScheduler+0xf8>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a0c      	ldr	r2, [pc, #48]	@ (80078a8 <xPortStartScheduler+0xf8>)
 8007878:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800787c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800787e:	f7ff ff83 	bl	8007788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007882:	f7ff f839 	bl	80068f8 <vTaskSwitchContext>
	prvTaskExitError();
 8007886:	f7ff ff37 	bl	80076f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	e000e400 	.word	0xe000e400
 8007898:	20000f78 	.word	0x20000f78
 800789c:	20000f7c 	.word	0x20000f7c
 80078a0:	e000ed20 	.word	0xe000ed20
 80078a4:	2000000c 	.word	0x2000000c
 80078a8:	e000ef34 	.word	0xe000ef34

080078ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b6:	b672      	cpsid	i
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	b662      	cpsie	i
 80078c6:	607b      	str	r3, [r7, #4]
}
 80078c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078ca:	4b11      	ldr	r3, [pc, #68]	@ (8007910 <vPortEnterCritical+0x64>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3301      	adds	r3, #1
 80078d0:	4a0f      	ldr	r2, [pc, #60]	@ (8007910 <vPortEnterCritical+0x64>)
 80078d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007910 <vPortEnterCritical+0x64>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d112      	bne.n	8007902 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007914 <vPortEnterCritical+0x68>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00d      	beq.n	8007902 <vPortEnterCritical+0x56>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ea:	b672      	cpsid	i
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	b662      	cpsie	i
 80078fa:	603b      	str	r3, [r7, #0]
}
 80078fc:	bf00      	nop
 80078fe:	bf00      	nop
 8007900:	e7fd      	b.n	80078fe <vPortEnterCritical+0x52>
	}
}
 8007902:	bf00      	nop
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	2000000c 	.word	0x2000000c
 8007914:	e000ed04 	.word	0xe000ed04

08007918 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800791e:	4b13      	ldr	r3, [pc, #76]	@ (800796c <vPortExitCritical+0x54>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10d      	bne.n	8007942 <vPortExitCritical+0x2a>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792a:	b672      	cpsid	i
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	b662      	cpsie	i
 800793a:	607b      	str	r3, [r7, #4]
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	e7fd      	b.n	800793e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007942:	4b0a      	ldr	r3, [pc, #40]	@ (800796c <vPortExitCritical+0x54>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3b01      	subs	r3, #1
 8007948:	4a08      	ldr	r2, [pc, #32]	@ (800796c <vPortExitCritical+0x54>)
 800794a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800794c:	4b07      	ldr	r3, [pc, #28]	@ (800796c <vPortExitCritical+0x54>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d105      	bne.n	8007960 <vPortExitCritical+0x48>
 8007954:	2300      	movs	r3, #0
 8007956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	f383 8811 	msr	BASEPRI, r3
}
 800795e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	2000000c 	.word	0x2000000c

08007970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007970:	f3ef 8009 	mrs	r0, PSP
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	4b15      	ldr	r3, [pc, #84]	@ (80079d0 <pxCurrentTCBConst>)
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	f01e 0f10 	tst.w	lr, #16
 8007980:	bf08      	it	eq
 8007982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798a:	6010      	str	r0, [r2, #0]
 800798c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007990:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007994:	b672      	cpsid	i
 8007996:	f380 8811 	msr	BASEPRI, r0
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	b662      	cpsie	i
 80079a4:	f7fe ffa8 	bl	80068f8 <vTaskSwitchContext>
 80079a8:	f04f 0000 	mov.w	r0, #0
 80079ac:	f380 8811 	msr	BASEPRI, r0
 80079b0:	bc09      	pop	{r0, r3}
 80079b2:	6819      	ldr	r1, [r3, #0]
 80079b4:	6808      	ldr	r0, [r1, #0]
 80079b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ba:	f01e 0f10 	tst.w	lr, #16
 80079be:	bf08      	it	eq
 80079c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079c4:	f380 8809 	msr	PSP, r0
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop

080079d0 <pxCurrentTCBConst>:
 80079d0:	2000094c 	.word	0x2000094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop

080079d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	b672      	cpsid	i
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	b662      	cpsie	i
 80079f2:	607b      	str	r3, [r7, #4]
}
 80079f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079f6:	f7fe fec3 	bl	8006780 <xTaskIncrementTick>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d003      	beq.n	8007a08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a00:	4b06      	ldr	r3, [pc, #24]	@ (8007a1c <SysTick_Handler+0x44>)
 8007a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	f383 8811 	msr	BASEPRI, r3
}
 8007a12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a14:	bf00      	nop
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	e000ed04 	.word	0xe000ed04

08007a20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a24:	4b0b      	ldr	r3, [pc, #44]	@ (8007a54 <vPortSetupTimerInterrupt+0x34>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a58 <vPortSetupTimerInterrupt+0x38>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a30:	4b0a      	ldr	r3, [pc, #40]	@ (8007a5c <vPortSetupTimerInterrupt+0x3c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a0a      	ldr	r2, [pc, #40]	@ (8007a60 <vPortSetupTimerInterrupt+0x40>)
 8007a36:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3a:	099b      	lsrs	r3, r3, #6
 8007a3c:	4a09      	ldr	r2, [pc, #36]	@ (8007a64 <vPortSetupTimerInterrupt+0x44>)
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a42:	4b04      	ldr	r3, [pc, #16]	@ (8007a54 <vPortSetupTimerInterrupt+0x34>)
 8007a44:	2207      	movs	r2, #7
 8007a46:	601a      	str	r2, [r3, #0]
}
 8007a48:	bf00      	nop
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	e000e010 	.word	0xe000e010
 8007a58:	e000e018 	.word	0xe000e018
 8007a5c:	20000000 	.word	0x20000000
 8007a60:	10624dd3 	.word	0x10624dd3
 8007a64:	e000e014 	.word	0xe000e014

08007a68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a68:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007a78 <vPortEnableVFP+0x10>
 8007a6c:	6801      	ldr	r1, [r0, #0]
 8007a6e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007a72:	6001      	str	r1, [r0, #0]
 8007a74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a76:	bf00      	nop
 8007a78:	e000ed88 	.word	0xe000ed88

08007a7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a82:	f3ef 8305 	mrs	r3, IPSR
 8007a86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2b0f      	cmp	r3, #15
 8007a8c:	d917      	bls.n	8007abe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8007af8 <vPortValidateInterruptPriority+0x7c>)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a98:	4b18      	ldr	r3, [pc, #96]	@ (8007afc <vPortValidateInterruptPriority+0x80>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	7afa      	ldrb	r2, [r7, #11]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d20d      	bcs.n	8007abe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	b672      	cpsid	i
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	b662      	cpsie	i
 8007ab6:	607b      	str	r3, [r7, #4]
}
 8007ab8:	bf00      	nop
 8007aba:	bf00      	nop
 8007abc:	e7fd      	b.n	8007aba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007abe:	4b10      	ldr	r3, [pc, #64]	@ (8007b00 <vPortValidateInterruptPriority+0x84>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b04 <vPortValidateInterruptPriority+0x88>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d90d      	bls.n	8007aea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad2:	b672      	cpsid	i
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	b662      	cpsie	i
 8007ae2:	603b      	str	r3, [r7, #0]
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop
 8007ae8:	e7fd      	b.n	8007ae6 <vPortValidateInterruptPriority+0x6a>
	}
 8007aea:	bf00      	nop
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	e000e3f0 	.word	0xe000e3f0
 8007afc:	20000f78 	.word	0x20000f78
 8007b00:	e000ed0c 	.word	0xe000ed0c
 8007b04:	20000f7c 	.word	0x20000f7c

08007b08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08a      	sub	sp, #40	@ 0x28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b10:	2300      	movs	r3, #0
 8007b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b14:	f7fe fd76 	bl	8006604 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b18:	4b5d      	ldr	r3, [pc, #372]	@ (8007c90 <pvPortMalloc+0x188>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b20:	f000 f920 	bl	8007d64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b24:	4b5b      	ldr	r3, [pc, #364]	@ (8007c94 <pvPortMalloc+0x18c>)
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f040 8094 	bne.w	8007c5a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d020      	beq.n	8007b7a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007b38:	2208      	movs	r2, #8
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d017      	beq.n	8007b7a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f023 0307 	bic.w	r3, r3, #7
 8007b50:	3308      	adds	r3, #8
 8007b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00d      	beq.n	8007b7a <pvPortMalloc+0x72>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b62:	b672      	cpsid	i
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	b662      	cpsie	i
 8007b72:	617b      	str	r3, [r7, #20]
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop
 8007b78:	e7fd      	b.n	8007b76 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d06c      	beq.n	8007c5a <pvPortMalloc+0x152>
 8007b80:	4b45      	ldr	r3, [pc, #276]	@ (8007c98 <pvPortMalloc+0x190>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d867      	bhi.n	8007c5a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b8a:	4b44      	ldr	r3, [pc, #272]	@ (8007c9c <pvPortMalloc+0x194>)
 8007b8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b8e:	4b43      	ldr	r3, [pc, #268]	@ (8007c9c <pvPortMalloc+0x194>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b94:	e004      	b.n	8007ba0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d903      	bls.n	8007bb2 <pvPortMalloc+0xaa>
 8007baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f1      	bne.n	8007b96 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bb2:	4b37      	ldr	r3, [pc, #220]	@ (8007c90 <pvPortMalloc+0x188>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d04e      	beq.n	8007c5a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	4413      	add	r3, r2
 8007bc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	1ad2      	subs	r2, r2, r3
 8007bd6:	2308      	movs	r3, #8
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d922      	bls.n	8007c24 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4413      	add	r3, r2
 8007be4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	f003 0307 	and.w	r3, r3, #7
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00d      	beq.n	8007c0c <pvPortMalloc+0x104>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf4:	b672      	cpsid	i
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	b662      	cpsie	i
 8007c04:	613b      	str	r3, [r7, #16]
}
 8007c06:	bf00      	nop
 8007c08:	bf00      	nop
 8007c0a:	e7fd      	b.n	8007c08 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	1ad2      	subs	r2, r2, r3
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c1e:	69b8      	ldr	r0, [r7, #24]
 8007c20:	f000 f902 	bl	8007e28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c24:	4b1c      	ldr	r3, [pc, #112]	@ (8007c98 <pvPortMalloc+0x190>)
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007c98 <pvPortMalloc+0x190>)
 8007c30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c32:	4b19      	ldr	r3, [pc, #100]	@ (8007c98 <pvPortMalloc+0x190>)
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	4b1a      	ldr	r3, [pc, #104]	@ (8007ca0 <pvPortMalloc+0x198>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d203      	bcs.n	8007c46 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c3e:	4b16      	ldr	r3, [pc, #88]	@ (8007c98 <pvPortMalloc+0x190>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a17      	ldr	r2, [pc, #92]	@ (8007ca0 <pvPortMalloc+0x198>)
 8007c44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	4b12      	ldr	r3, [pc, #72]	@ (8007c94 <pvPortMalloc+0x18c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c5a:	f7fe fce1 	bl	8006620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00d      	beq.n	8007c84 <pvPortMalloc+0x17c>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6c:	b672      	cpsid	i
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	b662      	cpsie	i
 8007c7c:	60fb      	str	r3, [r7, #12]
}
 8007c7e:	bf00      	nop
 8007c80:	bf00      	nop
 8007c82:	e7fd      	b.n	8007c80 <pvPortMalloc+0x178>
	return pvReturn;
 8007c84:	69fb      	ldr	r3, [r7, #28]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3728      	adds	r7, #40	@ 0x28
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20004b88 	.word	0x20004b88
 8007c94:	20004b94 	.word	0x20004b94
 8007c98:	20004b8c 	.word	0x20004b8c
 8007c9c:	20004b80 	.word	0x20004b80
 8007ca0:	20004b90 	.word	0x20004b90

08007ca4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d04e      	beq.n	8007d54 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	425b      	negs	r3, r3
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	4b24      	ldr	r3, [pc, #144]	@ (8007d5c <vPortFree+0xb8>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4013      	ands	r3, r2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10d      	bne.n	8007cee <vPortFree+0x4a>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd6:	b672      	cpsid	i
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	b662      	cpsie	i
 8007ce6:	60fb      	str	r3, [r7, #12]
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	e7fd      	b.n	8007cea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00d      	beq.n	8007d12 <vPortFree+0x6e>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfa:	b672      	cpsid	i
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	b662      	cpsie	i
 8007d0a:	60bb      	str	r3, [r7, #8]
}
 8007d0c:	bf00      	nop
 8007d0e:	bf00      	nop
 8007d10:	e7fd      	b.n	8007d0e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	4b11      	ldr	r3, [pc, #68]	@ (8007d5c <vPortFree+0xb8>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d019      	beq.n	8007d54 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d115      	bne.n	8007d54 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d5c <vPortFree+0xb8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	43db      	mvns	r3, r3
 8007d32:	401a      	ands	r2, r3
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d38:	f7fe fc64 	bl	8006604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	4b07      	ldr	r3, [pc, #28]	@ (8007d60 <vPortFree+0xbc>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4413      	add	r3, r2
 8007d46:	4a06      	ldr	r2, [pc, #24]	@ (8007d60 <vPortFree+0xbc>)
 8007d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d4a:	6938      	ldr	r0, [r7, #16]
 8007d4c:	f000 f86c 	bl	8007e28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007d50:	f7fe fc66 	bl	8006620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d54:	bf00      	nop
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20004b94 	.word	0x20004b94
 8007d60:	20004b8c 	.word	0x20004b8c

08007d64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d6a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007d6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d70:	4b27      	ldr	r3, [pc, #156]	@ (8007e10 <prvHeapInit+0xac>)
 8007d72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f003 0307 	and.w	r3, r3, #7
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00c      	beq.n	8007d98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3307      	adds	r3, #7
 8007d82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 0307 	bic.w	r3, r3, #7
 8007d8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	4a1f      	ldr	r2, [pc, #124]	@ (8007e10 <prvHeapInit+0xac>)
 8007d94:	4413      	add	r3, r2
 8007d96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e14 <prvHeapInit+0xb0>)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007da2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e14 <prvHeapInit+0xb0>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	4413      	add	r3, r2
 8007dae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007db0:	2208      	movs	r2, #8
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	1a9b      	subs	r3, r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f023 0307 	bic.w	r3, r3, #7
 8007dbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4a15      	ldr	r2, [pc, #84]	@ (8007e18 <prvHeapInit+0xb4>)
 8007dc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007dc6:	4b14      	ldr	r3, [pc, #80]	@ (8007e18 <prvHeapInit+0xb4>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dce:	4b12      	ldr	r3, [pc, #72]	@ (8007e18 <prvHeapInit+0xb4>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	1ad2      	subs	r2, r2, r3
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007de4:	4b0c      	ldr	r3, [pc, #48]	@ (8007e18 <prvHeapInit+0xb4>)
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	4a0a      	ldr	r2, [pc, #40]	@ (8007e1c <prvHeapInit+0xb8>)
 8007df2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	4a09      	ldr	r2, [pc, #36]	@ (8007e20 <prvHeapInit+0xbc>)
 8007dfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007dfc:	4b09      	ldr	r3, [pc, #36]	@ (8007e24 <prvHeapInit+0xc0>)
 8007dfe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e02:	601a      	str	r2, [r3, #0]
}
 8007e04:	bf00      	nop
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	20000f80 	.word	0x20000f80
 8007e14:	20004b80 	.word	0x20004b80
 8007e18:	20004b88 	.word	0x20004b88
 8007e1c:	20004b90 	.word	0x20004b90
 8007e20:	20004b8c 	.word	0x20004b8c
 8007e24:	20004b94 	.word	0x20004b94

08007e28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e30:	4b28      	ldr	r3, [pc, #160]	@ (8007ed4 <prvInsertBlockIntoFreeList+0xac>)
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	e002      	b.n	8007e3c <prvInsertBlockIntoFreeList+0x14>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d8f7      	bhi.n	8007e36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	4413      	add	r3, r2
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d108      	bne.n	8007e6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	441a      	add	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	441a      	add	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d118      	bne.n	8007eb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	4b15      	ldr	r3, [pc, #84]	@ (8007ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d00d      	beq.n	8007ea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	441a      	add	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	e008      	b.n	8007eb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	e003      	b.n	8007eb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d002      	beq.n	8007ec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ec6:	bf00      	nop
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	20004b80 	.word	0x20004b80
 8007ed8:	20004b88 	.word	0x20004b88

08007edc <_strtol_l.constprop.0>:
 8007edc:	2b24      	cmp	r3, #36	@ 0x24
 8007ede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee2:	4686      	mov	lr, r0
 8007ee4:	4690      	mov	r8, r2
 8007ee6:	d801      	bhi.n	8007eec <_strtol_l.constprop.0+0x10>
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d106      	bne.n	8007efa <_strtol_l.constprop.0+0x1e>
 8007eec:	f000 fba6 	bl	800863c <__errno>
 8007ef0:	2316      	movs	r3, #22
 8007ef2:	6003      	str	r3, [r0, #0]
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efa:	4834      	ldr	r0, [pc, #208]	@ (8007fcc <_strtol_l.constprop.0+0xf0>)
 8007efc:	460d      	mov	r5, r1
 8007efe:	462a      	mov	r2, r5
 8007f00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f04:	5d06      	ldrb	r6, [r0, r4]
 8007f06:	f016 0608 	ands.w	r6, r6, #8
 8007f0a:	d1f8      	bne.n	8007efe <_strtol_l.constprop.0+0x22>
 8007f0c:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f0e:	d12d      	bne.n	8007f6c <_strtol_l.constprop.0+0x90>
 8007f10:	782c      	ldrb	r4, [r5, #0]
 8007f12:	2601      	movs	r6, #1
 8007f14:	1c95      	adds	r5, r2, #2
 8007f16:	f033 0210 	bics.w	r2, r3, #16
 8007f1a:	d109      	bne.n	8007f30 <_strtol_l.constprop.0+0x54>
 8007f1c:	2c30      	cmp	r4, #48	@ 0x30
 8007f1e:	d12a      	bne.n	8007f76 <_strtol_l.constprop.0+0x9a>
 8007f20:	782a      	ldrb	r2, [r5, #0]
 8007f22:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f26:	2a58      	cmp	r2, #88	@ 0x58
 8007f28:	d125      	bne.n	8007f76 <_strtol_l.constprop.0+0x9a>
 8007f2a:	786c      	ldrb	r4, [r5, #1]
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	3502      	adds	r5, #2
 8007f30:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007f34:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007f38:	2200      	movs	r2, #0
 8007f3a:	fbbc f9f3 	udiv	r9, ip, r3
 8007f3e:	4610      	mov	r0, r2
 8007f40:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f48:	2f09      	cmp	r7, #9
 8007f4a:	d81b      	bhi.n	8007f84 <_strtol_l.constprop.0+0xa8>
 8007f4c:	463c      	mov	r4, r7
 8007f4e:	42a3      	cmp	r3, r4
 8007f50:	dd27      	ble.n	8007fa2 <_strtol_l.constprop.0+0xc6>
 8007f52:	1c57      	adds	r7, r2, #1
 8007f54:	d007      	beq.n	8007f66 <_strtol_l.constprop.0+0x8a>
 8007f56:	4581      	cmp	r9, r0
 8007f58:	d320      	bcc.n	8007f9c <_strtol_l.constprop.0+0xc0>
 8007f5a:	d101      	bne.n	8007f60 <_strtol_l.constprop.0+0x84>
 8007f5c:	45a2      	cmp	sl, r4
 8007f5e:	db1d      	blt.n	8007f9c <_strtol_l.constprop.0+0xc0>
 8007f60:	fb00 4003 	mla	r0, r0, r3, r4
 8007f64:	2201      	movs	r2, #1
 8007f66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f6a:	e7eb      	b.n	8007f44 <_strtol_l.constprop.0+0x68>
 8007f6c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f6e:	bf04      	itt	eq
 8007f70:	782c      	ldrbeq	r4, [r5, #0]
 8007f72:	1c95      	addeq	r5, r2, #2
 8007f74:	e7cf      	b.n	8007f16 <_strtol_l.constprop.0+0x3a>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1da      	bne.n	8007f30 <_strtol_l.constprop.0+0x54>
 8007f7a:	2c30      	cmp	r4, #48	@ 0x30
 8007f7c:	bf0c      	ite	eq
 8007f7e:	2308      	moveq	r3, #8
 8007f80:	230a      	movne	r3, #10
 8007f82:	e7d5      	b.n	8007f30 <_strtol_l.constprop.0+0x54>
 8007f84:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007f88:	2f19      	cmp	r7, #25
 8007f8a:	d801      	bhi.n	8007f90 <_strtol_l.constprop.0+0xb4>
 8007f8c:	3c37      	subs	r4, #55	@ 0x37
 8007f8e:	e7de      	b.n	8007f4e <_strtol_l.constprop.0+0x72>
 8007f90:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007f94:	2f19      	cmp	r7, #25
 8007f96:	d804      	bhi.n	8007fa2 <_strtol_l.constprop.0+0xc6>
 8007f98:	3c57      	subs	r4, #87	@ 0x57
 8007f9a:	e7d8      	b.n	8007f4e <_strtol_l.constprop.0+0x72>
 8007f9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007fa0:	e7e1      	b.n	8007f66 <_strtol_l.constprop.0+0x8a>
 8007fa2:	1c53      	adds	r3, r2, #1
 8007fa4:	d108      	bne.n	8007fb8 <_strtol_l.constprop.0+0xdc>
 8007fa6:	2322      	movs	r3, #34	@ 0x22
 8007fa8:	f8ce 3000 	str.w	r3, [lr]
 8007fac:	4660      	mov	r0, ip
 8007fae:	f1b8 0f00 	cmp.w	r8, #0
 8007fb2:	d0a0      	beq.n	8007ef6 <_strtol_l.constprop.0+0x1a>
 8007fb4:	1e69      	subs	r1, r5, #1
 8007fb6:	e006      	b.n	8007fc6 <_strtol_l.constprop.0+0xea>
 8007fb8:	b106      	cbz	r6, 8007fbc <_strtol_l.constprop.0+0xe0>
 8007fba:	4240      	negs	r0, r0
 8007fbc:	f1b8 0f00 	cmp.w	r8, #0
 8007fc0:	d099      	beq.n	8007ef6 <_strtol_l.constprop.0+0x1a>
 8007fc2:	2a00      	cmp	r2, #0
 8007fc4:	d1f6      	bne.n	8007fb4 <_strtol_l.constprop.0+0xd8>
 8007fc6:	f8c8 1000 	str.w	r1, [r8]
 8007fca:	e794      	b.n	8007ef6 <_strtol_l.constprop.0+0x1a>
 8007fcc:	08009d55 	.word	0x08009d55

08007fd0 <_strtol_r>:
 8007fd0:	f7ff bf84 	b.w	8007edc <_strtol_l.constprop.0>

08007fd4 <strtol>:
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	460a      	mov	r2, r1
 8007fd8:	4601      	mov	r1, r0
 8007fda:	4802      	ldr	r0, [pc, #8]	@ (8007fe4 <strtol+0x10>)
 8007fdc:	6800      	ldr	r0, [r0, #0]
 8007fde:	f7ff bf7d 	b.w	8007edc <_strtol_l.constprop.0>
 8007fe2:	bf00      	nop
 8007fe4:	2000001c 	.word	0x2000001c

08007fe8 <__sflush_r>:
 8007fe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff0:	0716      	lsls	r6, r2, #28
 8007ff2:	4605      	mov	r5, r0
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	d454      	bmi.n	80080a2 <__sflush_r+0xba>
 8007ff8:	684b      	ldr	r3, [r1, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	dc02      	bgt.n	8008004 <__sflush_r+0x1c>
 8007ffe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008000:	2b00      	cmp	r3, #0
 8008002:	dd48      	ble.n	8008096 <__sflush_r+0xae>
 8008004:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008006:	2e00      	cmp	r6, #0
 8008008:	d045      	beq.n	8008096 <__sflush_r+0xae>
 800800a:	2300      	movs	r3, #0
 800800c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008010:	682f      	ldr	r7, [r5, #0]
 8008012:	6a21      	ldr	r1, [r4, #32]
 8008014:	602b      	str	r3, [r5, #0]
 8008016:	d030      	beq.n	800807a <__sflush_r+0x92>
 8008018:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	0759      	lsls	r1, r3, #29
 800801e:	d505      	bpl.n	800802c <__sflush_r+0x44>
 8008020:	6863      	ldr	r3, [r4, #4]
 8008022:	1ad2      	subs	r2, r2, r3
 8008024:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008026:	b10b      	cbz	r3, 800802c <__sflush_r+0x44>
 8008028:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800802a:	1ad2      	subs	r2, r2, r3
 800802c:	2300      	movs	r3, #0
 800802e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008030:	6a21      	ldr	r1, [r4, #32]
 8008032:	4628      	mov	r0, r5
 8008034:	47b0      	blx	r6
 8008036:	1c43      	adds	r3, r0, #1
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	d106      	bne.n	800804a <__sflush_r+0x62>
 800803c:	6829      	ldr	r1, [r5, #0]
 800803e:	291d      	cmp	r1, #29
 8008040:	d82b      	bhi.n	800809a <__sflush_r+0xb2>
 8008042:	4a2a      	ldr	r2, [pc, #168]	@ (80080ec <__sflush_r+0x104>)
 8008044:	410a      	asrs	r2, r1
 8008046:	07d6      	lsls	r6, r2, #31
 8008048:	d427      	bmi.n	800809a <__sflush_r+0xb2>
 800804a:	2200      	movs	r2, #0
 800804c:	6062      	str	r2, [r4, #4]
 800804e:	04d9      	lsls	r1, r3, #19
 8008050:	6922      	ldr	r2, [r4, #16]
 8008052:	6022      	str	r2, [r4, #0]
 8008054:	d504      	bpl.n	8008060 <__sflush_r+0x78>
 8008056:	1c42      	adds	r2, r0, #1
 8008058:	d101      	bne.n	800805e <__sflush_r+0x76>
 800805a:	682b      	ldr	r3, [r5, #0]
 800805c:	b903      	cbnz	r3, 8008060 <__sflush_r+0x78>
 800805e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008060:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008062:	602f      	str	r7, [r5, #0]
 8008064:	b1b9      	cbz	r1, 8008096 <__sflush_r+0xae>
 8008066:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800806a:	4299      	cmp	r1, r3
 800806c:	d002      	beq.n	8008074 <__sflush_r+0x8c>
 800806e:	4628      	mov	r0, r5
 8008070:	f000 fb20 	bl	80086b4 <_free_r>
 8008074:	2300      	movs	r3, #0
 8008076:	6363      	str	r3, [r4, #52]	@ 0x34
 8008078:	e00d      	b.n	8008096 <__sflush_r+0xae>
 800807a:	2301      	movs	r3, #1
 800807c:	4628      	mov	r0, r5
 800807e:	47b0      	blx	r6
 8008080:	4602      	mov	r2, r0
 8008082:	1c50      	adds	r0, r2, #1
 8008084:	d1c9      	bne.n	800801a <__sflush_r+0x32>
 8008086:	682b      	ldr	r3, [r5, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d0c6      	beq.n	800801a <__sflush_r+0x32>
 800808c:	2b1d      	cmp	r3, #29
 800808e:	d001      	beq.n	8008094 <__sflush_r+0xac>
 8008090:	2b16      	cmp	r3, #22
 8008092:	d11e      	bne.n	80080d2 <__sflush_r+0xea>
 8008094:	602f      	str	r7, [r5, #0]
 8008096:	2000      	movs	r0, #0
 8008098:	e022      	b.n	80080e0 <__sflush_r+0xf8>
 800809a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800809e:	b21b      	sxth	r3, r3
 80080a0:	e01b      	b.n	80080da <__sflush_r+0xf2>
 80080a2:	690f      	ldr	r7, [r1, #16]
 80080a4:	2f00      	cmp	r7, #0
 80080a6:	d0f6      	beq.n	8008096 <__sflush_r+0xae>
 80080a8:	0793      	lsls	r3, r2, #30
 80080aa:	680e      	ldr	r6, [r1, #0]
 80080ac:	bf08      	it	eq
 80080ae:	694b      	ldreq	r3, [r1, #20]
 80080b0:	600f      	str	r7, [r1, #0]
 80080b2:	bf18      	it	ne
 80080b4:	2300      	movne	r3, #0
 80080b6:	eba6 0807 	sub.w	r8, r6, r7
 80080ba:	608b      	str	r3, [r1, #8]
 80080bc:	f1b8 0f00 	cmp.w	r8, #0
 80080c0:	dde9      	ble.n	8008096 <__sflush_r+0xae>
 80080c2:	6a21      	ldr	r1, [r4, #32]
 80080c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80080c6:	4643      	mov	r3, r8
 80080c8:	463a      	mov	r2, r7
 80080ca:	4628      	mov	r0, r5
 80080cc:	47b0      	blx	r6
 80080ce:	2800      	cmp	r0, #0
 80080d0:	dc08      	bgt.n	80080e4 <__sflush_r+0xfc>
 80080d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080da:	81a3      	strh	r3, [r4, #12]
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080e4:	4407      	add	r7, r0
 80080e6:	eba8 0800 	sub.w	r8, r8, r0
 80080ea:	e7e7      	b.n	80080bc <__sflush_r+0xd4>
 80080ec:	dfbffffe 	.word	0xdfbffffe

080080f0 <_fflush_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	690b      	ldr	r3, [r1, #16]
 80080f4:	4605      	mov	r5, r0
 80080f6:	460c      	mov	r4, r1
 80080f8:	b913      	cbnz	r3, 8008100 <_fflush_r+0x10>
 80080fa:	2500      	movs	r5, #0
 80080fc:	4628      	mov	r0, r5
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
 8008100:	b118      	cbz	r0, 800810a <_fflush_r+0x1a>
 8008102:	6a03      	ldr	r3, [r0, #32]
 8008104:	b90b      	cbnz	r3, 800810a <_fflush_r+0x1a>
 8008106:	f000 f8bb 	bl	8008280 <__sinit>
 800810a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d0f3      	beq.n	80080fa <_fflush_r+0xa>
 8008112:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008114:	07d0      	lsls	r0, r2, #31
 8008116:	d404      	bmi.n	8008122 <_fflush_r+0x32>
 8008118:	0599      	lsls	r1, r3, #22
 800811a:	d402      	bmi.n	8008122 <_fflush_r+0x32>
 800811c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800811e:	f000 fab8 	bl	8008692 <__retarget_lock_acquire_recursive>
 8008122:	4628      	mov	r0, r5
 8008124:	4621      	mov	r1, r4
 8008126:	f7ff ff5f 	bl	8007fe8 <__sflush_r>
 800812a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800812c:	07da      	lsls	r2, r3, #31
 800812e:	4605      	mov	r5, r0
 8008130:	d4e4      	bmi.n	80080fc <_fflush_r+0xc>
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	059b      	lsls	r3, r3, #22
 8008136:	d4e1      	bmi.n	80080fc <_fflush_r+0xc>
 8008138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800813a:	f000 faab 	bl	8008694 <__retarget_lock_release_recursive>
 800813e:	e7dd      	b.n	80080fc <_fflush_r+0xc>

08008140 <fflush>:
 8008140:	4601      	mov	r1, r0
 8008142:	b920      	cbnz	r0, 800814e <fflush+0xe>
 8008144:	4a04      	ldr	r2, [pc, #16]	@ (8008158 <fflush+0x18>)
 8008146:	4905      	ldr	r1, [pc, #20]	@ (800815c <fflush+0x1c>)
 8008148:	4805      	ldr	r0, [pc, #20]	@ (8008160 <fflush+0x20>)
 800814a:	f000 b8b1 	b.w	80082b0 <_fwalk_sglue>
 800814e:	4b05      	ldr	r3, [pc, #20]	@ (8008164 <fflush+0x24>)
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	f7ff bfcd 	b.w	80080f0 <_fflush_r>
 8008156:	bf00      	nop
 8008158:	20000010 	.word	0x20000010
 800815c:	080080f1 	.word	0x080080f1
 8008160:	20000020 	.word	0x20000020
 8008164:	2000001c 	.word	0x2000001c

08008168 <std>:
 8008168:	2300      	movs	r3, #0
 800816a:	b510      	push	{r4, lr}
 800816c:	4604      	mov	r4, r0
 800816e:	e9c0 3300 	strd	r3, r3, [r0]
 8008172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008176:	6083      	str	r3, [r0, #8]
 8008178:	8181      	strh	r1, [r0, #12]
 800817a:	6643      	str	r3, [r0, #100]	@ 0x64
 800817c:	81c2      	strh	r2, [r0, #14]
 800817e:	6183      	str	r3, [r0, #24]
 8008180:	4619      	mov	r1, r3
 8008182:	2208      	movs	r2, #8
 8008184:	305c      	adds	r0, #92	@ 0x5c
 8008186:	f000 fa0b 	bl	80085a0 <memset>
 800818a:	4b0d      	ldr	r3, [pc, #52]	@ (80081c0 <std+0x58>)
 800818c:	6263      	str	r3, [r4, #36]	@ 0x24
 800818e:	4b0d      	ldr	r3, [pc, #52]	@ (80081c4 <std+0x5c>)
 8008190:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008192:	4b0d      	ldr	r3, [pc, #52]	@ (80081c8 <std+0x60>)
 8008194:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008196:	4b0d      	ldr	r3, [pc, #52]	@ (80081cc <std+0x64>)
 8008198:	6323      	str	r3, [r4, #48]	@ 0x30
 800819a:	4b0d      	ldr	r3, [pc, #52]	@ (80081d0 <std+0x68>)
 800819c:	6224      	str	r4, [r4, #32]
 800819e:	429c      	cmp	r4, r3
 80081a0:	d006      	beq.n	80081b0 <std+0x48>
 80081a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081a6:	4294      	cmp	r4, r2
 80081a8:	d002      	beq.n	80081b0 <std+0x48>
 80081aa:	33d0      	adds	r3, #208	@ 0xd0
 80081ac:	429c      	cmp	r4, r3
 80081ae:	d105      	bne.n	80081bc <std+0x54>
 80081b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80081b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b8:	f000 ba6a 	b.w	8008690 <__retarget_lock_init_recursive>
 80081bc:	bd10      	pop	{r4, pc}
 80081be:	bf00      	nop
 80081c0:	080083f1 	.word	0x080083f1
 80081c4:	08008413 	.word	0x08008413
 80081c8:	0800844b 	.word	0x0800844b
 80081cc:	0800846f 	.word	0x0800846f
 80081d0:	20004b98 	.word	0x20004b98

080081d4 <stdio_exit_handler>:
 80081d4:	4a02      	ldr	r2, [pc, #8]	@ (80081e0 <stdio_exit_handler+0xc>)
 80081d6:	4903      	ldr	r1, [pc, #12]	@ (80081e4 <stdio_exit_handler+0x10>)
 80081d8:	4803      	ldr	r0, [pc, #12]	@ (80081e8 <stdio_exit_handler+0x14>)
 80081da:	f000 b869 	b.w	80082b0 <_fwalk_sglue>
 80081de:	bf00      	nop
 80081e0:	20000010 	.word	0x20000010
 80081e4:	080080f1 	.word	0x080080f1
 80081e8:	20000020 	.word	0x20000020

080081ec <cleanup_stdio>:
 80081ec:	6841      	ldr	r1, [r0, #4]
 80081ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008220 <cleanup_stdio+0x34>)
 80081f0:	4299      	cmp	r1, r3
 80081f2:	b510      	push	{r4, lr}
 80081f4:	4604      	mov	r4, r0
 80081f6:	d001      	beq.n	80081fc <cleanup_stdio+0x10>
 80081f8:	f7ff ff7a 	bl	80080f0 <_fflush_r>
 80081fc:	68a1      	ldr	r1, [r4, #8]
 80081fe:	4b09      	ldr	r3, [pc, #36]	@ (8008224 <cleanup_stdio+0x38>)
 8008200:	4299      	cmp	r1, r3
 8008202:	d002      	beq.n	800820a <cleanup_stdio+0x1e>
 8008204:	4620      	mov	r0, r4
 8008206:	f7ff ff73 	bl	80080f0 <_fflush_r>
 800820a:	68e1      	ldr	r1, [r4, #12]
 800820c:	4b06      	ldr	r3, [pc, #24]	@ (8008228 <cleanup_stdio+0x3c>)
 800820e:	4299      	cmp	r1, r3
 8008210:	d004      	beq.n	800821c <cleanup_stdio+0x30>
 8008212:	4620      	mov	r0, r4
 8008214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008218:	f7ff bf6a 	b.w	80080f0 <_fflush_r>
 800821c:	bd10      	pop	{r4, pc}
 800821e:	bf00      	nop
 8008220:	20004b98 	.word	0x20004b98
 8008224:	20004c00 	.word	0x20004c00
 8008228:	20004c68 	.word	0x20004c68

0800822c <global_stdio_init.part.0>:
 800822c:	b510      	push	{r4, lr}
 800822e:	4b0b      	ldr	r3, [pc, #44]	@ (800825c <global_stdio_init.part.0+0x30>)
 8008230:	4c0b      	ldr	r4, [pc, #44]	@ (8008260 <global_stdio_init.part.0+0x34>)
 8008232:	4a0c      	ldr	r2, [pc, #48]	@ (8008264 <global_stdio_init.part.0+0x38>)
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	4620      	mov	r0, r4
 8008238:	2200      	movs	r2, #0
 800823a:	2104      	movs	r1, #4
 800823c:	f7ff ff94 	bl	8008168 <std>
 8008240:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008244:	2201      	movs	r2, #1
 8008246:	2109      	movs	r1, #9
 8008248:	f7ff ff8e 	bl	8008168 <std>
 800824c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008250:	2202      	movs	r2, #2
 8008252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008256:	2112      	movs	r1, #18
 8008258:	f7ff bf86 	b.w	8008168 <std>
 800825c:	20004cd0 	.word	0x20004cd0
 8008260:	20004b98 	.word	0x20004b98
 8008264:	080081d5 	.word	0x080081d5

08008268 <__sfp_lock_acquire>:
 8008268:	4801      	ldr	r0, [pc, #4]	@ (8008270 <__sfp_lock_acquire+0x8>)
 800826a:	f000 ba12 	b.w	8008692 <__retarget_lock_acquire_recursive>
 800826e:	bf00      	nop
 8008270:	20004cd9 	.word	0x20004cd9

08008274 <__sfp_lock_release>:
 8008274:	4801      	ldr	r0, [pc, #4]	@ (800827c <__sfp_lock_release+0x8>)
 8008276:	f000 ba0d 	b.w	8008694 <__retarget_lock_release_recursive>
 800827a:	bf00      	nop
 800827c:	20004cd9 	.word	0x20004cd9

08008280 <__sinit>:
 8008280:	b510      	push	{r4, lr}
 8008282:	4604      	mov	r4, r0
 8008284:	f7ff fff0 	bl	8008268 <__sfp_lock_acquire>
 8008288:	6a23      	ldr	r3, [r4, #32]
 800828a:	b11b      	cbz	r3, 8008294 <__sinit+0x14>
 800828c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008290:	f7ff bff0 	b.w	8008274 <__sfp_lock_release>
 8008294:	4b04      	ldr	r3, [pc, #16]	@ (80082a8 <__sinit+0x28>)
 8008296:	6223      	str	r3, [r4, #32]
 8008298:	4b04      	ldr	r3, [pc, #16]	@ (80082ac <__sinit+0x2c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1f5      	bne.n	800828c <__sinit+0xc>
 80082a0:	f7ff ffc4 	bl	800822c <global_stdio_init.part.0>
 80082a4:	e7f2      	b.n	800828c <__sinit+0xc>
 80082a6:	bf00      	nop
 80082a8:	080081ed 	.word	0x080081ed
 80082ac:	20004cd0 	.word	0x20004cd0

080082b0 <_fwalk_sglue>:
 80082b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082b4:	4607      	mov	r7, r0
 80082b6:	4688      	mov	r8, r1
 80082b8:	4614      	mov	r4, r2
 80082ba:	2600      	movs	r6, #0
 80082bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082c0:	f1b9 0901 	subs.w	r9, r9, #1
 80082c4:	d505      	bpl.n	80082d2 <_fwalk_sglue+0x22>
 80082c6:	6824      	ldr	r4, [r4, #0]
 80082c8:	2c00      	cmp	r4, #0
 80082ca:	d1f7      	bne.n	80082bc <_fwalk_sglue+0xc>
 80082cc:	4630      	mov	r0, r6
 80082ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082d2:	89ab      	ldrh	r3, [r5, #12]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d907      	bls.n	80082e8 <_fwalk_sglue+0x38>
 80082d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082dc:	3301      	adds	r3, #1
 80082de:	d003      	beq.n	80082e8 <_fwalk_sglue+0x38>
 80082e0:	4629      	mov	r1, r5
 80082e2:	4638      	mov	r0, r7
 80082e4:	47c0      	blx	r8
 80082e6:	4306      	orrs	r6, r0
 80082e8:	3568      	adds	r5, #104	@ 0x68
 80082ea:	e7e9      	b.n	80082c0 <_fwalk_sglue+0x10>

080082ec <iprintf>:
 80082ec:	b40f      	push	{r0, r1, r2, r3}
 80082ee:	b507      	push	{r0, r1, r2, lr}
 80082f0:	4906      	ldr	r1, [pc, #24]	@ (800830c <iprintf+0x20>)
 80082f2:	ab04      	add	r3, sp, #16
 80082f4:	6808      	ldr	r0, [r1, #0]
 80082f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80082fa:	6881      	ldr	r1, [r0, #8]
 80082fc:	9301      	str	r3, [sp, #4]
 80082fe:	f000 fafb 	bl	80088f8 <_vfiprintf_r>
 8008302:	b003      	add	sp, #12
 8008304:	f85d eb04 	ldr.w	lr, [sp], #4
 8008308:	b004      	add	sp, #16
 800830a:	4770      	bx	lr
 800830c:	2000001c 	.word	0x2000001c

08008310 <_puts_r>:
 8008310:	6a03      	ldr	r3, [r0, #32]
 8008312:	b570      	push	{r4, r5, r6, lr}
 8008314:	6884      	ldr	r4, [r0, #8]
 8008316:	4605      	mov	r5, r0
 8008318:	460e      	mov	r6, r1
 800831a:	b90b      	cbnz	r3, 8008320 <_puts_r+0x10>
 800831c:	f7ff ffb0 	bl	8008280 <__sinit>
 8008320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008322:	07db      	lsls	r3, r3, #31
 8008324:	d405      	bmi.n	8008332 <_puts_r+0x22>
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	0598      	lsls	r0, r3, #22
 800832a:	d402      	bmi.n	8008332 <_puts_r+0x22>
 800832c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800832e:	f000 f9b0 	bl	8008692 <__retarget_lock_acquire_recursive>
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	0719      	lsls	r1, r3, #28
 8008336:	d502      	bpl.n	800833e <_puts_r+0x2e>
 8008338:	6923      	ldr	r3, [r4, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d135      	bne.n	80083aa <_puts_r+0x9a>
 800833e:	4621      	mov	r1, r4
 8008340:	4628      	mov	r0, r5
 8008342:	f000 f8d7 	bl	80084f4 <__swsetup_r>
 8008346:	b380      	cbz	r0, 80083aa <_puts_r+0x9a>
 8008348:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800834c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800834e:	07da      	lsls	r2, r3, #31
 8008350:	d405      	bmi.n	800835e <_puts_r+0x4e>
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	059b      	lsls	r3, r3, #22
 8008356:	d402      	bmi.n	800835e <_puts_r+0x4e>
 8008358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800835a:	f000 f99b 	bl	8008694 <__retarget_lock_release_recursive>
 800835e:	4628      	mov	r0, r5
 8008360:	bd70      	pop	{r4, r5, r6, pc}
 8008362:	2b00      	cmp	r3, #0
 8008364:	da04      	bge.n	8008370 <_puts_r+0x60>
 8008366:	69a2      	ldr	r2, [r4, #24]
 8008368:	429a      	cmp	r2, r3
 800836a:	dc17      	bgt.n	800839c <_puts_r+0x8c>
 800836c:	290a      	cmp	r1, #10
 800836e:	d015      	beq.n	800839c <_puts_r+0x8c>
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	1c5a      	adds	r2, r3, #1
 8008374:	6022      	str	r2, [r4, #0]
 8008376:	7019      	strb	r1, [r3, #0]
 8008378:	68a3      	ldr	r3, [r4, #8]
 800837a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800837e:	3b01      	subs	r3, #1
 8008380:	60a3      	str	r3, [r4, #8]
 8008382:	2900      	cmp	r1, #0
 8008384:	d1ed      	bne.n	8008362 <_puts_r+0x52>
 8008386:	2b00      	cmp	r3, #0
 8008388:	da11      	bge.n	80083ae <_puts_r+0x9e>
 800838a:	4622      	mov	r2, r4
 800838c:	210a      	movs	r1, #10
 800838e:	4628      	mov	r0, r5
 8008390:	f000 f871 	bl	8008476 <__swbuf_r>
 8008394:	3001      	adds	r0, #1
 8008396:	d0d7      	beq.n	8008348 <_puts_r+0x38>
 8008398:	250a      	movs	r5, #10
 800839a:	e7d7      	b.n	800834c <_puts_r+0x3c>
 800839c:	4622      	mov	r2, r4
 800839e:	4628      	mov	r0, r5
 80083a0:	f000 f869 	bl	8008476 <__swbuf_r>
 80083a4:	3001      	adds	r0, #1
 80083a6:	d1e7      	bne.n	8008378 <_puts_r+0x68>
 80083a8:	e7ce      	b.n	8008348 <_puts_r+0x38>
 80083aa:	3e01      	subs	r6, #1
 80083ac:	e7e4      	b.n	8008378 <_puts_r+0x68>
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	6022      	str	r2, [r4, #0]
 80083b4:	220a      	movs	r2, #10
 80083b6:	701a      	strb	r2, [r3, #0]
 80083b8:	e7ee      	b.n	8008398 <_puts_r+0x88>
	...

080083bc <puts>:
 80083bc:	4b02      	ldr	r3, [pc, #8]	@ (80083c8 <puts+0xc>)
 80083be:	4601      	mov	r1, r0
 80083c0:	6818      	ldr	r0, [r3, #0]
 80083c2:	f7ff bfa5 	b.w	8008310 <_puts_r>
 80083c6:	bf00      	nop
 80083c8:	2000001c 	.word	0x2000001c

080083cc <iscanf>:
 80083cc:	b40f      	push	{r0, r1, r2, r3}
 80083ce:	b507      	push	{r0, r1, r2, lr}
 80083d0:	4906      	ldr	r1, [pc, #24]	@ (80083ec <iscanf+0x20>)
 80083d2:	ab04      	add	r3, sp, #16
 80083d4:	6808      	ldr	r0, [r1, #0]
 80083d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083da:	6841      	ldr	r1, [r0, #4]
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	f000 fecd 	bl	800917c <_vfiscanf_r>
 80083e2:	b003      	add	sp, #12
 80083e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083e8:	b004      	add	sp, #16
 80083ea:	4770      	bx	lr
 80083ec:	2000001c 	.word	0x2000001c

080083f0 <__sread>:
 80083f0:	b510      	push	{r4, lr}
 80083f2:	460c      	mov	r4, r1
 80083f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f8:	f000 f8fc 	bl	80085f4 <_read_r>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	bfab      	itete	ge
 8008400:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008402:	89a3      	ldrhlt	r3, [r4, #12]
 8008404:	181b      	addge	r3, r3, r0
 8008406:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800840a:	bfac      	ite	ge
 800840c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800840e:	81a3      	strhlt	r3, [r4, #12]
 8008410:	bd10      	pop	{r4, pc}

08008412 <__swrite>:
 8008412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008416:	461f      	mov	r7, r3
 8008418:	898b      	ldrh	r3, [r1, #12]
 800841a:	05db      	lsls	r3, r3, #23
 800841c:	4605      	mov	r5, r0
 800841e:	460c      	mov	r4, r1
 8008420:	4616      	mov	r6, r2
 8008422:	d505      	bpl.n	8008430 <__swrite+0x1e>
 8008424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008428:	2302      	movs	r3, #2
 800842a:	2200      	movs	r2, #0
 800842c:	f000 f8d0 	bl	80085d0 <_lseek_r>
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008436:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800843a:	81a3      	strh	r3, [r4, #12]
 800843c:	4632      	mov	r2, r6
 800843e:	463b      	mov	r3, r7
 8008440:	4628      	mov	r0, r5
 8008442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008446:	f000 b8e7 	b.w	8008618 <_write_r>

0800844a <__sseek>:
 800844a:	b510      	push	{r4, lr}
 800844c:	460c      	mov	r4, r1
 800844e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008452:	f000 f8bd 	bl	80085d0 <_lseek_r>
 8008456:	1c43      	adds	r3, r0, #1
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	bf15      	itete	ne
 800845c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800845e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008462:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008466:	81a3      	strheq	r3, [r4, #12]
 8008468:	bf18      	it	ne
 800846a:	81a3      	strhne	r3, [r4, #12]
 800846c:	bd10      	pop	{r4, pc}

0800846e <__sclose>:
 800846e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008472:	f000 b89d 	b.w	80085b0 <_close_r>

08008476 <__swbuf_r>:
 8008476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008478:	460e      	mov	r6, r1
 800847a:	4614      	mov	r4, r2
 800847c:	4605      	mov	r5, r0
 800847e:	b118      	cbz	r0, 8008488 <__swbuf_r+0x12>
 8008480:	6a03      	ldr	r3, [r0, #32]
 8008482:	b90b      	cbnz	r3, 8008488 <__swbuf_r+0x12>
 8008484:	f7ff fefc 	bl	8008280 <__sinit>
 8008488:	69a3      	ldr	r3, [r4, #24]
 800848a:	60a3      	str	r3, [r4, #8]
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	071a      	lsls	r2, r3, #28
 8008490:	d501      	bpl.n	8008496 <__swbuf_r+0x20>
 8008492:	6923      	ldr	r3, [r4, #16]
 8008494:	b943      	cbnz	r3, 80084a8 <__swbuf_r+0x32>
 8008496:	4621      	mov	r1, r4
 8008498:	4628      	mov	r0, r5
 800849a:	f000 f82b 	bl	80084f4 <__swsetup_r>
 800849e:	b118      	cbz	r0, 80084a8 <__swbuf_r+0x32>
 80084a0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80084a4:	4638      	mov	r0, r7
 80084a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	6922      	ldr	r2, [r4, #16]
 80084ac:	1a98      	subs	r0, r3, r2
 80084ae:	6963      	ldr	r3, [r4, #20]
 80084b0:	b2f6      	uxtb	r6, r6
 80084b2:	4283      	cmp	r3, r0
 80084b4:	4637      	mov	r7, r6
 80084b6:	dc05      	bgt.n	80084c4 <__swbuf_r+0x4e>
 80084b8:	4621      	mov	r1, r4
 80084ba:	4628      	mov	r0, r5
 80084bc:	f7ff fe18 	bl	80080f0 <_fflush_r>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d1ed      	bne.n	80084a0 <__swbuf_r+0x2a>
 80084c4:	68a3      	ldr	r3, [r4, #8]
 80084c6:	3b01      	subs	r3, #1
 80084c8:	60a3      	str	r3, [r4, #8]
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	1c5a      	adds	r2, r3, #1
 80084ce:	6022      	str	r2, [r4, #0]
 80084d0:	701e      	strb	r6, [r3, #0]
 80084d2:	6962      	ldr	r2, [r4, #20]
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d004      	beq.n	80084e4 <__swbuf_r+0x6e>
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	07db      	lsls	r3, r3, #31
 80084de:	d5e1      	bpl.n	80084a4 <__swbuf_r+0x2e>
 80084e0:	2e0a      	cmp	r6, #10
 80084e2:	d1df      	bne.n	80084a4 <__swbuf_r+0x2e>
 80084e4:	4621      	mov	r1, r4
 80084e6:	4628      	mov	r0, r5
 80084e8:	f7ff fe02 	bl	80080f0 <_fflush_r>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d0d9      	beq.n	80084a4 <__swbuf_r+0x2e>
 80084f0:	e7d6      	b.n	80084a0 <__swbuf_r+0x2a>
	...

080084f4 <__swsetup_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4b29      	ldr	r3, [pc, #164]	@ (800859c <__swsetup_r+0xa8>)
 80084f8:	4605      	mov	r5, r0
 80084fa:	6818      	ldr	r0, [r3, #0]
 80084fc:	460c      	mov	r4, r1
 80084fe:	b118      	cbz	r0, 8008508 <__swsetup_r+0x14>
 8008500:	6a03      	ldr	r3, [r0, #32]
 8008502:	b90b      	cbnz	r3, 8008508 <__swsetup_r+0x14>
 8008504:	f7ff febc 	bl	8008280 <__sinit>
 8008508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800850c:	0719      	lsls	r1, r3, #28
 800850e:	d422      	bmi.n	8008556 <__swsetup_r+0x62>
 8008510:	06da      	lsls	r2, r3, #27
 8008512:	d407      	bmi.n	8008524 <__swsetup_r+0x30>
 8008514:	2209      	movs	r2, #9
 8008516:	602a      	str	r2, [r5, #0]
 8008518:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800851c:	81a3      	strh	r3, [r4, #12]
 800851e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008522:	e033      	b.n	800858c <__swsetup_r+0x98>
 8008524:	0758      	lsls	r0, r3, #29
 8008526:	d512      	bpl.n	800854e <__swsetup_r+0x5a>
 8008528:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800852a:	b141      	cbz	r1, 800853e <__swsetup_r+0x4a>
 800852c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008530:	4299      	cmp	r1, r3
 8008532:	d002      	beq.n	800853a <__swsetup_r+0x46>
 8008534:	4628      	mov	r0, r5
 8008536:	f000 f8bd 	bl	80086b4 <_free_r>
 800853a:	2300      	movs	r3, #0
 800853c:	6363      	str	r3, [r4, #52]	@ 0x34
 800853e:	89a3      	ldrh	r3, [r4, #12]
 8008540:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008544:	81a3      	strh	r3, [r4, #12]
 8008546:	2300      	movs	r3, #0
 8008548:	6063      	str	r3, [r4, #4]
 800854a:	6923      	ldr	r3, [r4, #16]
 800854c:	6023      	str	r3, [r4, #0]
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	f043 0308 	orr.w	r3, r3, #8
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	6923      	ldr	r3, [r4, #16]
 8008558:	b94b      	cbnz	r3, 800856e <__swsetup_r+0x7a>
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008564:	d003      	beq.n	800856e <__swsetup_r+0x7a>
 8008566:	4621      	mov	r1, r4
 8008568:	4628      	mov	r0, r5
 800856a:	f000 ff8f 	bl	800948c <__smakebuf_r>
 800856e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008572:	f013 0201 	ands.w	r2, r3, #1
 8008576:	d00a      	beq.n	800858e <__swsetup_r+0x9a>
 8008578:	2200      	movs	r2, #0
 800857a:	60a2      	str	r2, [r4, #8]
 800857c:	6962      	ldr	r2, [r4, #20]
 800857e:	4252      	negs	r2, r2
 8008580:	61a2      	str	r2, [r4, #24]
 8008582:	6922      	ldr	r2, [r4, #16]
 8008584:	b942      	cbnz	r2, 8008598 <__swsetup_r+0xa4>
 8008586:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800858a:	d1c5      	bne.n	8008518 <__swsetup_r+0x24>
 800858c:	bd38      	pop	{r3, r4, r5, pc}
 800858e:	0799      	lsls	r1, r3, #30
 8008590:	bf58      	it	pl
 8008592:	6962      	ldrpl	r2, [r4, #20]
 8008594:	60a2      	str	r2, [r4, #8]
 8008596:	e7f4      	b.n	8008582 <__swsetup_r+0x8e>
 8008598:	2000      	movs	r0, #0
 800859a:	e7f7      	b.n	800858c <__swsetup_r+0x98>
 800859c:	2000001c 	.word	0x2000001c

080085a0 <memset>:
 80085a0:	4402      	add	r2, r0
 80085a2:	4603      	mov	r3, r0
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d100      	bne.n	80085aa <memset+0xa>
 80085a8:	4770      	bx	lr
 80085aa:	f803 1b01 	strb.w	r1, [r3], #1
 80085ae:	e7f9      	b.n	80085a4 <memset+0x4>

080085b0 <_close_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4d06      	ldr	r5, [pc, #24]	@ (80085cc <_close_r+0x1c>)
 80085b4:	2300      	movs	r3, #0
 80085b6:	4604      	mov	r4, r0
 80085b8:	4608      	mov	r0, r1
 80085ba:	602b      	str	r3, [r5, #0]
 80085bc:	f7f8 fe14 	bl	80011e8 <_close>
 80085c0:	1c43      	adds	r3, r0, #1
 80085c2:	d102      	bne.n	80085ca <_close_r+0x1a>
 80085c4:	682b      	ldr	r3, [r5, #0]
 80085c6:	b103      	cbz	r3, 80085ca <_close_r+0x1a>
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	bd38      	pop	{r3, r4, r5, pc}
 80085cc:	20004cd4 	.word	0x20004cd4

080085d0 <_lseek_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d07      	ldr	r5, [pc, #28]	@ (80085f0 <_lseek_r+0x20>)
 80085d4:	4604      	mov	r4, r0
 80085d6:	4608      	mov	r0, r1
 80085d8:	4611      	mov	r1, r2
 80085da:	2200      	movs	r2, #0
 80085dc:	602a      	str	r2, [r5, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	f7f8 fe29 	bl	8001236 <_lseek>
 80085e4:	1c43      	adds	r3, r0, #1
 80085e6:	d102      	bne.n	80085ee <_lseek_r+0x1e>
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	b103      	cbz	r3, 80085ee <_lseek_r+0x1e>
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	bd38      	pop	{r3, r4, r5, pc}
 80085f0:	20004cd4 	.word	0x20004cd4

080085f4 <_read_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	4d07      	ldr	r5, [pc, #28]	@ (8008614 <_read_r+0x20>)
 80085f8:	4604      	mov	r4, r0
 80085fa:	4608      	mov	r0, r1
 80085fc:	4611      	mov	r1, r2
 80085fe:	2200      	movs	r2, #0
 8008600:	602a      	str	r2, [r5, #0]
 8008602:	461a      	mov	r2, r3
 8008604:	f7f8 fd76 	bl	80010f4 <_read>
 8008608:	1c43      	adds	r3, r0, #1
 800860a:	d102      	bne.n	8008612 <_read_r+0x1e>
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	b103      	cbz	r3, 8008612 <_read_r+0x1e>
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	bd38      	pop	{r3, r4, r5, pc}
 8008614:	20004cd4 	.word	0x20004cd4

08008618 <_write_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	4d07      	ldr	r5, [pc, #28]	@ (8008638 <_write_r+0x20>)
 800861c:	4604      	mov	r4, r0
 800861e:	4608      	mov	r0, r1
 8008620:	4611      	mov	r1, r2
 8008622:	2200      	movs	r2, #0
 8008624:	602a      	str	r2, [r5, #0]
 8008626:	461a      	mov	r2, r3
 8008628:	f7f8 fd36 	bl	8001098 <_write>
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	d102      	bne.n	8008636 <_write_r+0x1e>
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	b103      	cbz	r3, 8008636 <_write_r+0x1e>
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	bd38      	pop	{r3, r4, r5, pc}
 8008638:	20004cd4 	.word	0x20004cd4

0800863c <__errno>:
 800863c:	4b01      	ldr	r3, [pc, #4]	@ (8008644 <__errno+0x8>)
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	2000001c 	.word	0x2000001c

08008648 <__libc_init_array>:
 8008648:	b570      	push	{r4, r5, r6, lr}
 800864a:	4d0d      	ldr	r5, [pc, #52]	@ (8008680 <__libc_init_array+0x38>)
 800864c:	4c0d      	ldr	r4, [pc, #52]	@ (8008684 <__libc_init_array+0x3c>)
 800864e:	1b64      	subs	r4, r4, r5
 8008650:	10a4      	asrs	r4, r4, #2
 8008652:	2600      	movs	r6, #0
 8008654:	42a6      	cmp	r6, r4
 8008656:	d109      	bne.n	800866c <__libc_init_array+0x24>
 8008658:	4d0b      	ldr	r5, [pc, #44]	@ (8008688 <__libc_init_array+0x40>)
 800865a:	4c0c      	ldr	r4, [pc, #48]	@ (800868c <__libc_init_array+0x44>)
 800865c:	f001 f99e 	bl	800999c <_init>
 8008660:	1b64      	subs	r4, r4, r5
 8008662:	10a4      	asrs	r4, r4, #2
 8008664:	2600      	movs	r6, #0
 8008666:	42a6      	cmp	r6, r4
 8008668:	d105      	bne.n	8008676 <__libc_init_array+0x2e>
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008670:	4798      	blx	r3
 8008672:	3601      	adds	r6, #1
 8008674:	e7ee      	b.n	8008654 <__libc_init_array+0xc>
 8008676:	f855 3b04 	ldr.w	r3, [r5], #4
 800867a:	4798      	blx	r3
 800867c:	3601      	adds	r6, #1
 800867e:	e7f2      	b.n	8008666 <__libc_init_array+0x1e>
 8008680:	08009eac 	.word	0x08009eac
 8008684:	08009eac 	.word	0x08009eac
 8008688:	08009eac 	.word	0x08009eac
 800868c:	08009eb0 	.word	0x08009eb0

08008690 <__retarget_lock_init_recursive>:
 8008690:	4770      	bx	lr

08008692 <__retarget_lock_acquire_recursive>:
 8008692:	4770      	bx	lr

08008694 <__retarget_lock_release_recursive>:
 8008694:	4770      	bx	lr

08008696 <memcpy>:
 8008696:	440a      	add	r2, r1
 8008698:	4291      	cmp	r1, r2
 800869a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800869e:	d100      	bne.n	80086a2 <memcpy+0xc>
 80086a0:	4770      	bx	lr
 80086a2:	b510      	push	{r4, lr}
 80086a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086ac:	4291      	cmp	r1, r2
 80086ae:	d1f9      	bne.n	80086a4 <memcpy+0xe>
 80086b0:	bd10      	pop	{r4, pc}
	...

080086b4 <_free_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	4605      	mov	r5, r0
 80086b8:	2900      	cmp	r1, #0
 80086ba:	d041      	beq.n	8008740 <_free_r+0x8c>
 80086bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086c0:	1f0c      	subs	r4, r1, #4
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	bfb8      	it	lt
 80086c6:	18e4      	addlt	r4, r4, r3
 80086c8:	f000 f8e0 	bl	800888c <__malloc_lock>
 80086cc:	4a1d      	ldr	r2, [pc, #116]	@ (8008744 <_free_r+0x90>)
 80086ce:	6813      	ldr	r3, [r2, #0]
 80086d0:	b933      	cbnz	r3, 80086e0 <_free_r+0x2c>
 80086d2:	6063      	str	r3, [r4, #4]
 80086d4:	6014      	str	r4, [r2, #0]
 80086d6:	4628      	mov	r0, r5
 80086d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086dc:	f000 b8dc 	b.w	8008898 <__malloc_unlock>
 80086e0:	42a3      	cmp	r3, r4
 80086e2:	d908      	bls.n	80086f6 <_free_r+0x42>
 80086e4:	6820      	ldr	r0, [r4, #0]
 80086e6:	1821      	adds	r1, r4, r0
 80086e8:	428b      	cmp	r3, r1
 80086ea:	bf01      	itttt	eq
 80086ec:	6819      	ldreq	r1, [r3, #0]
 80086ee:	685b      	ldreq	r3, [r3, #4]
 80086f0:	1809      	addeq	r1, r1, r0
 80086f2:	6021      	streq	r1, [r4, #0]
 80086f4:	e7ed      	b.n	80086d2 <_free_r+0x1e>
 80086f6:	461a      	mov	r2, r3
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	b10b      	cbz	r3, 8008700 <_free_r+0x4c>
 80086fc:	42a3      	cmp	r3, r4
 80086fe:	d9fa      	bls.n	80086f6 <_free_r+0x42>
 8008700:	6811      	ldr	r1, [r2, #0]
 8008702:	1850      	adds	r0, r2, r1
 8008704:	42a0      	cmp	r0, r4
 8008706:	d10b      	bne.n	8008720 <_free_r+0x6c>
 8008708:	6820      	ldr	r0, [r4, #0]
 800870a:	4401      	add	r1, r0
 800870c:	1850      	adds	r0, r2, r1
 800870e:	4283      	cmp	r3, r0
 8008710:	6011      	str	r1, [r2, #0]
 8008712:	d1e0      	bne.n	80086d6 <_free_r+0x22>
 8008714:	6818      	ldr	r0, [r3, #0]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	6053      	str	r3, [r2, #4]
 800871a:	4408      	add	r0, r1
 800871c:	6010      	str	r0, [r2, #0]
 800871e:	e7da      	b.n	80086d6 <_free_r+0x22>
 8008720:	d902      	bls.n	8008728 <_free_r+0x74>
 8008722:	230c      	movs	r3, #12
 8008724:	602b      	str	r3, [r5, #0]
 8008726:	e7d6      	b.n	80086d6 <_free_r+0x22>
 8008728:	6820      	ldr	r0, [r4, #0]
 800872a:	1821      	adds	r1, r4, r0
 800872c:	428b      	cmp	r3, r1
 800872e:	bf04      	itt	eq
 8008730:	6819      	ldreq	r1, [r3, #0]
 8008732:	685b      	ldreq	r3, [r3, #4]
 8008734:	6063      	str	r3, [r4, #4]
 8008736:	bf04      	itt	eq
 8008738:	1809      	addeq	r1, r1, r0
 800873a:	6021      	streq	r1, [r4, #0]
 800873c:	6054      	str	r4, [r2, #4]
 800873e:	e7ca      	b.n	80086d6 <_free_r+0x22>
 8008740:	bd38      	pop	{r3, r4, r5, pc}
 8008742:	bf00      	nop
 8008744:	20004ce0 	.word	0x20004ce0

08008748 <sbrk_aligned>:
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	4e0f      	ldr	r6, [pc, #60]	@ (8008788 <sbrk_aligned+0x40>)
 800874c:	460c      	mov	r4, r1
 800874e:	6831      	ldr	r1, [r6, #0]
 8008750:	4605      	mov	r5, r0
 8008752:	b911      	cbnz	r1, 800875a <sbrk_aligned+0x12>
 8008754:	f001 f86c 	bl	8009830 <_sbrk_r>
 8008758:	6030      	str	r0, [r6, #0]
 800875a:	4621      	mov	r1, r4
 800875c:	4628      	mov	r0, r5
 800875e:	f001 f867 	bl	8009830 <_sbrk_r>
 8008762:	1c43      	adds	r3, r0, #1
 8008764:	d103      	bne.n	800876e <sbrk_aligned+0x26>
 8008766:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800876a:	4620      	mov	r0, r4
 800876c:	bd70      	pop	{r4, r5, r6, pc}
 800876e:	1cc4      	adds	r4, r0, #3
 8008770:	f024 0403 	bic.w	r4, r4, #3
 8008774:	42a0      	cmp	r0, r4
 8008776:	d0f8      	beq.n	800876a <sbrk_aligned+0x22>
 8008778:	1a21      	subs	r1, r4, r0
 800877a:	4628      	mov	r0, r5
 800877c:	f001 f858 	bl	8009830 <_sbrk_r>
 8008780:	3001      	adds	r0, #1
 8008782:	d1f2      	bne.n	800876a <sbrk_aligned+0x22>
 8008784:	e7ef      	b.n	8008766 <sbrk_aligned+0x1e>
 8008786:	bf00      	nop
 8008788:	20004cdc 	.word	0x20004cdc

0800878c <_malloc_r>:
 800878c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008790:	1ccd      	adds	r5, r1, #3
 8008792:	f025 0503 	bic.w	r5, r5, #3
 8008796:	3508      	adds	r5, #8
 8008798:	2d0c      	cmp	r5, #12
 800879a:	bf38      	it	cc
 800879c:	250c      	movcc	r5, #12
 800879e:	2d00      	cmp	r5, #0
 80087a0:	4606      	mov	r6, r0
 80087a2:	db01      	blt.n	80087a8 <_malloc_r+0x1c>
 80087a4:	42a9      	cmp	r1, r5
 80087a6:	d904      	bls.n	80087b2 <_malloc_r+0x26>
 80087a8:	230c      	movs	r3, #12
 80087aa:	6033      	str	r3, [r6, #0]
 80087ac:	2000      	movs	r0, #0
 80087ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008888 <_malloc_r+0xfc>
 80087b6:	f000 f869 	bl	800888c <__malloc_lock>
 80087ba:	f8d8 3000 	ldr.w	r3, [r8]
 80087be:	461c      	mov	r4, r3
 80087c0:	bb44      	cbnz	r4, 8008814 <_malloc_r+0x88>
 80087c2:	4629      	mov	r1, r5
 80087c4:	4630      	mov	r0, r6
 80087c6:	f7ff ffbf 	bl	8008748 <sbrk_aligned>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	4604      	mov	r4, r0
 80087ce:	d158      	bne.n	8008882 <_malloc_r+0xf6>
 80087d0:	f8d8 4000 	ldr.w	r4, [r8]
 80087d4:	4627      	mov	r7, r4
 80087d6:	2f00      	cmp	r7, #0
 80087d8:	d143      	bne.n	8008862 <_malloc_r+0xd6>
 80087da:	2c00      	cmp	r4, #0
 80087dc:	d04b      	beq.n	8008876 <_malloc_r+0xea>
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	4639      	mov	r1, r7
 80087e2:	4630      	mov	r0, r6
 80087e4:	eb04 0903 	add.w	r9, r4, r3
 80087e8:	f001 f822 	bl	8009830 <_sbrk_r>
 80087ec:	4581      	cmp	r9, r0
 80087ee:	d142      	bne.n	8008876 <_malloc_r+0xea>
 80087f0:	6821      	ldr	r1, [r4, #0]
 80087f2:	1a6d      	subs	r5, r5, r1
 80087f4:	4629      	mov	r1, r5
 80087f6:	4630      	mov	r0, r6
 80087f8:	f7ff ffa6 	bl	8008748 <sbrk_aligned>
 80087fc:	3001      	adds	r0, #1
 80087fe:	d03a      	beq.n	8008876 <_malloc_r+0xea>
 8008800:	6823      	ldr	r3, [r4, #0]
 8008802:	442b      	add	r3, r5
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	f8d8 3000 	ldr.w	r3, [r8]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	bb62      	cbnz	r2, 8008868 <_malloc_r+0xdc>
 800880e:	f8c8 7000 	str.w	r7, [r8]
 8008812:	e00f      	b.n	8008834 <_malloc_r+0xa8>
 8008814:	6822      	ldr	r2, [r4, #0]
 8008816:	1b52      	subs	r2, r2, r5
 8008818:	d420      	bmi.n	800885c <_malloc_r+0xd0>
 800881a:	2a0b      	cmp	r2, #11
 800881c:	d917      	bls.n	800884e <_malloc_r+0xc2>
 800881e:	1961      	adds	r1, r4, r5
 8008820:	42a3      	cmp	r3, r4
 8008822:	6025      	str	r5, [r4, #0]
 8008824:	bf18      	it	ne
 8008826:	6059      	strne	r1, [r3, #4]
 8008828:	6863      	ldr	r3, [r4, #4]
 800882a:	bf08      	it	eq
 800882c:	f8c8 1000 	streq.w	r1, [r8]
 8008830:	5162      	str	r2, [r4, r5]
 8008832:	604b      	str	r3, [r1, #4]
 8008834:	4630      	mov	r0, r6
 8008836:	f000 f82f 	bl	8008898 <__malloc_unlock>
 800883a:	f104 000b 	add.w	r0, r4, #11
 800883e:	1d23      	adds	r3, r4, #4
 8008840:	f020 0007 	bic.w	r0, r0, #7
 8008844:	1ac2      	subs	r2, r0, r3
 8008846:	bf1c      	itt	ne
 8008848:	1a1b      	subne	r3, r3, r0
 800884a:	50a3      	strne	r3, [r4, r2]
 800884c:	e7af      	b.n	80087ae <_malloc_r+0x22>
 800884e:	6862      	ldr	r2, [r4, #4]
 8008850:	42a3      	cmp	r3, r4
 8008852:	bf0c      	ite	eq
 8008854:	f8c8 2000 	streq.w	r2, [r8]
 8008858:	605a      	strne	r2, [r3, #4]
 800885a:	e7eb      	b.n	8008834 <_malloc_r+0xa8>
 800885c:	4623      	mov	r3, r4
 800885e:	6864      	ldr	r4, [r4, #4]
 8008860:	e7ae      	b.n	80087c0 <_malloc_r+0x34>
 8008862:	463c      	mov	r4, r7
 8008864:	687f      	ldr	r7, [r7, #4]
 8008866:	e7b6      	b.n	80087d6 <_malloc_r+0x4a>
 8008868:	461a      	mov	r2, r3
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	42a3      	cmp	r3, r4
 800886e:	d1fb      	bne.n	8008868 <_malloc_r+0xdc>
 8008870:	2300      	movs	r3, #0
 8008872:	6053      	str	r3, [r2, #4]
 8008874:	e7de      	b.n	8008834 <_malloc_r+0xa8>
 8008876:	230c      	movs	r3, #12
 8008878:	6033      	str	r3, [r6, #0]
 800887a:	4630      	mov	r0, r6
 800887c:	f000 f80c 	bl	8008898 <__malloc_unlock>
 8008880:	e794      	b.n	80087ac <_malloc_r+0x20>
 8008882:	6005      	str	r5, [r0, #0]
 8008884:	e7d6      	b.n	8008834 <_malloc_r+0xa8>
 8008886:	bf00      	nop
 8008888:	20004ce0 	.word	0x20004ce0

0800888c <__malloc_lock>:
 800888c:	4801      	ldr	r0, [pc, #4]	@ (8008894 <__malloc_lock+0x8>)
 800888e:	f7ff bf00 	b.w	8008692 <__retarget_lock_acquire_recursive>
 8008892:	bf00      	nop
 8008894:	20004cd8 	.word	0x20004cd8

08008898 <__malloc_unlock>:
 8008898:	4801      	ldr	r0, [pc, #4]	@ (80088a0 <__malloc_unlock+0x8>)
 800889a:	f7ff befb 	b.w	8008694 <__retarget_lock_release_recursive>
 800889e:	bf00      	nop
 80088a0:	20004cd8 	.word	0x20004cd8

080088a4 <__sfputc_r>:
 80088a4:	6893      	ldr	r3, [r2, #8]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	b410      	push	{r4}
 80088ac:	6093      	str	r3, [r2, #8]
 80088ae:	da08      	bge.n	80088c2 <__sfputc_r+0x1e>
 80088b0:	6994      	ldr	r4, [r2, #24]
 80088b2:	42a3      	cmp	r3, r4
 80088b4:	db01      	blt.n	80088ba <__sfputc_r+0x16>
 80088b6:	290a      	cmp	r1, #10
 80088b8:	d103      	bne.n	80088c2 <__sfputc_r+0x1e>
 80088ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088be:	f7ff bdda 	b.w	8008476 <__swbuf_r>
 80088c2:	6813      	ldr	r3, [r2, #0]
 80088c4:	1c58      	adds	r0, r3, #1
 80088c6:	6010      	str	r0, [r2, #0]
 80088c8:	7019      	strb	r1, [r3, #0]
 80088ca:	4608      	mov	r0, r1
 80088cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <__sfputs_r>:
 80088d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d4:	4606      	mov	r6, r0
 80088d6:	460f      	mov	r7, r1
 80088d8:	4614      	mov	r4, r2
 80088da:	18d5      	adds	r5, r2, r3
 80088dc:	42ac      	cmp	r4, r5
 80088de:	d101      	bne.n	80088e4 <__sfputs_r+0x12>
 80088e0:	2000      	movs	r0, #0
 80088e2:	e007      	b.n	80088f4 <__sfputs_r+0x22>
 80088e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e8:	463a      	mov	r2, r7
 80088ea:	4630      	mov	r0, r6
 80088ec:	f7ff ffda 	bl	80088a4 <__sfputc_r>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d1f3      	bne.n	80088dc <__sfputs_r+0xa>
 80088f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088f8 <_vfiprintf_r>:
 80088f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	460d      	mov	r5, r1
 80088fe:	b09d      	sub	sp, #116	@ 0x74
 8008900:	4614      	mov	r4, r2
 8008902:	4698      	mov	r8, r3
 8008904:	4606      	mov	r6, r0
 8008906:	b118      	cbz	r0, 8008910 <_vfiprintf_r+0x18>
 8008908:	6a03      	ldr	r3, [r0, #32]
 800890a:	b90b      	cbnz	r3, 8008910 <_vfiprintf_r+0x18>
 800890c:	f7ff fcb8 	bl	8008280 <__sinit>
 8008910:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008912:	07d9      	lsls	r1, r3, #31
 8008914:	d405      	bmi.n	8008922 <_vfiprintf_r+0x2a>
 8008916:	89ab      	ldrh	r3, [r5, #12]
 8008918:	059a      	lsls	r2, r3, #22
 800891a:	d402      	bmi.n	8008922 <_vfiprintf_r+0x2a>
 800891c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800891e:	f7ff feb8 	bl	8008692 <__retarget_lock_acquire_recursive>
 8008922:	89ab      	ldrh	r3, [r5, #12]
 8008924:	071b      	lsls	r3, r3, #28
 8008926:	d501      	bpl.n	800892c <_vfiprintf_r+0x34>
 8008928:	692b      	ldr	r3, [r5, #16]
 800892a:	b99b      	cbnz	r3, 8008954 <_vfiprintf_r+0x5c>
 800892c:	4629      	mov	r1, r5
 800892e:	4630      	mov	r0, r6
 8008930:	f7ff fde0 	bl	80084f4 <__swsetup_r>
 8008934:	b170      	cbz	r0, 8008954 <_vfiprintf_r+0x5c>
 8008936:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008938:	07dc      	lsls	r4, r3, #31
 800893a:	d504      	bpl.n	8008946 <_vfiprintf_r+0x4e>
 800893c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008940:	b01d      	add	sp, #116	@ 0x74
 8008942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008946:	89ab      	ldrh	r3, [r5, #12]
 8008948:	0598      	lsls	r0, r3, #22
 800894a:	d4f7      	bmi.n	800893c <_vfiprintf_r+0x44>
 800894c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800894e:	f7ff fea1 	bl	8008694 <__retarget_lock_release_recursive>
 8008952:	e7f3      	b.n	800893c <_vfiprintf_r+0x44>
 8008954:	2300      	movs	r3, #0
 8008956:	9309      	str	r3, [sp, #36]	@ 0x24
 8008958:	2320      	movs	r3, #32
 800895a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800895e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008962:	2330      	movs	r3, #48	@ 0x30
 8008964:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008b14 <_vfiprintf_r+0x21c>
 8008968:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800896c:	f04f 0901 	mov.w	r9, #1
 8008970:	4623      	mov	r3, r4
 8008972:	469a      	mov	sl, r3
 8008974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008978:	b10a      	cbz	r2, 800897e <_vfiprintf_r+0x86>
 800897a:	2a25      	cmp	r2, #37	@ 0x25
 800897c:	d1f9      	bne.n	8008972 <_vfiprintf_r+0x7a>
 800897e:	ebba 0b04 	subs.w	fp, sl, r4
 8008982:	d00b      	beq.n	800899c <_vfiprintf_r+0xa4>
 8008984:	465b      	mov	r3, fp
 8008986:	4622      	mov	r2, r4
 8008988:	4629      	mov	r1, r5
 800898a:	4630      	mov	r0, r6
 800898c:	f7ff ffa1 	bl	80088d2 <__sfputs_r>
 8008990:	3001      	adds	r0, #1
 8008992:	f000 80a7 	beq.w	8008ae4 <_vfiprintf_r+0x1ec>
 8008996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008998:	445a      	add	r2, fp
 800899a:	9209      	str	r2, [sp, #36]	@ 0x24
 800899c:	f89a 3000 	ldrb.w	r3, [sl]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f000 809f 	beq.w	8008ae4 <_vfiprintf_r+0x1ec>
 80089a6:	2300      	movs	r3, #0
 80089a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80089ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089b0:	f10a 0a01 	add.w	sl, sl, #1
 80089b4:	9304      	str	r3, [sp, #16]
 80089b6:	9307      	str	r3, [sp, #28]
 80089b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80089be:	4654      	mov	r4, sl
 80089c0:	2205      	movs	r2, #5
 80089c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c6:	4853      	ldr	r0, [pc, #332]	@ (8008b14 <_vfiprintf_r+0x21c>)
 80089c8:	f7f7 fc3a 	bl	8000240 <memchr>
 80089cc:	9a04      	ldr	r2, [sp, #16]
 80089ce:	b9d8      	cbnz	r0, 8008a08 <_vfiprintf_r+0x110>
 80089d0:	06d1      	lsls	r1, r2, #27
 80089d2:	bf44      	itt	mi
 80089d4:	2320      	movmi	r3, #32
 80089d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089da:	0713      	lsls	r3, r2, #28
 80089dc:	bf44      	itt	mi
 80089de:	232b      	movmi	r3, #43	@ 0x2b
 80089e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089e4:	f89a 3000 	ldrb.w	r3, [sl]
 80089e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80089ea:	d015      	beq.n	8008a18 <_vfiprintf_r+0x120>
 80089ec:	9a07      	ldr	r2, [sp, #28]
 80089ee:	4654      	mov	r4, sl
 80089f0:	2000      	movs	r0, #0
 80089f2:	f04f 0c0a 	mov.w	ip, #10
 80089f6:	4621      	mov	r1, r4
 80089f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089fc:	3b30      	subs	r3, #48	@ 0x30
 80089fe:	2b09      	cmp	r3, #9
 8008a00:	d94b      	bls.n	8008a9a <_vfiprintf_r+0x1a2>
 8008a02:	b1b0      	cbz	r0, 8008a32 <_vfiprintf_r+0x13a>
 8008a04:	9207      	str	r2, [sp, #28]
 8008a06:	e014      	b.n	8008a32 <_vfiprintf_r+0x13a>
 8008a08:	eba0 0308 	sub.w	r3, r0, r8
 8008a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8008a10:	4313      	orrs	r3, r2
 8008a12:	9304      	str	r3, [sp, #16]
 8008a14:	46a2      	mov	sl, r4
 8008a16:	e7d2      	b.n	80089be <_vfiprintf_r+0xc6>
 8008a18:	9b03      	ldr	r3, [sp, #12]
 8008a1a:	1d19      	adds	r1, r3, #4
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	9103      	str	r1, [sp, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	bfbb      	ittet	lt
 8008a24:	425b      	neglt	r3, r3
 8008a26:	f042 0202 	orrlt.w	r2, r2, #2
 8008a2a:	9307      	strge	r3, [sp, #28]
 8008a2c:	9307      	strlt	r3, [sp, #28]
 8008a2e:	bfb8      	it	lt
 8008a30:	9204      	strlt	r2, [sp, #16]
 8008a32:	7823      	ldrb	r3, [r4, #0]
 8008a34:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a36:	d10a      	bne.n	8008a4e <_vfiprintf_r+0x156>
 8008a38:	7863      	ldrb	r3, [r4, #1]
 8008a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a3c:	d132      	bne.n	8008aa4 <_vfiprintf_r+0x1ac>
 8008a3e:	9b03      	ldr	r3, [sp, #12]
 8008a40:	1d1a      	adds	r2, r3, #4
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	9203      	str	r2, [sp, #12]
 8008a46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a4a:	3402      	adds	r4, #2
 8008a4c:	9305      	str	r3, [sp, #20]
 8008a4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b24 <_vfiprintf_r+0x22c>
 8008a52:	7821      	ldrb	r1, [r4, #0]
 8008a54:	2203      	movs	r2, #3
 8008a56:	4650      	mov	r0, sl
 8008a58:	f7f7 fbf2 	bl	8000240 <memchr>
 8008a5c:	b138      	cbz	r0, 8008a6e <_vfiprintf_r+0x176>
 8008a5e:	9b04      	ldr	r3, [sp, #16]
 8008a60:	eba0 000a 	sub.w	r0, r0, sl
 8008a64:	2240      	movs	r2, #64	@ 0x40
 8008a66:	4082      	lsls	r2, r0
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	3401      	adds	r4, #1
 8008a6c:	9304      	str	r3, [sp, #16]
 8008a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a72:	4829      	ldr	r0, [pc, #164]	@ (8008b18 <_vfiprintf_r+0x220>)
 8008a74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a78:	2206      	movs	r2, #6
 8008a7a:	f7f7 fbe1 	bl	8000240 <memchr>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d03f      	beq.n	8008b02 <_vfiprintf_r+0x20a>
 8008a82:	4b26      	ldr	r3, [pc, #152]	@ (8008b1c <_vfiprintf_r+0x224>)
 8008a84:	bb1b      	cbnz	r3, 8008ace <_vfiprintf_r+0x1d6>
 8008a86:	9b03      	ldr	r3, [sp, #12]
 8008a88:	3307      	adds	r3, #7
 8008a8a:	f023 0307 	bic.w	r3, r3, #7
 8008a8e:	3308      	adds	r3, #8
 8008a90:	9303      	str	r3, [sp, #12]
 8008a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a94:	443b      	add	r3, r7
 8008a96:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a98:	e76a      	b.n	8008970 <_vfiprintf_r+0x78>
 8008a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	2001      	movs	r0, #1
 8008aa2:	e7a8      	b.n	80089f6 <_vfiprintf_r+0xfe>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	3401      	adds	r4, #1
 8008aa8:	9305      	str	r3, [sp, #20]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	f04f 0c0a 	mov.w	ip, #10
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ab6:	3a30      	subs	r2, #48	@ 0x30
 8008ab8:	2a09      	cmp	r2, #9
 8008aba:	d903      	bls.n	8008ac4 <_vfiprintf_r+0x1cc>
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d0c6      	beq.n	8008a4e <_vfiprintf_r+0x156>
 8008ac0:	9105      	str	r1, [sp, #20]
 8008ac2:	e7c4      	b.n	8008a4e <_vfiprintf_r+0x156>
 8008ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ac8:	4604      	mov	r4, r0
 8008aca:	2301      	movs	r3, #1
 8008acc:	e7f0      	b.n	8008ab0 <_vfiprintf_r+0x1b8>
 8008ace:	ab03      	add	r3, sp, #12
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	462a      	mov	r2, r5
 8008ad4:	4b12      	ldr	r3, [pc, #72]	@ (8008b20 <_vfiprintf_r+0x228>)
 8008ad6:	a904      	add	r1, sp, #16
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f3af 8000 	nop.w
 8008ade:	4607      	mov	r7, r0
 8008ae0:	1c78      	adds	r0, r7, #1
 8008ae2:	d1d6      	bne.n	8008a92 <_vfiprintf_r+0x19a>
 8008ae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ae6:	07d9      	lsls	r1, r3, #31
 8008ae8:	d405      	bmi.n	8008af6 <_vfiprintf_r+0x1fe>
 8008aea:	89ab      	ldrh	r3, [r5, #12]
 8008aec:	059a      	lsls	r2, r3, #22
 8008aee:	d402      	bmi.n	8008af6 <_vfiprintf_r+0x1fe>
 8008af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008af2:	f7ff fdcf 	bl	8008694 <__retarget_lock_release_recursive>
 8008af6:	89ab      	ldrh	r3, [r5, #12]
 8008af8:	065b      	lsls	r3, r3, #25
 8008afa:	f53f af1f 	bmi.w	800893c <_vfiprintf_r+0x44>
 8008afe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b00:	e71e      	b.n	8008940 <_vfiprintf_r+0x48>
 8008b02:	ab03      	add	r3, sp, #12
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	462a      	mov	r2, r5
 8008b08:	4b05      	ldr	r3, [pc, #20]	@ (8008b20 <_vfiprintf_r+0x228>)
 8008b0a:	a904      	add	r1, sp, #16
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f000 f879 	bl	8008c04 <_printf_i>
 8008b12:	e7e4      	b.n	8008ade <_vfiprintf_r+0x1e6>
 8008b14:	08009e55 	.word	0x08009e55
 8008b18:	08009e5f 	.word	0x08009e5f
 8008b1c:	00000000 	.word	0x00000000
 8008b20:	080088d3 	.word	0x080088d3
 8008b24:	08009e5b 	.word	0x08009e5b

08008b28 <_printf_common>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	4616      	mov	r6, r2
 8008b2e:	4698      	mov	r8, r3
 8008b30:	688a      	ldr	r2, [r1, #8]
 8008b32:	690b      	ldr	r3, [r1, #16]
 8008b34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	bfb8      	it	lt
 8008b3c:	4613      	movlt	r3, r2
 8008b3e:	6033      	str	r3, [r6, #0]
 8008b40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b44:	4607      	mov	r7, r0
 8008b46:	460c      	mov	r4, r1
 8008b48:	b10a      	cbz	r2, 8008b4e <_printf_common+0x26>
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	6033      	str	r3, [r6, #0]
 8008b4e:	6823      	ldr	r3, [r4, #0]
 8008b50:	0699      	lsls	r1, r3, #26
 8008b52:	bf42      	ittt	mi
 8008b54:	6833      	ldrmi	r3, [r6, #0]
 8008b56:	3302      	addmi	r3, #2
 8008b58:	6033      	strmi	r3, [r6, #0]
 8008b5a:	6825      	ldr	r5, [r4, #0]
 8008b5c:	f015 0506 	ands.w	r5, r5, #6
 8008b60:	d106      	bne.n	8008b70 <_printf_common+0x48>
 8008b62:	f104 0a19 	add.w	sl, r4, #25
 8008b66:	68e3      	ldr	r3, [r4, #12]
 8008b68:	6832      	ldr	r2, [r6, #0]
 8008b6a:	1a9b      	subs	r3, r3, r2
 8008b6c:	42ab      	cmp	r3, r5
 8008b6e:	dc26      	bgt.n	8008bbe <_printf_common+0x96>
 8008b70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b74:	6822      	ldr	r2, [r4, #0]
 8008b76:	3b00      	subs	r3, #0
 8008b78:	bf18      	it	ne
 8008b7a:	2301      	movne	r3, #1
 8008b7c:	0692      	lsls	r2, r2, #26
 8008b7e:	d42b      	bmi.n	8008bd8 <_printf_common+0xb0>
 8008b80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b84:	4641      	mov	r1, r8
 8008b86:	4638      	mov	r0, r7
 8008b88:	47c8      	blx	r9
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	d01e      	beq.n	8008bcc <_printf_common+0xa4>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	6922      	ldr	r2, [r4, #16]
 8008b92:	f003 0306 	and.w	r3, r3, #6
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	bf02      	ittt	eq
 8008b9a:	68e5      	ldreq	r5, [r4, #12]
 8008b9c:	6833      	ldreq	r3, [r6, #0]
 8008b9e:	1aed      	subeq	r5, r5, r3
 8008ba0:	68a3      	ldr	r3, [r4, #8]
 8008ba2:	bf0c      	ite	eq
 8008ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ba8:	2500      	movne	r5, #0
 8008baa:	4293      	cmp	r3, r2
 8008bac:	bfc4      	itt	gt
 8008bae:	1a9b      	subgt	r3, r3, r2
 8008bb0:	18ed      	addgt	r5, r5, r3
 8008bb2:	2600      	movs	r6, #0
 8008bb4:	341a      	adds	r4, #26
 8008bb6:	42b5      	cmp	r5, r6
 8008bb8:	d11a      	bne.n	8008bf0 <_printf_common+0xc8>
 8008bba:	2000      	movs	r0, #0
 8008bbc:	e008      	b.n	8008bd0 <_printf_common+0xa8>
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	4652      	mov	r2, sl
 8008bc2:	4641      	mov	r1, r8
 8008bc4:	4638      	mov	r0, r7
 8008bc6:	47c8      	blx	r9
 8008bc8:	3001      	adds	r0, #1
 8008bca:	d103      	bne.n	8008bd4 <_printf_common+0xac>
 8008bcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd4:	3501      	adds	r5, #1
 8008bd6:	e7c6      	b.n	8008b66 <_printf_common+0x3e>
 8008bd8:	18e1      	adds	r1, r4, r3
 8008bda:	1c5a      	adds	r2, r3, #1
 8008bdc:	2030      	movs	r0, #48	@ 0x30
 8008bde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008be2:	4422      	add	r2, r4
 8008be4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008be8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008bec:	3302      	adds	r3, #2
 8008bee:	e7c7      	b.n	8008b80 <_printf_common+0x58>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	4622      	mov	r2, r4
 8008bf4:	4641      	mov	r1, r8
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	47c8      	blx	r9
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d0e6      	beq.n	8008bcc <_printf_common+0xa4>
 8008bfe:	3601      	adds	r6, #1
 8008c00:	e7d9      	b.n	8008bb6 <_printf_common+0x8e>
	...

08008c04 <_printf_i>:
 8008c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c08:	7e0f      	ldrb	r7, [r1, #24]
 8008c0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c0c:	2f78      	cmp	r7, #120	@ 0x78
 8008c0e:	4691      	mov	r9, r2
 8008c10:	4680      	mov	r8, r0
 8008c12:	460c      	mov	r4, r1
 8008c14:	469a      	mov	sl, r3
 8008c16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c1a:	d807      	bhi.n	8008c2c <_printf_i+0x28>
 8008c1c:	2f62      	cmp	r7, #98	@ 0x62
 8008c1e:	d80a      	bhi.n	8008c36 <_printf_i+0x32>
 8008c20:	2f00      	cmp	r7, #0
 8008c22:	f000 80d2 	beq.w	8008dca <_printf_i+0x1c6>
 8008c26:	2f58      	cmp	r7, #88	@ 0x58
 8008c28:	f000 80b9 	beq.w	8008d9e <_printf_i+0x19a>
 8008c2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c34:	e03a      	b.n	8008cac <_printf_i+0xa8>
 8008c36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c3a:	2b15      	cmp	r3, #21
 8008c3c:	d8f6      	bhi.n	8008c2c <_printf_i+0x28>
 8008c3e:	a101      	add	r1, pc, #4	@ (adr r1, 8008c44 <_printf_i+0x40>)
 8008c40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c44:	08008c9d 	.word	0x08008c9d
 8008c48:	08008cb1 	.word	0x08008cb1
 8008c4c:	08008c2d 	.word	0x08008c2d
 8008c50:	08008c2d 	.word	0x08008c2d
 8008c54:	08008c2d 	.word	0x08008c2d
 8008c58:	08008c2d 	.word	0x08008c2d
 8008c5c:	08008cb1 	.word	0x08008cb1
 8008c60:	08008c2d 	.word	0x08008c2d
 8008c64:	08008c2d 	.word	0x08008c2d
 8008c68:	08008c2d 	.word	0x08008c2d
 8008c6c:	08008c2d 	.word	0x08008c2d
 8008c70:	08008db1 	.word	0x08008db1
 8008c74:	08008cdb 	.word	0x08008cdb
 8008c78:	08008d6b 	.word	0x08008d6b
 8008c7c:	08008c2d 	.word	0x08008c2d
 8008c80:	08008c2d 	.word	0x08008c2d
 8008c84:	08008dd3 	.word	0x08008dd3
 8008c88:	08008c2d 	.word	0x08008c2d
 8008c8c:	08008cdb 	.word	0x08008cdb
 8008c90:	08008c2d 	.word	0x08008c2d
 8008c94:	08008c2d 	.word	0x08008c2d
 8008c98:	08008d73 	.word	0x08008d73
 8008c9c:	6833      	ldr	r3, [r6, #0]
 8008c9e:	1d1a      	adds	r2, r3, #4
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	6032      	str	r2, [r6, #0]
 8008ca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ca8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008cac:	2301      	movs	r3, #1
 8008cae:	e09d      	b.n	8008dec <_printf_i+0x1e8>
 8008cb0:	6833      	ldr	r3, [r6, #0]
 8008cb2:	6820      	ldr	r0, [r4, #0]
 8008cb4:	1d19      	adds	r1, r3, #4
 8008cb6:	6031      	str	r1, [r6, #0]
 8008cb8:	0606      	lsls	r6, r0, #24
 8008cba:	d501      	bpl.n	8008cc0 <_printf_i+0xbc>
 8008cbc:	681d      	ldr	r5, [r3, #0]
 8008cbe:	e003      	b.n	8008cc8 <_printf_i+0xc4>
 8008cc0:	0645      	lsls	r5, r0, #25
 8008cc2:	d5fb      	bpl.n	8008cbc <_printf_i+0xb8>
 8008cc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008cc8:	2d00      	cmp	r5, #0
 8008cca:	da03      	bge.n	8008cd4 <_printf_i+0xd0>
 8008ccc:	232d      	movs	r3, #45	@ 0x2d
 8008cce:	426d      	negs	r5, r5
 8008cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cd4:	4859      	ldr	r0, [pc, #356]	@ (8008e3c <_printf_i+0x238>)
 8008cd6:	230a      	movs	r3, #10
 8008cd8:	e011      	b.n	8008cfe <_printf_i+0xfa>
 8008cda:	6821      	ldr	r1, [r4, #0]
 8008cdc:	6833      	ldr	r3, [r6, #0]
 8008cde:	0608      	lsls	r0, r1, #24
 8008ce0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ce4:	d402      	bmi.n	8008cec <_printf_i+0xe8>
 8008ce6:	0649      	lsls	r1, r1, #25
 8008ce8:	bf48      	it	mi
 8008cea:	b2ad      	uxthmi	r5, r5
 8008cec:	2f6f      	cmp	r7, #111	@ 0x6f
 8008cee:	4853      	ldr	r0, [pc, #332]	@ (8008e3c <_printf_i+0x238>)
 8008cf0:	6033      	str	r3, [r6, #0]
 8008cf2:	bf14      	ite	ne
 8008cf4:	230a      	movne	r3, #10
 8008cf6:	2308      	moveq	r3, #8
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008cfe:	6866      	ldr	r6, [r4, #4]
 8008d00:	60a6      	str	r6, [r4, #8]
 8008d02:	2e00      	cmp	r6, #0
 8008d04:	bfa2      	ittt	ge
 8008d06:	6821      	ldrge	r1, [r4, #0]
 8008d08:	f021 0104 	bicge.w	r1, r1, #4
 8008d0c:	6021      	strge	r1, [r4, #0]
 8008d0e:	b90d      	cbnz	r5, 8008d14 <_printf_i+0x110>
 8008d10:	2e00      	cmp	r6, #0
 8008d12:	d04b      	beq.n	8008dac <_printf_i+0x1a8>
 8008d14:	4616      	mov	r6, r2
 8008d16:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d1a:	fb03 5711 	mls	r7, r3, r1, r5
 8008d1e:	5dc7      	ldrb	r7, [r0, r7]
 8008d20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d24:	462f      	mov	r7, r5
 8008d26:	42bb      	cmp	r3, r7
 8008d28:	460d      	mov	r5, r1
 8008d2a:	d9f4      	bls.n	8008d16 <_printf_i+0x112>
 8008d2c:	2b08      	cmp	r3, #8
 8008d2e:	d10b      	bne.n	8008d48 <_printf_i+0x144>
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	07df      	lsls	r7, r3, #31
 8008d34:	d508      	bpl.n	8008d48 <_printf_i+0x144>
 8008d36:	6923      	ldr	r3, [r4, #16]
 8008d38:	6861      	ldr	r1, [r4, #4]
 8008d3a:	4299      	cmp	r1, r3
 8008d3c:	bfde      	ittt	le
 8008d3e:	2330      	movle	r3, #48	@ 0x30
 8008d40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d44:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008d48:	1b92      	subs	r2, r2, r6
 8008d4a:	6122      	str	r2, [r4, #16]
 8008d4c:	f8cd a000 	str.w	sl, [sp]
 8008d50:	464b      	mov	r3, r9
 8008d52:	aa03      	add	r2, sp, #12
 8008d54:	4621      	mov	r1, r4
 8008d56:	4640      	mov	r0, r8
 8008d58:	f7ff fee6 	bl	8008b28 <_printf_common>
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	d14a      	bne.n	8008df6 <_printf_i+0x1f2>
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d64:	b004      	add	sp, #16
 8008d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	f043 0320 	orr.w	r3, r3, #32
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	4833      	ldr	r0, [pc, #204]	@ (8008e40 <_printf_i+0x23c>)
 8008d74:	2778      	movs	r7, #120	@ 0x78
 8008d76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	6831      	ldr	r1, [r6, #0]
 8008d7e:	061f      	lsls	r7, r3, #24
 8008d80:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d84:	d402      	bmi.n	8008d8c <_printf_i+0x188>
 8008d86:	065f      	lsls	r7, r3, #25
 8008d88:	bf48      	it	mi
 8008d8a:	b2ad      	uxthmi	r5, r5
 8008d8c:	6031      	str	r1, [r6, #0]
 8008d8e:	07d9      	lsls	r1, r3, #31
 8008d90:	bf44      	itt	mi
 8008d92:	f043 0320 	orrmi.w	r3, r3, #32
 8008d96:	6023      	strmi	r3, [r4, #0]
 8008d98:	b11d      	cbz	r5, 8008da2 <_printf_i+0x19e>
 8008d9a:	2310      	movs	r3, #16
 8008d9c:	e7ac      	b.n	8008cf8 <_printf_i+0xf4>
 8008d9e:	4827      	ldr	r0, [pc, #156]	@ (8008e3c <_printf_i+0x238>)
 8008da0:	e7e9      	b.n	8008d76 <_printf_i+0x172>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	f023 0320 	bic.w	r3, r3, #32
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	e7f6      	b.n	8008d9a <_printf_i+0x196>
 8008dac:	4616      	mov	r6, r2
 8008dae:	e7bd      	b.n	8008d2c <_printf_i+0x128>
 8008db0:	6833      	ldr	r3, [r6, #0]
 8008db2:	6825      	ldr	r5, [r4, #0]
 8008db4:	6961      	ldr	r1, [r4, #20]
 8008db6:	1d18      	adds	r0, r3, #4
 8008db8:	6030      	str	r0, [r6, #0]
 8008dba:	062e      	lsls	r6, r5, #24
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	d501      	bpl.n	8008dc4 <_printf_i+0x1c0>
 8008dc0:	6019      	str	r1, [r3, #0]
 8008dc2:	e002      	b.n	8008dca <_printf_i+0x1c6>
 8008dc4:	0668      	lsls	r0, r5, #25
 8008dc6:	d5fb      	bpl.n	8008dc0 <_printf_i+0x1bc>
 8008dc8:	8019      	strh	r1, [r3, #0]
 8008dca:	2300      	movs	r3, #0
 8008dcc:	6123      	str	r3, [r4, #16]
 8008dce:	4616      	mov	r6, r2
 8008dd0:	e7bc      	b.n	8008d4c <_printf_i+0x148>
 8008dd2:	6833      	ldr	r3, [r6, #0]
 8008dd4:	1d1a      	adds	r2, r3, #4
 8008dd6:	6032      	str	r2, [r6, #0]
 8008dd8:	681e      	ldr	r6, [r3, #0]
 8008dda:	6862      	ldr	r2, [r4, #4]
 8008ddc:	2100      	movs	r1, #0
 8008dde:	4630      	mov	r0, r6
 8008de0:	f7f7 fa2e 	bl	8000240 <memchr>
 8008de4:	b108      	cbz	r0, 8008dea <_printf_i+0x1e6>
 8008de6:	1b80      	subs	r0, r0, r6
 8008de8:	6060      	str	r0, [r4, #4]
 8008dea:	6863      	ldr	r3, [r4, #4]
 8008dec:	6123      	str	r3, [r4, #16]
 8008dee:	2300      	movs	r3, #0
 8008df0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008df4:	e7aa      	b.n	8008d4c <_printf_i+0x148>
 8008df6:	6923      	ldr	r3, [r4, #16]
 8008df8:	4632      	mov	r2, r6
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	47d0      	blx	sl
 8008e00:	3001      	adds	r0, #1
 8008e02:	d0ad      	beq.n	8008d60 <_printf_i+0x15c>
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	079b      	lsls	r3, r3, #30
 8008e08:	d413      	bmi.n	8008e32 <_printf_i+0x22e>
 8008e0a:	68e0      	ldr	r0, [r4, #12]
 8008e0c:	9b03      	ldr	r3, [sp, #12]
 8008e0e:	4298      	cmp	r0, r3
 8008e10:	bfb8      	it	lt
 8008e12:	4618      	movlt	r0, r3
 8008e14:	e7a6      	b.n	8008d64 <_printf_i+0x160>
 8008e16:	2301      	movs	r3, #1
 8008e18:	4632      	mov	r2, r6
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	4640      	mov	r0, r8
 8008e1e:	47d0      	blx	sl
 8008e20:	3001      	adds	r0, #1
 8008e22:	d09d      	beq.n	8008d60 <_printf_i+0x15c>
 8008e24:	3501      	adds	r5, #1
 8008e26:	68e3      	ldr	r3, [r4, #12]
 8008e28:	9903      	ldr	r1, [sp, #12]
 8008e2a:	1a5b      	subs	r3, r3, r1
 8008e2c:	42ab      	cmp	r3, r5
 8008e2e:	dcf2      	bgt.n	8008e16 <_printf_i+0x212>
 8008e30:	e7eb      	b.n	8008e0a <_printf_i+0x206>
 8008e32:	2500      	movs	r5, #0
 8008e34:	f104 0619 	add.w	r6, r4, #25
 8008e38:	e7f5      	b.n	8008e26 <_printf_i+0x222>
 8008e3a:	bf00      	nop
 8008e3c:	08009e66 	.word	0x08009e66
 8008e40:	08009e77 	.word	0x08009e77

08008e44 <__svfiscanf_r>:
 8008e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e48:	461d      	mov	r5, r3
 8008e4a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8008e4c:	07df      	lsls	r7, r3, #31
 8008e4e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008e52:	4606      	mov	r6, r0
 8008e54:	460c      	mov	r4, r1
 8008e56:	4691      	mov	r9, r2
 8008e58:	d405      	bmi.n	8008e66 <__svfiscanf_r+0x22>
 8008e5a:	898b      	ldrh	r3, [r1, #12]
 8008e5c:	0598      	lsls	r0, r3, #22
 8008e5e:	d402      	bmi.n	8008e66 <__svfiscanf_r+0x22>
 8008e60:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8008e62:	f7ff fc16 	bl	8008692 <__retarget_lock_acquire_recursive>
 8008e66:	2300      	movs	r3, #0
 8008e68:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8008e6c:	4ba7      	ldr	r3, [pc, #668]	@ (800910c <__svfiscanf_r+0x2c8>)
 8008e6e:	93a0      	str	r3, [sp, #640]	@ 0x280
 8008e70:	f10d 0804 	add.w	r8, sp, #4
 8008e74:	4ba6      	ldr	r3, [pc, #664]	@ (8009110 <__svfiscanf_r+0x2cc>)
 8008e76:	4fa7      	ldr	r7, [pc, #668]	@ (8009114 <__svfiscanf_r+0x2d0>)
 8008e78:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008e7c:	93a1      	str	r3, [sp, #644]	@ 0x284
 8008e7e:	9500      	str	r5, [sp, #0]
 8008e80:	f899 3000 	ldrb.w	r3, [r9]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f000 816c 	beq.w	8009162 <__svfiscanf_r+0x31e>
 8008e8a:	5cf9      	ldrb	r1, [r7, r3]
 8008e8c:	f011 0108 	ands.w	r1, r1, #8
 8008e90:	f109 0501 	add.w	r5, r9, #1
 8008e94:	d019      	beq.n	8008eca <__svfiscanf_r+0x86>
 8008e96:	6863      	ldr	r3, [r4, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	dd0f      	ble.n	8008ebc <__svfiscanf_r+0x78>
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	781a      	ldrb	r2, [r3, #0]
 8008ea0:	5cba      	ldrb	r2, [r7, r2]
 8008ea2:	0711      	lsls	r1, r2, #28
 8008ea4:	d401      	bmi.n	8008eaa <__svfiscanf_r+0x66>
 8008ea6:	46a9      	mov	r9, r5
 8008ea8:	e7ea      	b.n	8008e80 <__svfiscanf_r+0x3c>
 8008eaa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008eac:	3201      	adds	r2, #1
 8008eae:	9245      	str	r2, [sp, #276]	@ 0x114
 8008eb0:	6862      	ldr	r2, [r4, #4]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	3a01      	subs	r2, #1
 8008eb6:	6062      	str	r2, [r4, #4]
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	e7ec      	b.n	8008e96 <__svfiscanf_r+0x52>
 8008ebc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	4798      	blx	r3
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d0e9      	beq.n	8008e9c <__svfiscanf_r+0x58>
 8008ec8:	e7ed      	b.n	8008ea6 <__svfiscanf_r+0x62>
 8008eca:	2b25      	cmp	r3, #37	@ 0x25
 8008ecc:	d012      	beq.n	8008ef4 <__svfiscanf_r+0xb0>
 8008ece:	4699      	mov	r9, r3
 8008ed0:	6863      	ldr	r3, [r4, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f340 8095 	ble.w	8009002 <__svfiscanf_r+0x1be>
 8008ed8:	6822      	ldr	r2, [r4, #0]
 8008eda:	7813      	ldrb	r3, [r2, #0]
 8008edc:	454b      	cmp	r3, r9
 8008ede:	f040 8140 	bne.w	8009162 <__svfiscanf_r+0x31e>
 8008ee2:	6863      	ldr	r3, [r4, #4]
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	6063      	str	r3, [r4, #4]
 8008ee8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008eea:	3201      	adds	r2, #1
 8008eec:	3301      	adds	r3, #1
 8008eee:	6022      	str	r2, [r4, #0]
 8008ef0:	9345      	str	r3, [sp, #276]	@ 0x114
 8008ef2:	e7d8      	b.n	8008ea6 <__svfiscanf_r+0x62>
 8008ef4:	9141      	str	r1, [sp, #260]	@ 0x104
 8008ef6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008ef8:	f899 3001 	ldrb.w	r3, [r9, #1]
 8008efc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008efe:	bf02      	ittt	eq
 8008f00:	2310      	moveq	r3, #16
 8008f02:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008f04:	f109 0502 	addeq.w	r5, r9, #2
 8008f08:	220a      	movs	r2, #10
 8008f0a:	46a9      	mov	r9, r5
 8008f0c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008f10:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008f14:	2b09      	cmp	r3, #9
 8008f16:	d91f      	bls.n	8008f58 <__svfiscanf_r+0x114>
 8008f18:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 8009118 <__svfiscanf_r+0x2d4>
 8008f1c:	2203      	movs	r2, #3
 8008f1e:	4650      	mov	r0, sl
 8008f20:	f7f7 f98e 	bl	8000240 <memchr>
 8008f24:	b138      	cbz	r0, 8008f36 <__svfiscanf_r+0xf2>
 8008f26:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008f28:	eba0 000a 	sub.w	r0, r0, sl
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	4083      	lsls	r3, r0
 8008f30:	4313      	orrs	r3, r2
 8008f32:	9341      	str	r3, [sp, #260]	@ 0x104
 8008f34:	464d      	mov	r5, r9
 8008f36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008f3a:	2b78      	cmp	r3, #120	@ 0x78
 8008f3c:	d807      	bhi.n	8008f4e <__svfiscanf_r+0x10a>
 8008f3e:	2b57      	cmp	r3, #87	@ 0x57
 8008f40:	d811      	bhi.n	8008f66 <__svfiscanf_r+0x122>
 8008f42:	2b25      	cmp	r3, #37	@ 0x25
 8008f44:	d0c3      	beq.n	8008ece <__svfiscanf_r+0x8a>
 8008f46:	d857      	bhi.n	8008ff8 <__svfiscanf_r+0x1b4>
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 80c1 	beq.w	80090d0 <__svfiscanf_r+0x28c>
 8008f4e:	2303      	movs	r3, #3
 8008f50:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008f52:	230a      	movs	r3, #10
 8008f54:	9342      	str	r3, [sp, #264]	@ 0x108
 8008f56:	e07e      	b.n	8009056 <__svfiscanf_r+0x212>
 8008f58:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008f5a:	fb02 1103 	mla	r1, r2, r3, r1
 8008f5e:	3930      	subs	r1, #48	@ 0x30
 8008f60:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008f62:	464d      	mov	r5, r9
 8008f64:	e7d1      	b.n	8008f0a <__svfiscanf_r+0xc6>
 8008f66:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008f6a:	2a20      	cmp	r2, #32
 8008f6c:	d8ef      	bhi.n	8008f4e <__svfiscanf_r+0x10a>
 8008f6e:	a101      	add	r1, pc, #4	@ (adr r1, 8008f74 <__svfiscanf_r+0x130>)
 8008f70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008f74:	08009035 	.word	0x08009035
 8008f78:	08008f4f 	.word	0x08008f4f
 8008f7c:	08008f4f 	.word	0x08008f4f
 8008f80:	0800908f 	.word	0x0800908f
 8008f84:	08008f4f 	.word	0x08008f4f
 8008f88:	08008f4f 	.word	0x08008f4f
 8008f8c:	08008f4f 	.word	0x08008f4f
 8008f90:	08008f4f 	.word	0x08008f4f
 8008f94:	08008f4f 	.word	0x08008f4f
 8008f98:	08008f4f 	.word	0x08008f4f
 8008f9c:	08008f4f 	.word	0x08008f4f
 8008fa0:	080090a5 	.word	0x080090a5
 8008fa4:	0800908b 	.word	0x0800908b
 8008fa8:	08008fff 	.word	0x08008fff
 8008fac:	08008fff 	.word	0x08008fff
 8008fb0:	08008fff 	.word	0x08008fff
 8008fb4:	08008f4f 	.word	0x08008f4f
 8008fb8:	08009047 	.word	0x08009047
 8008fbc:	08008f4f 	.word	0x08008f4f
 8008fc0:	08008f4f 	.word	0x08008f4f
 8008fc4:	08008f4f 	.word	0x08008f4f
 8008fc8:	08008f4f 	.word	0x08008f4f
 8008fcc:	080090b5 	.word	0x080090b5
 8008fd0:	0800904f 	.word	0x0800904f
 8008fd4:	0800902d 	.word	0x0800902d
 8008fd8:	08008f4f 	.word	0x08008f4f
 8008fdc:	08008f4f 	.word	0x08008f4f
 8008fe0:	080090b1 	.word	0x080090b1
 8008fe4:	08008f4f 	.word	0x08008f4f
 8008fe8:	0800908b 	.word	0x0800908b
 8008fec:	08008f4f 	.word	0x08008f4f
 8008ff0:	08008f4f 	.word	0x08008f4f
 8008ff4:	08009035 	.word	0x08009035
 8008ff8:	3b45      	subs	r3, #69	@ 0x45
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d8a7      	bhi.n	8008f4e <__svfiscanf_r+0x10a>
 8008ffe:	2305      	movs	r3, #5
 8009000:	e028      	b.n	8009054 <__svfiscanf_r+0x210>
 8009002:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009004:	4621      	mov	r1, r4
 8009006:	4630      	mov	r0, r6
 8009008:	4798      	blx	r3
 800900a:	2800      	cmp	r0, #0
 800900c:	f43f af64 	beq.w	8008ed8 <__svfiscanf_r+0x94>
 8009010:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009012:	07da      	lsls	r2, r3, #31
 8009014:	f140 809d 	bpl.w	8009152 <__svfiscanf_r+0x30e>
 8009018:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800901a:	2800      	cmp	r0, #0
 800901c:	d061      	beq.n	80090e2 <__svfiscanf_r+0x29e>
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	0659      	lsls	r1, r3, #25
 8009022:	d45e      	bmi.n	80090e2 <__svfiscanf_r+0x29e>
 8009024:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8009028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800902e:	f042 0220 	orr.w	r2, r2, #32
 8009032:	9241      	str	r2, [sp, #260]	@ 0x104
 8009034:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800903a:	9241      	str	r2, [sp, #260]	@ 0x104
 800903c:	2210      	movs	r2, #16
 800903e:	2b6e      	cmp	r3, #110	@ 0x6e
 8009040:	9242      	str	r2, [sp, #264]	@ 0x108
 8009042:	d902      	bls.n	800904a <__svfiscanf_r+0x206>
 8009044:	e005      	b.n	8009052 <__svfiscanf_r+0x20e>
 8009046:	2300      	movs	r3, #0
 8009048:	9342      	str	r3, [sp, #264]	@ 0x108
 800904a:	2303      	movs	r3, #3
 800904c:	e002      	b.n	8009054 <__svfiscanf_r+0x210>
 800904e:	2308      	movs	r3, #8
 8009050:	9342      	str	r3, [sp, #264]	@ 0x108
 8009052:	2304      	movs	r3, #4
 8009054:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009056:	6863      	ldr	r3, [r4, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	dd45      	ble.n	80090e8 <__svfiscanf_r+0x2a4>
 800905c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800905e:	0659      	lsls	r1, r3, #25
 8009060:	d404      	bmi.n	800906c <__svfiscanf_r+0x228>
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	781a      	ldrb	r2, [r3, #0]
 8009066:	5cba      	ldrb	r2, [r7, r2]
 8009068:	0712      	lsls	r2, r2, #28
 800906a:	d444      	bmi.n	80090f6 <__svfiscanf_r+0x2b2>
 800906c:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800906e:	2b02      	cmp	r3, #2
 8009070:	dc5b      	bgt.n	800912a <__svfiscanf_r+0x2e6>
 8009072:	466b      	mov	r3, sp
 8009074:	4622      	mov	r2, r4
 8009076:	a941      	add	r1, sp, #260	@ 0x104
 8009078:	4630      	mov	r0, r6
 800907a:	f000 f893 	bl	80091a4 <_scanf_chars>
 800907e:	2801      	cmp	r0, #1
 8009080:	d06f      	beq.n	8009162 <__svfiscanf_r+0x31e>
 8009082:	2802      	cmp	r0, #2
 8009084:	f47f af0f 	bne.w	8008ea6 <__svfiscanf_r+0x62>
 8009088:	e7c2      	b.n	8009010 <__svfiscanf_r+0x1cc>
 800908a:	220a      	movs	r2, #10
 800908c:	e7d7      	b.n	800903e <__svfiscanf_r+0x1fa>
 800908e:	4629      	mov	r1, r5
 8009090:	4640      	mov	r0, r8
 8009092:	f000 fab9 	bl	8009608 <__sccl>
 8009096:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800909c:	9341      	str	r3, [sp, #260]	@ 0x104
 800909e:	4605      	mov	r5, r0
 80090a0:	2301      	movs	r3, #1
 80090a2:	e7d7      	b.n	8009054 <__svfiscanf_r+0x210>
 80090a4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80090a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090aa:	9341      	str	r3, [sp, #260]	@ 0x104
 80090ac:	2300      	movs	r3, #0
 80090ae:	e7d1      	b.n	8009054 <__svfiscanf_r+0x210>
 80090b0:	2302      	movs	r3, #2
 80090b2:	e7cf      	b.n	8009054 <__svfiscanf_r+0x210>
 80090b4:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80090b6:	06c3      	lsls	r3, r0, #27
 80090b8:	f53f aef5 	bmi.w	8008ea6 <__svfiscanf_r+0x62>
 80090bc:	9b00      	ldr	r3, [sp, #0]
 80090be:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80090c0:	1d19      	adds	r1, r3, #4
 80090c2:	9100      	str	r1, [sp, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	07c0      	lsls	r0, r0, #31
 80090c8:	bf4c      	ite	mi
 80090ca:	801a      	strhmi	r2, [r3, #0]
 80090cc:	601a      	strpl	r2, [r3, #0]
 80090ce:	e6ea      	b.n	8008ea6 <__svfiscanf_r+0x62>
 80090d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090d2:	07de      	lsls	r6, r3, #31
 80090d4:	d405      	bmi.n	80090e2 <__svfiscanf_r+0x29e>
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	059d      	lsls	r5, r3, #22
 80090da:	d402      	bmi.n	80090e2 <__svfiscanf_r+0x29e>
 80090dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090de:	f7ff fad9 	bl	8008694 <__retarget_lock_release_recursive>
 80090e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090e6:	e79d      	b.n	8009024 <__svfiscanf_r+0x1e0>
 80090e8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80090ea:	4621      	mov	r1, r4
 80090ec:	4630      	mov	r0, r6
 80090ee:	4798      	blx	r3
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d0b3      	beq.n	800905c <__svfiscanf_r+0x218>
 80090f4:	e78c      	b.n	8009010 <__svfiscanf_r+0x1cc>
 80090f6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80090f8:	3201      	adds	r2, #1
 80090fa:	9245      	str	r2, [sp, #276]	@ 0x114
 80090fc:	6862      	ldr	r2, [r4, #4]
 80090fe:	3a01      	subs	r2, #1
 8009100:	2a00      	cmp	r2, #0
 8009102:	6062      	str	r2, [r4, #4]
 8009104:	dd0a      	ble.n	800911c <__svfiscanf_r+0x2d8>
 8009106:	3301      	adds	r3, #1
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	e7aa      	b.n	8009062 <__svfiscanf_r+0x21e>
 800910c:	080096ef 	.word	0x080096ef
 8009110:	08009521 	.word	0x08009521
 8009114:	08009d55 	.word	0x08009d55
 8009118:	08009e5b 	.word	0x08009e5b
 800911c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800911e:	4621      	mov	r1, r4
 8009120:	4630      	mov	r0, r6
 8009122:	4798      	blx	r3
 8009124:	2800      	cmp	r0, #0
 8009126:	d09c      	beq.n	8009062 <__svfiscanf_r+0x21e>
 8009128:	e772      	b.n	8009010 <__svfiscanf_r+0x1cc>
 800912a:	2b04      	cmp	r3, #4
 800912c:	dc06      	bgt.n	800913c <__svfiscanf_r+0x2f8>
 800912e:	466b      	mov	r3, sp
 8009130:	4622      	mov	r2, r4
 8009132:	a941      	add	r1, sp, #260	@ 0x104
 8009134:	4630      	mov	r0, r6
 8009136:	f000 f88f 	bl	8009258 <_scanf_i>
 800913a:	e7a0      	b.n	800907e <__svfiscanf_r+0x23a>
 800913c:	4b0e      	ldr	r3, [pc, #56]	@ (8009178 <__svfiscanf_r+0x334>)
 800913e:	2b00      	cmp	r3, #0
 8009140:	f43f aeb1 	beq.w	8008ea6 <__svfiscanf_r+0x62>
 8009144:	466b      	mov	r3, sp
 8009146:	4622      	mov	r2, r4
 8009148:	a941      	add	r1, sp, #260	@ 0x104
 800914a:	4630      	mov	r0, r6
 800914c:	f3af 8000 	nop.w
 8009150:	e795      	b.n	800907e <__svfiscanf_r+0x23a>
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	0598      	lsls	r0, r3, #22
 8009156:	f53f af5f 	bmi.w	8009018 <__svfiscanf_r+0x1d4>
 800915a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800915c:	f7ff fa9a 	bl	8008694 <__retarget_lock_release_recursive>
 8009160:	e75a      	b.n	8009018 <__svfiscanf_r+0x1d4>
 8009162:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009164:	07da      	lsls	r2, r3, #31
 8009166:	d405      	bmi.n	8009174 <__svfiscanf_r+0x330>
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	059b      	lsls	r3, r3, #22
 800916c:	d402      	bmi.n	8009174 <__svfiscanf_r+0x330>
 800916e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009170:	f7ff fa90 	bl	8008694 <__retarget_lock_release_recursive>
 8009174:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009176:	e755      	b.n	8009024 <__svfiscanf_r+0x1e0>
 8009178:	00000000 	.word	0x00000000

0800917c <_vfiscanf_r>:
 800917c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009180:	460d      	mov	r5, r1
 8009182:	4616      	mov	r6, r2
 8009184:	461f      	mov	r7, r3
 8009186:	4604      	mov	r4, r0
 8009188:	b118      	cbz	r0, 8009192 <_vfiscanf_r+0x16>
 800918a:	6a03      	ldr	r3, [r0, #32]
 800918c:	b90b      	cbnz	r3, 8009192 <_vfiscanf_r+0x16>
 800918e:	f7ff f877 	bl	8008280 <__sinit>
 8009192:	463b      	mov	r3, r7
 8009194:	4632      	mov	r2, r6
 8009196:	4629      	mov	r1, r5
 8009198:	4620      	mov	r0, r4
 800919a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800919e:	f7ff be51 	b.w	8008e44 <__svfiscanf_r>
	...

080091a4 <_scanf_chars>:
 80091a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091a8:	4615      	mov	r5, r2
 80091aa:	688a      	ldr	r2, [r1, #8]
 80091ac:	4680      	mov	r8, r0
 80091ae:	460c      	mov	r4, r1
 80091b0:	b932      	cbnz	r2, 80091c0 <_scanf_chars+0x1c>
 80091b2:	698a      	ldr	r2, [r1, #24]
 80091b4:	2a00      	cmp	r2, #0
 80091b6:	bf14      	ite	ne
 80091b8:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80091bc:	2201      	moveq	r2, #1
 80091be:	608a      	str	r2, [r1, #8]
 80091c0:	6822      	ldr	r2, [r4, #0]
 80091c2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009254 <_scanf_chars+0xb0>
 80091c6:	06d1      	lsls	r1, r2, #27
 80091c8:	bf5f      	itttt	pl
 80091ca:	681a      	ldrpl	r2, [r3, #0]
 80091cc:	1d11      	addpl	r1, r2, #4
 80091ce:	6019      	strpl	r1, [r3, #0]
 80091d0:	6816      	ldrpl	r6, [r2, #0]
 80091d2:	2700      	movs	r7, #0
 80091d4:	69a0      	ldr	r0, [r4, #24]
 80091d6:	b188      	cbz	r0, 80091fc <_scanf_chars+0x58>
 80091d8:	2801      	cmp	r0, #1
 80091da:	d107      	bne.n	80091ec <_scanf_chars+0x48>
 80091dc:	682b      	ldr	r3, [r5, #0]
 80091de:	781a      	ldrb	r2, [r3, #0]
 80091e0:	6963      	ldr	r3, [r4, #20]
 80091e2:	5c9b      	ldrb	r3, [r3, r2]
 80091e4:	b953      	cbnz	r3, 80091fc <_scanf_chars+0x58>
 80091e6:	2f00      	cmp	r7, #0
 80091e8:	d031      	beq.n	800924e <_scanf_chars+0xaa>
 80091ea:	e022      	b.n	8009232 <_scanf_chars+0x8e>
 80091ec:	2802      	cmp	r0, #2
 80091ee:	d120      	bne.n	8009232 <_scanf_chars+0x8e>
 80091f0:	682b      	ldr	r3, [r5, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80091f8:	071b      	lsls	r3, r3, #28
 80091fa:	d41a      	bmi.n	8009232 <_scanf_chars+0x8e>
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	06da      	lsls	r2, r3, #27
 8009200:	bf5e      	ittt	pl
 8009202:	682b      	ldrpl	r3, [r5, #0]
 8009204:	781b      	ldrbpl	r3, [r3, #0]
 8009206:	f806 3b01 	strbpl.w	r3, [r6], #1
 800920a:	682a      	ldr	r2, [r5, #0]
 800920c:	686b      	ldr	r3, [r5, #4]
 800920e:	3201      	adds	r2, #1
 8009210:	602a      	str	r2, [r5, #0]
 8009212:	68a2      	ldr	r2, [r4, #8]
 8009214:	3b01      	subs	r3, #1
 8009216:	3a01      	subs	r2, #1
 8009218:	606b      	str	r3, [r5, #4]
 800921a:	3701      	adds	r7, #1
 800921c:	60a2      	str	r2, [r4, #8]
 800921e:	b142      	cbz	r2, 8009232 <_scanf_chars+0x8e>
 8009220:	2b00      	cmp	r3, #0
 8009222:	dcd7      	bgt.n	80091d4 <_scanf_chars+0x30>
 8009224:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009228:	4629      	mov	r1, r5
 800922a:	4640      	mov	r0, r8
 800922c:	4798      	blx	r3
 800922e:	2800      	cmp	r0, #0
 8009230:	d0d0      	beq.n	80091d4 <_scanf_chars+0x30>
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	f013 0310 	ands.w	r3, r3, #16
 8009238:	d105      	bne.n	8009246 <_scanf_chars+0xa2>
 800923a:	68e2      	ldr	r2, [r4, #12]
 800923c:	3201      	adds	r2, #1
 800923e:	60e2      	str	r2, [r4, #12]
 8009240:	69a2      	ldr	r2, [r4, #24]
 8009242:	b102      	cbz	r2, 8009246 <_scanf_chars+0xa2>
 8009244:	7033      	strb	r3, [r6, #0]
 8009246:	6923      	ldr	r3, [r4, #16]
 8009248:	443b      	add	r3, r7
 800924a:	6123      	str	r3, [r4, #16]
 800924c:	2000      	movs	r0, #0
 800924e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009252:	bf00      	nop
 8009254:	08009d55 	.word	0x08009d55

08009258 <_scanf_i>:
 8009258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	4698      	mov	r8, r3
 800925e:	4b74      	ldr	r3, [pc, #464]	@ (8009430 <_scanf_i+0x1d8>)
 8009260:	460c      	mov	r4, r1
 8009262:	4682      	mov	sl, r0
 8009264:	4616      	mov	r6, r2
 8009266:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800926a:	b087      	sub	sp, #28
 800926c:	ab03      	add	r3, sp, #12
 800926e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009272:	4b70      	ldr	r3, [pc, #448]	@ (8009434 <_scanf_i+0x1dc>)
 8009274:	69a1      	ldr	r1, [r4, #24]
 8009276:	4a70      	ldr	r2, [pc, #448]	@ (8009438 <_scanf_i+0x1e0>)
 8009278:	2903      	cmp	r1, #3
 800927a:	bf08      	it	eq
 800927c:	461a      	moveq	r2, r3
 800927e:	68a3      	ldr	r3, [r4, #8]
 8009280:	9201      	str	r2, [sp, #4]
 8009282:	1e5a      	subs	r2, r3, #1
 8009284:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009288:	bf88      	it	hi
 800928a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800928e:	4627      	mov	r7, r4
 8009290:	bf82      	ittt	hi
 8009292:	eb03 0905 	addhi.w	r9, r3, r5
 8009296:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800929a:	60a3      	strhi	r3, [r4, #8]
 800929c:	f857 3b1c 	ldr.w	r3, [r7], #28
 80092a0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80092a4:	bf98      	it	ls
 80092a6:	f04f 0900 	movls.w	r9, #0
 80092aa:	6023      	str	r3, [r4, #0]
 80092ac:	463d      	mov	r5, r7
 80092ae:	f04f 0b00 	mov.w	fp, #0
 80092b2:	6831      	ldr	r1, [r6, #0]
 80092b4:	ab03      	add	r3, sp, #12
 80092b6:	7809      	ldrb	r1, [r1, #0]
 80092b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80092bc:	2202      	movs	r2, #2
 80092be:	f7f6 ffbf 	bl	8000240 <memchr>
 80092c2:	b328      	cbz	r0, 8009310 <_scanf_i+0xb8>
 80092c4:	f1bb 0f01 	cmp.w	fp, #1
 80092c8:	d159      	bne.n	800937e <_scanf_i+0x126>
 80092ca:	6862      	ldr	r2, [r4, #4]
 80092cc:	b92a      	cbnz	r2, 80092da <_scanf_i+0x82>
 80092ce:	6822      	ldr	r2, [r4, #0]
 80092d0:	2108      	movs	r1, #8
 80092d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092d6:	6061      	str	r1, [r4, #4]
 80092d8:	6022      	str	r2, [r4, #0]
 80092da:	6822      	ldr	r2, [r4, #0]
 80092dc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80092e0:	6022      	str	r2, [r4, #0]
 80092e2:	68a2      	ldr	r2, [r4, #8]
 80092e4:	1e51      	subs	r1, r2, #1
 80092e6:	60a1      	str	r1, [r4, #8]
 80092e8:	b192      	cbz	r2, 8009310 <_scanf_i+0xb8>
 80092ea:	6832      	ldr	r2, [r6, #0]
 80092ec:	1c51      	adds	r1, r2, #1
 80092ee:	6031      	str	r1, [r6, #0]
 80092f0:	7812      	ldrb	r2, [r2, #0]
 80092f2:	f805 2b01 	strb.w	r2, [r5], #1
 80092f6:	6872      	ldr	r2, [r6, #4]
 80092f8:	3a01      	subs	r2, #1
 80092fa:	2a00      	cmp	r2, #0
 80092fc:	6072      	str	r2, [r6, #4]
 80092fe:	dc07      	bgt.n	8009310 <_scanf_i+0xb8>
 8009300:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009304:	4631      	mov	r1, r6
 8009306:	4650      	mov	r0, sl
 8009308:	4790      	blx	r2
 800930a:	2800      	cmp	r0, #0
 800930c:	f040 8085 	bne.w	800941a <_scanf_i+0x1c2>
 8009310:	f10b 0b01 	add.w	fp, fp, #1
 8009314:	f1bb 0f03 	cmp.w	fp, #3
 8009318:	d1cb      	bne.n	80092b2 <_scanf_i+0x5a>
 800931a:	6863      	ldr	r3, [r4, #4]
 800931c:	b90b      	cbnz	r3, 8009322 <_scanf_i+0xca>
 800931e:	230a      	movs	r3, #10
 8009320:	6063      	str	r3, [r4, #4]
 8009322:	6863      	ldr	r3, [r4, #4]
 8009324:	4945      	ldr	r1, [pc, #276]	@ (800943c <_scanf_i+0x1e4>)
 8009326:	6960      	ldr	r0, [r4, #20]
 8009328:	1ac9      	subs	r1, r1, r3
 800932a:	f000 f96d 	bl	8009608 <__sccl>
 800932e:	f04f 0b00 	mov.w	fp, #0
 8009332:	68a3      	ldr	r3, [r4, #8]
 8009334:	6822      	ldr	r2, [r4, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d03d      	beq.n	80093b6 <_scanf_i+0x15e>
 800933a:	6831      	ldr	r1, [r6, #0]
 800933c:	6960      	ldr	r0, [r4, #20]
 800933e:	f891 c000 	ldrb.w	ip, [r1]
 8009342:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009346:	2800      	cmp	r0, #0
 8009348:	d035      	beq.n	80093b6 <_scanf_i+0x15e>
 800934a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800934e:	d124      	bne.n	800939a <_scanf_i+0x142>
 8009350:	0510      	lsls	r0, r2, #20
 8009352:	d522      	bpl.n	800939a <_scanf_i+0x142>
 8009354:	f10b 0b01 	add.w	fp, fp, #1
 8009358:	f1b9 0f00 	cmp.w	r9, #0
 800935c:	d003      	beq.n	8009366 <_scanf_i+0x10e>
 800935e:	3301      	adds	r3, #1
 8009360:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8009364:	60a3      	str	r3, [r4, #8]
 8009366:	6873      	ldr	r3, [r6, #4]
 8009368:	3b01      	subs	r3, #1
 800936a:	2b00      	cmp	r3, #0
 800936c:	6073      	str	r3, [r6, #4]
 800936e:	dd1b      	ble.n	80093a8 <_scanf_i+0x150>
 8009370:	6833      	ldr	r3, [r6, #0]
 8009372:	3301      	adds	r3, #1
 8009374:	6033      	str	r3, [r6, #0]
 8009376:	68a3      	ldr	r3, [r4, #8]
 8009378:	3b01      	subs	r3, #1
 800937a:	60a3      	str	r3, [r4, #8]
 800937c:	e7d9      	b.n	8009332 <_scanf_i+0xda>
 800937e:	f1bb 0f02 	cmp.w	fp, #2
 8009382:	d1ae      	bne.n	80092e2 <_scanf_i+0x8a>
 8009384:	6822      	ldr	r2, [r4, #0]
 8009386:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800938a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800938e:	d1bf      	bne.n	8009310 <_scanf_i+0xb8>
 8009390:	2110      	movs	r1, #16
 8009392:	6061      	str	r1, [r4, #4]
 8009394:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009398:	e7a2      	b.n	80092e0 <_scanf_i+0x88>
 800939a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800939e:	6022      	str	r2, [r4, #0]
 80093a0:	780b      	ldrb	r3, [r1, #0]
 80093a2:	f805 3b01 	strb.w	r3, [r5], #1
 80093a6:	e7de      	b.n	8009366 <_scanf_i+0x10e>
 80093a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80093ac:	4631      	mov	r1, r6
 80093ae:	4650      	mov	r0, sl
 80093b0:	4798      	blx	r3
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d0df      	beq.n	8009376 <_scanf_i+0x11e>
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	05d9      	lsls	r1, r3, #23
 80093ba:	d50d      	bpl.n	80093d8 <_scanf_i+0x180>
 80093bc:	42bd      	cmp	r5, r7
 80093be:	d909      	bls.n	80093d4 <_scanf_i+0x17c>
 80093c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80093c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093c8:	4632      	mov	r2, r6
 80093ca:	4650      	mov	r0, sl
 80093cc:	4798      	blx	r3
 80093ce:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80093d2:	464d      	mov	r5, r9
 80093d4:	42bd      	cmp	r5, r7
 80093d6:	d028      	beq.n	800942a <_scanf_i+0x1d2>
 80093d8:	6822      	ldr	r2, [r4, #0]
 80093da:	f012 0210 	ands.w	r2, r2, #16
 80093de:	d113      	bne.n	8009408 <_scanf_i+0x1b0>
 80093e0:	702a      	strb	r2, [r5, #0]
 80093e2:	6863      	ldr	r3, [r4, #4]
 80093e4:	9e01      	ldr	r6, [sp, #4]
 80093e6:	4639      	mov	r1, r7
 80093e8:	4650      	mov	r0, sl
 80093ea:	47b0      	blx	r6
 80093ec:	f8d8 3000 	ldr.w	r3, [r8]
 80093f0:	6821      	ldr	r1, [r4, #0]
 80093f2:	1d1a      	adds	r2, r3, #4
 80093f4:	f8c8 2000 	str.w	r2, [r8]
 80093f8:	f011 0f20 	tst.w	r1, #32
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	d00f      	beq.n	8009420 <_scanf_i+0x1c8>
 8009400:	6018      	str	r0, [r3, #0]
 8009402:	68e3      	ldr	r3, [r4, #12]
 8009404:	3301      	adds	r3, #1
 8009406:	60e3      	str	r3, [r4, #12]
 8009408:	6923      	ldr	r3, [r4, #16]
 800940a:	1bed      	subs	r5, r5, r7
 800940c:	445d      	add	r5, fp
 800940e:	442b      	add	r3, r5
 8009410:	6123      	str	r3, [r4, #16]
 8009412:	2000      	movs	r0, #0
 8009414:	b007      	add	sp, #28
 8009416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941a:	f04f 0b00 	mov.w	fp, #0
 800941e:	e7ca      	b.n	80093b6 <_scanf_i+0x15e>
 8009420:	07ca      	lsls	r2, r1, #31
 8009422:	bf4c      	ite	mi
 8009424:	8018      	strhmi	r0, [r3, #0]
 8009426:	6018      	strpl	r0, [r3, #0]
 8009428:	e7eb      	b.n	8009402 <_scanf_i+0x1aa>
 800942a:	2001      	movs	r0, #1
 800942c:	e7f2      	b.n	8009414 <_scanf_i+0x1bc>
 800942e:	bf00      	nop
 8009430:	08009d04 	.word	0x08009d04
 8009434:	08007fd1 	.word	0x08007fd1
 8009438:	08009989 	.word	0x08009989
 800943c:	08009e98 	.word	0x08009e98

08009440 <__swhatbuf_r>:
 8009440:	b570      	push	{r4, r5, r6, lr}
 8009442:	460c      	mov	r4, r1
 8009444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009448:	2900      	cmp	r1, #0
 800944a:	b096      	sub	sp, #88	@ 0x58
 800944c:	4615      	mov	r5, r2
 800944e:	461e      	mov	r6, r3
 8009450:	da0d      	bge.n	800946e <__swhatbuf_r+0x2e>
 8009452:	89a3      	ldrh	r3, [r4, #12]
 8009454:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009458:	f04f 0100 	mov.w	r1, #0
 800945c:	bf14      	ite	ne
 800945e:	2340      	movne	r3, #64	@ 0x40
 8009460:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009464:	2000      	movs	r0, #0
 8009466:	6031      	str	r1, [r6, #0]
 8009468:	602b      	str	r3, [r5, #0]
 800946a:	b016      	add	sp, #88	@ 0x58
 800946c:	bd70      	pop	{r4, r5, r6, pc}
 800946e:	466a      	mov	r2, sp
 8009470:	f000 f9bc 	bl	80097ec <_fstat_r>
 8009474:	2800      	cmp	r0, #0
 8009476:	dbec      	blt.n	8009452 <__swhatbuf_r+0x12>
 8009478:	9901      	ldr	r1, [sp, #4]
 800947a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800947e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009482:	4259      	negs	r1, r3
 8009484:	4159      	adcs	r1, r3
 8009486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800948a:	e7eb      	b.n	8009464 <__swhatbuf_r+0x24>

0800948c <__smakebuf_r>:
 800948c:	898b      	ldrh	r3, [r1, #12]
 800948e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009490:	079d      	lsls	r5, r3, #30
 8009492:	4606      	mov	r6, r0
 8009494:	460c      	mov	r4, r1
 8009496:	d507      	bpl.n	80094a8 <__smakebuf_r+0x1c>
 8009498:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	6123      	str	r3, [r4, #16]
 80094a0:	2301      	movs	r3, #1
 80094a2:	6163      	str	r3, [r4, #20]
 80094a4:	b003      	add	sp, #12
 80094a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094a8:	ab01      	add	r3, sp, #4
 80094aa:	466a      	mov	r2, sp
 80094ac:	f7ff ffc8 	bl	8009440 <__swhatbuf_r>
 80094b0:	9f00      	ldr	r7, [sp, #0]
 80094b2:	4605      	mov	r5, r0
 80094b4:	4639      	mov	r1, r7
 80094b6:	4630      	mov	r0, r6
 80094b8:	f7ff f968 	bl	800878c <_malloc_r>
 80094bc:	b948      	cbnz	r0, 80094d2 <__smakebuf_r+0x46>
 80094be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094c2:	059a      	lsls	r2, r3, #22
 80094c4:	d4ee      	bmi.n	80094a4 <__smakebuf_r+0x18>
 80094c6:	f023 0303 	bic.w	r3, r3, #3
 80094ca:	f043 0302 	orr.w	r3, r3, #2
 80094ce:	81a3      	strh	r3, [r4, #12]
 80094d0:	e7e2      	b.n	8009498 <__smakebuf_r+0xc>
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	6020      	str	r0, [r4, #0]
 80094d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094da:	81a3      	strh	r3, [r4, #12]
 80094dc:	9b01      	ldr	r3, [sp, #4]
 80094de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80094e2:	b15b      	cbz	r3, 80094fc <__smakebuf_r+0x70>
 80094e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094e8:	4630      	mov	r0, r6
 80094ea:	f000 f991 	bl	8009810 <_isatty_r>
 80094ee:	b128      	cbz	r0, 80094fc <__smakebuf_r+0x70>
 80094f0:	89a3      	ldrh	r3, [r4, #12]
 80094f2:	f023 0303 	bic.w	r3, r3, #3
 80094f6:	f043 0301 	orr.w	r3, r3, #1
 80094fa:	81a3      	strh	r3, [r4, #12]
 80094fc:	89a3      	ldrh	r3, [r4, #12]
 80094fe:	431d      	orrs	r5, r3
 8009500:	81a5      	strh	r5, [r4, #12]
 8009502:	e7cf      	b.n	80094a4 <__smakebuf_r+0x18>

08009504 <lflush>:
 8009504:	898b      	ldrh	r3, [r1, #12]
 8009506:	f003 0309 	and.w	r3, r3, #9
 800950a:	2b09      	cmp	r3, #9
 800950c:	d103      	bne.n	8009516 <lflush+0x12>
 800950e:	4b03      	ldr	r3, [pc, #12]	@ (800951c <lflush+0x18>)
 8009510:	6818      	ldr	r0, [r3, #0]
 8009512:	f7fe bded 	b.w	80080f0 <_fflush_r>
 8009516:	2000      	movs	r0, #0
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	2000001c 	.word	0x2000001c

08009520 <__srefill_r>:
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	460c      	mov	r4, r1
 8009524:	4605      	mov	r5, r0
 8009526:	b118      	cbz	r0, 8009530 <__srefill_r+0x10>
 8009528:	6a03      	ldr	r3, [r0, #32]
 800952a:	b90b      	cbnz	r3, 8009530 <__srefill_r+0x10>
 800952c:	f7fe fea8 	bl	8008280 <__sinit>
 8009530:	2300      	movs	r3, #0
 8009532:	6063      	str	r3, [r4, #4]
 8009534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009538:	069e      	lsls	r6, r3, #26
 800953a:	d408      	bmi.n	800954e <__srefill_r+0x2e>
 800953c:	0758      	lsls	r0, r3, #29
 800953e:	d445      	bmi.n	80095cc <__srefill_r+0xac>
 8009540:	06d9      	lsls	r1, r3, #27
 8009542:	d407      	bmi.n	8009554 <__srefill_r+0x34>
 8009544:	2209      	movs	r2, #9
 8009546:	602a      	str	r2, [r5, #0]
 8009548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800954c:	81a3      	strh	r3, [r4, #12]
 800954e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009552:	bd70      	pop	{r4, r5, r6, pc}
 8009554:	071a      	lsls	r2, r3, #28
 8009556:	d50b      	bpl.n	8009570 <__srefill_r+0x50>
 8009558:	4621      	mov	r1, r4
 800955a:	4628      	mov	r0, r5
 800955c:	f7fe fdc8 	bl	80080f0 <_fflush_r>
 8009560:	2800      	cmp	r0, #0
 8009562:	d1f4      	bne.n	800954e <__srefill_r+0x2e>
 8009564:	89a3      	ldrh	r3, [r4, #12]
 8009566:	60a0      	str	r0, [r4, #8]
 8009568:	f023 0308 	bic.w	r3, r3, #8
 800956c:	81a3      	strh	r3, [r4, #12]
 800956e:	61a0      	str	r0, [r4, #24]
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	f043 0304 	orr.w	r3, r3, #4
 8009576:	81a3      	strh	r3, [r4, #12]
 8009578:	6923      	ldr	r3, [r4, #16]
 800957a:	b91b      	cbnz	r3, 8009584 <__srefill_r+0x64>
 800957c:	4621      	mov	r1, r4
 800957e:	4628      	mov	r0, r5
 8009580:	f7ff ff84 	bl	800948c <__smakebuf_r>
 8009584:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8009588:	07b3      	lsls	r3, r6, #30
 800958a:	d00f      	beq.n	80095ac <__srefill_r+0x8c>
 800958c:	2301      	movs	r3, #1
 800958e:	4a1b      	ldr	r2, [pc, #108]	@ (80095fc <__srefill_r+0xdc>)
 8009590:	491b      	ldr	r1, [pc, #108]	@ (8009600 <__srefill_r+0xe0>)
 8009592:	481c      	ldr	r0, [pc, #112]	@ (8009604 <__srefill_r+0xe4>)
 8009594:	81a3      	strh	r3, [r4, #12]
 8009596:	f7fe fe8b 	bl	80082b0 <_fwalk_sglue>
 800959a:	81a6      	strh	r6, [r4, #12]
 800959c:	f006 0609 	and.w	r6, r6, #9
 80095a0:	2e09      	cmp	r6, #9
 80095a2:	d103      	bne.n	80095ac <__srefill_r+0x8c>
 80095a4:	4621      	mov	r1, r4
 80095a6:	4628      	mov	r0, r5
 80095a8:	f7fe fd1e 	bl	8007fe8 <__sflush_r>
 80095ac:	6922      	ldr	r2, [r4, #16]
 80095ae:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80095b0:	6963      	ldr	r3, [r4, #20]
 80095b2:	6a21      	ldr	r1, [r4, #32]
 80095b4:	6022      	str	r2, [r4, #0]
 80095b6:	4628      	mov	r0, r5
 80095b8:	47b0      	blx	r6
 80095ba:	2800      	cmp	r0, #0
 80095bc:	6060      	str	r0, [r4, #4]
 80095be:	dc17      	bgt.n	80095f0 <__srefill_r+0xd0>
 80095c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095c4:	d116      	bne.n	80095f4 <__srefill_r+0xd4>
 80095c6:	f043 0320 	orr.w	r3, r3, #32
 80095ca:	e7bf      	b.n	800954c <__srefill_r+0x2c>
 80095cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095ce:	2900      	cmp	r1, #0
 80095d0:	d0d2      	beq.n	8009578 <__srefill_r+0x58>
 80095d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095d6:	4299      	cmp	r1, r3
 80095d8:	d002      	beq.n	80095e0 <__srefill_r+0xc0>
 80095da:	4628      	mov	r0, r5
 80095dc:	f7ff f86a 	bl	80086b4 <_free_r>
 80095e0:	2300      	movs	r3, #0
 80095e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80095e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80095e6:	6063      	str	r3, [r4, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d0c5      	beq.n	8009578 <__srefill_r+0x58>
 80095ec:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	2000      	movs	r0, #0
 80095f2:	e7ae      	b.n	8009552 <__srefill_r+0x32>
 80095f4:	2200      	movs	r2, #0
 80095f6:	6062      	str	r2, [r4, #4]
 80095f8:	e7a6      	b.n	8009548 <__srefill_r+0x28>
 80095fa:	bf00      	nop
 80095fc:	20000010 	.word	0x20000010
 8009600:	08009505 	.word	0x08009505
 8009604:	20000020 	.word	0x20000020

08009608 <__sccl>:
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	780b      	ldrb	r3, [r1, #0]
 800960c:	4604      	mov	r4, r0
 800960e:	2b5e      	cmp	r3, #94	@ 0x5e
 8009610:	bf0b      	itete	eq
 8009612:	784b      	ldrbeq	r3, [r1, #1]
 8009614:	1c4a      	addne	r2, r1, #1
 8009616:	1c8a      	addeq	r2, r1, #2
 8009618:	2100      	movne	r1, #0
 800961a:	bf08      	it	eq
 800961c:	2101      	moveq	r1, #1
 800961e:	3801      	subs	r0, #1
 8009620:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009624:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009628:	42a8      	cmp	r0, r5
 800962a:	d1fb      	bne.n	8009624 <__sccl+0x1c>
 800962c:	b90b      	cbnz	r3, 8009632 <__sccl+0x2a>
 800962e:	1e50      	subs	r0, r2, #1
 8009630:	bd70      	pop	{r4, r5, r6, pc}
 8009632:	f081 0101 	eor.w	r1, r1, #1
 8009636:	54e1      	strb	r1, [r4, r3]
 8009638:	4610      	mov	r0, r2
 800963a:	4602      	mov	r2, r0
 800963c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009640:	2d2d      	cmp	r5, #45	@ 0x2d
 8009642:	d005      	beq.n	8009650 <__sccl+0x48>
 8009644:	2d5d      	cmp	r5, #93	@ 0x5d
 8009646:	d016      	beq.n	8009676 <__sccl+0x6e>
 8009648:	2d00      	cmp	r5, #0
 800964a:	d0f1      	beq.n	8009630 <__sccl+0x28>
 800964c:	462b      	mov	r3, r5
 800964e:	e7f2      	b.n	8009636 <__sccl+0x2e>
 8009650:	7846      	ldrb	r6, [r0, #1]
 8009652:	2e5d      	cmp	r6, #93	@ 0x5d
 8009654:	d0fa      	beq.n	800964c <__sccl+0x44>
 8009656:	42b3      	cmp	r3, r6
 8009658:	dcf8      	bgt.n	800964c <__sccl+0x44>
 800965a:	3002      	adds	r0, #2
 800965c:	461a      	mov	r2, r3
 800965e:	3201      	adds	r2, #1
 8009660:	4296      	cmp	r6, r2
 8009662:	54a1      	strb	r1, [r4, r2]
 8009664:	dcfb      	bgt.n	800965e <__sccl+0x56>
 8009666:	1af2      	subs	r2, r6, r3
 8009668:	3a01      	subs	r2, #1
 800966a:	1c5d      	adds	r5, r3, #1
 800966c:	42b3      	cmp	r3, r6
 800966e:	bfa8      	it	ge
 8009670:	2200      	movge	r2, #0
 8009672:	18ab      	adds	r3, r5, r2
 8009674:	e7e1      	b.n	800963a <__sccl+0x32>
 8009676:	4610      	mov	r0, r2
 8009678:	e7da      	b.n	8009630 <__sccl+0x28>

0800967a <__submore>:
 800967a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967e:	460c      	mov	r4, r1
 8009680:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009682:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009686:	4299      	cmp	r1, r3
 8009688:	d11d      	bne.n	80096c6 <__submore+0x4c>
 800968a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800968e:	f7ff f87d 	bl	800878c <_malloc_r>
 8009692:	b918      	cbnz	r0, 800969c <__submore+0x22>
 8009694:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800969c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096a0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80096a2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80096a6:	6360      	str	r0, [r4, #52]	@ 0x34
 80096a8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80096ac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80096b0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80096b4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80096b8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80096bc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80096c0:	6020      	str	r0, [r4, #0]
 80096c2:	2000      	movs	r0, #0
 80096c4:	e7e8      	b.n	8009698 <__submore+0x1e>
 80096c6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80096c8:	0077      	lsls	r7, r6, #1
 80096ca:	463a      	mov	r2, r7
 80096cc:	f000 f8c0 	bl	8009850 <_realloc_r>
 80096d0:	4605      	mov	r5, r0
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d0de      	beq.n	8009694 <__submore+0x1a>
 80096d6:	eb00 0806 	add.w	r8, r0, r6
 80096da:	4601      	mov	r1, r0
 80096dc:	4632      	mov	r2, r6
 80096de:	4640      	mov	r0, r8
 80096e0:	f7fe ffd9 	bl	8008696 <memcpy>
 80096e4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80096e8:	f8c4 8000 	str.w	r8, [r4]
 80096ec:	e7e9      	b.n	80096c2 <__submore+0x48>

080096ee <_ungetc_r>:
 80096ee:	b570      	push	{r4, r5, r6, lr}
 80096f0:	460d      	mov	r5, r1
 80096f2:	1c69      	adds	r1, r5, #1
 80096f4:	4606      	mov	r6, r0
 80096f6:	4614      	mov	r4, r2
 80096f8:	d01e      	beq.n	8009738 <_ungetc_r+0x4a>
 80096fa:	b118      	cbz	r0, 8009704 <_ungetc_r+0x16>
 80096fc:	6a03      	ldr	r3, [r0, #32]
 80096fe:	b90b      	cbnz	r3, 8009704 <_ungetc_r+0x16>
 8009700:	f7fe fdbe 	bl	8008280 <__sinit>
 8009704:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009706:	07da      	lsls	r2, r3, #31
 8009708:	d405      	bmi.n	8009716 <_ungetc_r+0x28>
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	059b      	lsls	r3, r3, #22
 800970e:	d402      	bmi.n	8009716 <_ungetc_r+0x28>
 8009710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009712:	f7fe ffbe 	bl	8008692 <__retarget_lock_acquire_recursive>
 8009716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800971a:	f023 0220 	bic.w	r2, r3, #32
 800971e:	0758      	lsls	r0, r3, #29
 8009720:	81a2      	strh	r2, [r4, #12]
 8009722:	d422      	bmi.n	800976a <_ungetc_r+0x7c>
 8009724:	06d9      	lsls	r1, r3, #27
 8009726:	d40a      	bmi.n	800973e <_ungetc_r+0x50>
 8009728:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800972a:	07d2      	lsls	r2, r2, #31
 800972c:	d404      	bmi.n	8009738 <_ungetc_r+0x4a>
 800972e:	0599      	lsls	r1, r3, #22
 8009730:	d402      	bmi.n	8009738 <_ungetc_r+0x4a>
 8009732:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009734:	f7fe ffae 	bl	8008694 <__retarget_lock_release_recursive>
 8009738:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800973c:	e046      	b.n	80097cc <_ungetc_r+0xde>
 800973e:	071b      	lsls	r3, r3, #28
 8009740:	d50f      	bpl.n	8009762 <_ungetc_r+0x74>
 8009742:	4621      	mov	r1, r4
 8009744:	4630      	mov	r0, r6
 8009746:	f7fe fcd3 	bl	80080f0 <_fflush_r>
 800974a:	b120      	cbz	r0, 8009756 <_ungetc_r+0x68>
 800974c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800974e:	07d8      	lsls	r0, r3, #31
 8009750:	d4f2      	bmi.n	8009738 <_ungetc_r+0x4a>
 8009752:	89a3      	ldrh	r3, [r4, #12]
 8009754:	e7eb      	b.n	800972e <_ungetc_r+0x40>
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	60a0      	str	r0, [r4, #8]
 800975a:	f023 0308 	bic.w	r3, r3, #8
 800975e:	81a3      	strh	r3, [r4, #12]
 8009760:	61a0      	str	r0, [r4, #24]
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	f043 0304 	orr.w	r3, r3, #4
 8009768:	81a3      	strh	r3, [r4, #12]
 800976a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800976c:	6862      	ldr	r2, [r4, #4]
 800976e:	b2ed      	uxtb	r5, r5
 8009770:	b1d3      	cbz	r3, 80097a8 <_ungetc_r+0xba>
 8009772:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009774:	4293      	cmp	r3, r2
 8009776:	dc05      	bgt.n	8009784 <_ungetc_r+0x96>
 8009778:	4621      	mov	r1, r4
 800977a:	4630      	mov	r0, r6
 800977c:	f7ff ff7d 	bl	800967a <__submore>
 8009780:	2800      	cmp	r0, #0
 8009782:	d1e3      	bne.n	800974c <_ungetc_r+0x5e>
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	1e5a      	subs	r2, r3, #1
 8009788:	6022      	str	r2, [r4, #0]
 800978a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800978e:	6863      	ldr	r3, [r4, #4]
 8009790:	3301      	adds	r3, #1
 8009792:	6063      	str	r3, [r4, #4]
 8009794:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009796:	07da      	lsls	r2, r3, #31
 8009798:	d418      	bmi.n	80097cc <_ungetc_r+0xde>
 800979a:	89a3      	ldrh	r3, [r4, #12]
 800979c:	059b      	lsls	r3, r3, #22
 800979e:	d415      	bmi.n	80097cc <_ungetc_r+0xde>
 80097a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097a2:	f7fe ff77 	bl	8008694 <__retarget_lock_release_recursive>
 80097a6:	e011      	b.n	80097cc <_ungetc_r+0xde>
 80097a8:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80097aa:	6920      	ldr	r0, [r4, #16]
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	f001 0101 	and.w	r1, r1, #1
 80097b2:	b168      	cbz	r0, 80097d0 <_ungetc_r+0xe2>
 80097b4:	4298      	cmp	r0, r3
 80097b6:	d20b      	bcs.n	80097d0 <_ungetc_r+0xe2>
 80097b8:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80097bc:	42a8      	cmp	r0, r5
 80097be:	d107      	bne.n	80097d0 <_ungetc_r+0xe2>
 80097c0:	3b01      	subs	r3, #1
 80097c2:	3201      	adds	r2, #1
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	6062      	str	r2, [r4, #4]
 80097c8:	2900      	cmp	r1, #0
 80097ca:	d0e6      	beq.n	800979a <_ungetc_r+0xac>
 80097cc:	4628      	mov	r0, r5
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80097d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80097da:	2303      	movs	r3, #3
 80097dc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80097de:	4623      	mov	r3, r4
 80097e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80097e4:	6023      	str	r3, [r4, #0]
 80097e6:	2301      	movs	r3, #1
 80097e8:	6063      	str	r3, [r4, #4]
 80097ea:	e7ed      	b.n	80097c8 <_ungetc_r+0xda>

080097ec <_fstat_r>:
 80097ec:	b538      	push	{r3, r4, r5, lr}
 80097ee:	4d07      	ldr	r5, [pc, #28]	@ (800980c <_fstat_r+0x20>)
 80097f0:	2300      	movs	r3, #0
 80097f2:	4604      	mov	r4, r0
 80097f4:	4608      	mov	r0, r1
 80097f6:	4611      	mov	r1, r2
 80097f8:	602b      	str	r3, [r5, #0]
 80097fa:	f7f7 fd01 	bl	8001200 <_fstat>
 80097fe:	1c43      	adds	r3, r0, #1
 8009800:	d102      	bne.n	8009808 <_fstat_r+0x1c>
 8009802:	682b      	ldr	r3, [r5, #0]
 8009804:	b103      	cbz	r3, 8009808 <_fstat_r+0x1c>
 8009806:	6023      	str	r3, [r4, #0]
 8009808:	bd38      	pop	{r3, r4, r5, pc}
 800980a:	bf00      	nop
 800980c:	20004cd4 	.word	0x20004cd4

08009810 <_isatty_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	4d06      	ldr	r5, [pc, #24]	@ (800982c <_isatty_r+0x1c>)
 8009814:	2300      	movs	r3, #0
 8009816:	4604      	mov	r4, r0
 8009818:	4608      	mov	r0, r1
 800981a:	602b      	str	r3, [r5, #0]
 800981c:	f7f7 fd00 	bl	8001220 <_isatty>
 8009820:	1c43      	adds	r3, r0, #1
 8009822:	d102      	bne.n	800982a <_isatty_r+0x1a>
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	b103      	cbz	r3, 800982a <_isatty_r+0x1a>
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	20004cd4 	.word	0x20004cd4

08009830 <_sbrk_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	4d06      	ldr	r5, [pc, #24]	@ (800984c <_sbrk_r+0x1c>)
 8009834:	2300      	movs	r3, #0
 8009836:	4604      	mov	r4, r0
 8009838:	4608      	mov	r0, r1
 800983a:	602b      	str	r3, [r5, #0]
 800983c:	f7f7 fd08 	bl	8001250 <_sbrk>
 8009840:	1c43      	adds	r3, r0, #1
 8009842:	d102      	bne.n	800984a <_sbrk_r+0x1a>
 8009844:	682b      	ldr	r3, [r5, #0]
 8009846:	b103      	cbz	r3, 800984a <_sbrk_r+0x1a>
 8009848:	6023      	str	r3, [r4, #0]
 800984a:	bd38      	pop	{r3, r4, r5, pc}
 800984c:	20004cd4 	.word	0x20004cd4

08009850 <_realloc_r>:
 8009850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009854:	4680      	mov	r8, r0
 8009856:	4615      	mov	r5, r2
 8009858:	460c      	mov	r4, r1
 800985a:	b921      	cbnz	r1, 8009866 <_realloc_r+0x16>
 800985c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009860:	4611      	mov	r1, r2
 8009862:	f7fe bf93 	b.w	800878c <_malloc_r>
 8009866:	b92a      	cbnz	r2, 8009874 <_realloc_r+0x24>
 8009868:	f7fe ff24 	bl	80086b4 <_free_r>
 800986c:	2400      	movs	r4, #0
 800986e:	4620      	mov	r0, r4
 8009870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009874:	f000 f88a 	bl	800998c <_malloc_usable_size_r>
 8009878:	4285      	cmp	r5, r0
 800987a:	4606      	mov	r6, r0
 800987c:	d802      	bhi.n	8009884 <_realloc_r+0x34>
 800987e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009882:	d8f4      	bhi.n	800986e <_realloc_r+0x1e>
 8009884:	4629      	mov	r1, r5
 8009886:	4640      	mov	r0, r8
 8009888:	f7fe ff80 	bl	800878c <_malloc_r>
 800988c:	4607      	mov	r7, r0
 800988e:	2800      	cmp	r0, #0
 8009890:	d0ec      	beq.n	800986c <_realloc_r+0x1c>
 8009892:	42b5      	cmp	r5, r6
 8009894:	462a      	mov	r2, r5
 8009896:	4621      	mov	r1, r4
 8009898:	bf28      	it	cs
 800989a:	4632      	movcs	r2, r6
 800989c:	f7fe fefb 	bl	8008696 <memcpy>
 80098a0:	4621      	mov	r1, r4
 80098a2:	4640      	mov	r0, r8
 80098a4:	f7fe ff06 	bl	80086b4 <_free_r>
 80098a8:	463c      	mov	r4, r7
 80098aa:	e7e0      	b.n	800986e <_realloc_r+0x1e>

080098ac <_strtoul_l.constprop.0>:
 80098ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098b0:	4e34      	ldr	r6, [pc, #208]	@ (8009984 <_strtoul_l.constprop.0+0xd8>)
 80098b2:	4686      	mov	lr, r0
 80098b4:	460d      	mov	r5, r1
 80098b6:	4628      	mov	r0, r5
 80098b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098bc:	5d37      	ldrb	r7, [r6, r4]
 80098be:	f017 0708 	ands.w	r7, r7, #8
 80098c2:	d1f8      	bne.n	80098b6 <_strtoul_l.constprop.0+0xa>
 80098c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80098c6:	d12f      	bne.n	8009928 <_strtoul_l.constprop.0+0x7c>
 80098c8:	782c      	ldrb	r4, [r5, #0]
 80098ca:	2701      	movs	r7, #1
 80098cc:	1c85      	adds	r5, r0, #2
 80098ce:	f033 0010 	bics.w	r0, r3, #16
 80098d2:	d109      	bne.n	80098e8 <_strtoul_l.constprop.0+0x3c>
 80098d4:	2c30      	cmp	r4, #48	@ 0x30
 80098d6:	d12c      	bne.n	8009932 <_strtoul_l.constprop.0+0x86>
 80098d8:	7828      	ldrb	r0, [r5, #0]
 80098da:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80098de:	2858      	cmp	r0, #88	@ 0x58
 80098e0:	d127      	bne.n	8009932 <_strtoul_l.constprop.0+0x86>
 80098e2:	786c      	ldrb	r4, [r5, #1]
 80098e4:	2310      	movs	r3, #16
 80098e6:	3502      	adds	r5, #2
 80098e8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80098ec:	2600      	movs	r6, #0
 80098ee:	fbb8 f8f3 	udiv	r8, r8, r3
 80098f2:	fb03 f908 	mul.w	r9, r3, r8
 80098f6:	ea6f 0909 	mvn.w	r9, r9
 80098fa:	4630      	mov	r0, r6
 80098fc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009900:	f1bc 0f09 	cmp.w	ip, #9
 8009904:	d81c      	bhi.n	8009940 <_strtoul_l.constprop.0+0x94>
 8009906:	4664      	mov	r4, ip
 8009908:	42a3      	cmp	r3, r4
 800990a:	dd2a      	ble.n	8009962 <_strtoul_l.constprop.0+0xb6>
 800990c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8009910:	d007      	beq.n	8009922 <_strtoul_l.constprop.0+0x76>
 8009912:	4580      	cmp	r8, r0
 8009914:	d322      	bcc.n	800995c <_strtoul_l.constprop.0+0xb0>
 8009916:	d101      	bne.n	800991c <_strtoul_l.constprop.0+0x70>
 8009918:	45a1      	cmp	r9, r4
 800991a:	db1f      	blt.n	800995c <_strtoul_l.constprop.0+0xb0>
 800991c:	fb00 4003 	mla	r0, r0, r3, r4
 8009920:	2601      	movs	r6, #1
 8009922:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009926:	e7e9      	b.n	80098fc <_strtoul_l.constprop.0+0x50>
 8009928:	2c2b      	cmp	r4, #43	@ 0x2b
 800992a:	bf04      	itt	eq
 800992c:	782c      	ldrbeq	r4, [r5, #0]
 800992e:	1c85      	addeq	r5, r0, #2
 8009930:	e7cd      	b.n	80098ce <_strtoul_l.constprop.0+0x22>
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1d8      	bne.n	80098e8 <_strtoul_l.constprop.0+0x3c>
 8009936:	2c30      	cmp	r4, #48	@ 0x30
 8009938:	bf0c      	ite	eq
 800993a:	2308      	moveq	r3, #8
 800993c:	230a      	movne	r3, #10
 800993e:	e7d3      	b.n	80098e8 <_strtoul_l.constprop.0+0x3c>
 8009940:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009944:	f1bc 0f19 	cmp.w	ip, #25
 8009948:	d801      	bhi.n	800994e <_strtoul_l.constprop.0+0xa2>
 800994a:	3c37      	subs	r4, #55	@ 0x37
 800994c:	e7dc      	b.n	8009908 <_strtoul_l.constprop.0+0x5c>
 800994e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009952:	f1bc 0f19 	cmp.w	ip, #25
 8009956:	d804      	bhi.n	8009962 <_strtoul_l.constprop.0+0xb6>
 8009958:	3c57      	subs	r4, #87	@ 0x57
 800995a:	e7d5      	b.n	8009908 <_strtoul_l.constprop.0+0x5c>
 800995c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8009960:	e7df      	b.n	8009922 <_strtoul_l.constprop.0+0x76>
 8009962:	1c73      	adds	r3, r6, #1
 8009964:	d106      	bne.n	8009974 <_strtoul_l.constprop.0+0xc8>
 8009966:	2322      	movs	r3, #34	@ 0x22
 8009968:	f8ce 3000 	str.w	r3, [lr]
 800996c:	4630      	mov	r0, r6
 800996e:	b932      	cbnz	r2, 800997e <_strtoul_l.constprop.0+0xd2>
 8009970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009974:	b107      	cbz	r7, 8009978 <_strtoul_l.constprop.0+0xcc>
 8009976:	4240      	negs	r0, r0
 8009978:	2a00      	cmp	r2, #0
 800997a:	d0f9      	beq.n	8009970 <_strtoul_l.constprop.0+0xc4>
 800997c:	b106      	cbz	r6, 8009980 <_strtoul_l.constprop.0+0xd4>
 800997e:	1e69      	subs	r1, r5, #1
 8009980:	6011      	str	r1, [r2, #0]
 8009982:	e7f5      	b.n	8009970 <_strtoul_l.constprop.0+0xc4>
 8009984:	08009d55 	.word	0x08009d55

08009988 <_strtoul_r>:
 8009988:	f7ff bf90 	b.w	80098ac <_strtoul_l.constprop.0>

0800998c <_malloc_usable_size_r>:
 800998c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009990:	1f18      	subs	r0, r3, #4
 8009992:	2b00      	cmp	r3, #0
 8009994:	bfbc      	itt	lt
 8009996:	580b      	ldrlt	r3, [r1, r0]
 8009998:	18c0      	addlt	r0, r0, r3
 800999a:	4770      	bx	lr

0800999c <_init>:
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	bf00      	nop
 80099a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a2:	bc08      	pop	{r3}
 80099a4:	469e      	mov	lr, r3
 80099a6:	4770      	bx	lr

080099a8 <_fini>:
 80099a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099aa:	bf00      	nop
 80099ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ae:	bc08      	pop	{r3}
 80099b0:	469e      	mov	lr, r3
 80099b2:	4770      	bx	lr
